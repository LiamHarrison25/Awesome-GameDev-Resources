{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Awesome GameDev Resources","text":"<p>Join is on Discord!</p> <p></p> <p>How to use this repo: Read the topics, and if you're unsure if you understand the topics covered here it is a good time for you to revisit them.</p> <p>Ways of reading:</p> <ul> <li>Website: read through your browser the interactive examples and animations will work better in this version;</li> <li>Github: You read through the github repo;</li> <li>PDF: download the latest </li> <li>Amazon Kindle: You can buy the book in Amazon and read it in your kindle device;</li> <li>Contribute!: If you want to go deep and propose changes to repo, use the github repo.</li> </ul>"},{"location":"#badges","title":"Badges","text":"<p>CI: </p> <p>Join us:  .</p> <p>Metrics:  </p> <p>Code of conduct: </p>"},{"location":"#topics","title":"Topics","text":"<ol> <li>Intro to Programming</li> <li>Advanced Programming</li> <li>Artificial Intelligence</li> <li>Developer Portfolio</li> </ol>"},{"location":"#philosophy","title":"Philosophy","text":"<p>This repository aims to be practical, and it will be updated as we test the methodology. Frame it as a guidebook, not a manual. Most of the time, we are constrained by the time, so in order to move fast, we won't cover deeply some topics, but the basics that allows you to explore by yourself or point the directions for you to study in other places acting as a self-taught student, so you really should look for more information elsewhere if you feels so. I use lots of references and highly incentive you to look for other too and propose changes in this repo. Sometimes, it will mostly presented in a chaotic way, which implies that you will need to explore the concepts by yourself or read the manual/books. Every student should follow your own path to learning, it is impossible to cover every learning style, so it is up to you to build your own path and discover the best way to learn. What worked for me or what works for a given student probably won't work for you, so dont compare yourself to others too much, but be assured that we're here to help you to succeed. If you need help, just send private messages, or use public forums such as github issues and discussions.</p>"},{"location":"#reflections-on-teaching-and-learning-processes","title":"Reflections on teaching and learning processes","text":""},{"location":"#philosophies","title":"Philosophies","text":"<p>I would like to categorize the classes into philosophies. so I can address them properly: - Advanced classes: are more focused on work and deliveries than theory, they are tailored toward the student goals more than the closed boxes and fixed expected results. It comprehends AI and Adv. AI; - Introduction classes: are focused on theory and practice. In those classes, they have more focus on structural knowledge and basic content. It comprehends classes such as Introduction to Programming. - Guidance: are more focused on how can we bring the student to the highest standard and get ready to be hired. It comprehends classes such as Capstone, Portfolio classes, and Mentoring activities.</p>"},{"location":"#learning-styles","title":"Learning Styles","text":"<ul> <li>Visual: You prefer using pictures, images, and spatial understanding;</li> <li>For this style I recently acquired a pen-tablet monitor, so I will be adding this type of content more often.</li> <li>I also use lots of diagrams via code2flow, sequence diagram and others </li> <li>I assume my handwriting is not the best, but I compensate it with lots of diagrams and pictures, and always project what I write in the computer. </li> <li>Aural: You prefer using sound and music;<ul> <li>I always link to youtube videos and podcasts, so they can follow up with extra content and material;</li> </ul> </li> <li>Verbal: You prefer using words, both in speech and writing;<ul> <li>I setup my machine to record specific topics that might be hard to undestand in just one go, and I did some experimental recordings, but I am still struggling with video editing. I will be adding more videos in the future. </li> <li>My main issue here is that I am not a native english speaker, so I am still struggling with the language, but I am trying to improve it.</li> <li>Other issue that I can name is eye-to-eye contact. It feels overburned to me to keep eye-to-eye contact, that I usually look away.</li> </ul> </li> <li>Physical: You prefer using your body, hands and sense of touch;<ul> <li>Given my cultural origin, I am usually over expressive in this field, and I need more fine tuning my proxemic. Brazilians commonly talk and walk closer to each other than americans. </li> <li>While lecture I really enjoy to use my hands to express myself, and I am trying to use more body language to express myself.</li> </ul> </li> <li>Logical: You prefer using logic, reasoning and systems;<ul> <li>I always craft and test teaching experiences to push them to think and reason about the topics. </li> <li>I always use tools such as beecrowd to let them code and test their ability to solve problems.</li> </ul> </li> <li>Social: You prefer to learn in groups or with other people;<ul> <li>I incentive them to do in-class assignments in pairs, and do group assignments. But I recognize this might be a problem for some students, so I am trying to find a way to make it more inclusive. </li> <li>Strangelly for me, some students prefer to socialize with me by booking office hours more than working together. Probably next semester I will reserve a time to do a type of co-working time when I can be available to help them in their assignments.</li> </ul> </li> <li>Solitary: You prefer to work alone and use self-study.<ul> <li>Sometimes and some topics you really need to study by yourself, and it can be the best way for some. But I warn them about the effects of loneliness and impostor syndrome.</li> <li>This is usually the most common way to learn, and I always keep an eye on the ones that are struggling to keep up with the class. I always try to reach them and help them to keep up with the class.</li> <li>To compensate this solitude I incentive them to present their work to the class no they can experience having attention even when the lack social skills.</li> </ul> </li> </ul>"},{"location":"#teaching-styles","title":"Teaching Styles","text":"<p>For every type of style, I try to give a bit of insights:</p> <ul> <li>Authoritative: control the classroom and maintain discipline; <ul> <li>I create a set of rules that should be followed in order to guarantee the student's success; </li> </ul> </li> <li>Delegator: give students control of their learning;<ul> <li>For the intro classes I follow more this strategy;</li> </ul> </li> <li>Facilitator: guide students and help them learn by themselves;<ul> <li>I usually follow this strategy on advanced classes;</li> </ul> </li> <li>Demonstrator: explain and show things to students;<ul> <li>I usully provide a stream of references or even create my own content to show them how to do things;</li> </ul> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>Give us stars! Click -&gt; </p> <p></p>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#187-2023-09-04","title":"1.8.7 (2023-09-04)","text":""},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>flocking: add flocking cmake automation (ac1365a)</li> <li>flocking: fix flocking description (84fd158)</li> </ul>"},{"location":"CHANGELOG/#186-2023-09-04","title":"1.8.6 (2023-09-04)","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>flocking: fix flocking rule composition (52b690f)</li> </ul>"},{"location":"CHANGELOG/#185-2023-09-01","title":"1.8.5 (2023-09-01)","text":""},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>intro: add numberings for the first class (33fc80c)</li> </ul>"},{"location":"CHANGELOG/#184-2023-08-31","title":"1.8.4 (2023-08-31)","text":""},{"location":"CHANGELOG/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>intro: add sequence diagram suggestion into intro programming (5182e5d)</li> </ul>"},{"location":"CHANGELOG/#183-2023-08-31","title":"1.8.3 (2023-08-31)","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>ferpa: add ferpa consent to ai setup assignment (69fe9b7)</li> </ul>"},{"location":"CHANGELOG/#182-2023-08-31","title":"1.8.2 (2023-08-31)","text":""},{"location":"CHANGELOG/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>ferpa: add ferpa waiver consent (9f8a4d0)</li> </ul>"},{"location":"CHANGELOG/#181-2023-08-31","title":"1.8.1 (2023-08-31)","text":""},{"location":"CHANGELOG/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>ci: add lxml dependency (4dbbc72)</li> <li>ferpa: add ferpa considerations (6e8930f)</li> </ul>"},{"location":"CHANGELOG/#180-2023-08-30","title":"1.8.0 (2023-08-30)","text":""},{"location":"CHANGELOG/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>intro: better description on the learning objectives and outcomes (ab5606d)</li> </ul>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>courses: restructure (da9bc19)</li> </ul>"},{"location":"CHANGELOG/#176-2023-08-29","title":"1.7.6 (2023-08-29)","text":""},{"location":"CHANGELOG/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>blog: add image to notes on submission (8b6fa3a)</li> </ul>"},{"location":"CHANGELOG/#175-2023-08-29","title":"1.7.5 (2023-08-29)","text":""},{"location":"CHANGELOG/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>rng: fix AI RNG tests (8f9d2ff)</li> </ul>"},{"location":"CHANGELOG/#174-2023-08-28","title":"1.7.4 (2023-08-28)","text":""},{"location":"CHANGELOG/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>slide: test (290b4a7)</li> </ul>"},{"location":"CHANGELOG/#173-2023-08-28","title":"1.7.3 (2023-08-28)","text":""},{"location":"CHANGELOG/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>end lines (b8ec525)</li> </ul>"},{"location":"CHANGELOG/#172-2023-08-24","title":"1.7.2 (2023-08-24)","text":""},{"location":"CHANGELOG/#bug-fixes_12","title":"Bug Fixes","text":"<ul> <li>blog: add blog post meta details (f8ddc16)</li> </ul>"},{"location":"CHANGELOG/#171-2023-08-22","title":"1.7.1 (2023-08-22)","text":""},{"location":"CHANGELOG/#bug-fixes_13","title":"Bug Fixes","text":"<ul> <li>blog: remove compatibility author data (b2d40cf)</li> </ul>"},{"location":"CHANGELOG/#170-2023-08-22","title":"1.7.0 (2023-08-22)","text":""},{"location":"CHANGELOG/#bug-fixes_14","title":"Bug Fixes","text":"<ul> <li>better indexes (74b68ce)</li> <li>blog: fix authors (0e15062)</li> </ul>"},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>adv schedule (4bb1186)</li> </ul>"},{"location":"CHANGELOG/#162-2023-08-10","title":"1.6.2 (2023-08-10)","text":""},{"location":"CHANGELOG/#bug-fixes_15","title":"Bug Fixes","text":"<ul> <li>vr: add missing application (c259b37)</li> </ul>"},{"location":"CHANGELOG/#161-2023-08-10","title":"1.6.1 (2023-08-10)","text":""},{"location":"CHANGELOG/#bug-fixes_16","title":"Bug Fixes","text":"<ul> <li>blog: readtime (f7dc6ad)</li> </ul>"},{"location":"CHANGELOG/#160-2023-08-10","title":"1.6.0 (2023-08-10)","text":""},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>blog: add ideas on mixed reality (1b1b44f)</li> </ul>"},{"location":"CHANGELOG/#152-2023-08-04","title":"1.5.2 (2023-08-04)","text":""},{"location":"CHANGELOG/#bug-fixes_17","title":"Bug Fixes","text":"<ul> <li>cmake: disable default build flag ENABLE_DOCUMENTATION (cd1c805)</li> </ul>"},{"location":"CHANGELOG/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>package: add more scripts (7c073ba)</li> </ul>"},{"location":"CHANGELOG/#151-2023-08-03","title":"1.5.1 (2023-08-03)","text":""},{"location":"CHANGELOG/#bug-fixes_18","title":"Bug Fixes","text":"<ul> <li>reveal: make reveal be cloned before ci/cd (bf40550)</li> <li>RNG bit shift (1ae6421)</li> </ul>"},{"location":"CHANGELOG/#150-2023-08-02","title":"1.5.0 (2023-08-02)","text":""},{"location":"CHANGELOG/#bug-fixes_19","title":"Bug Fixes","text":"<ul> <li>blog: disable draft (c459e7d)</li> <li>blog: timezone (665167b)</li> <li>life: fix game of life automated tests endlines (cfc4364)</li> <li>life: fixed some tests (0e97dcb)</li> <li>tzdata: add tzdata as dependency (b71de98)</li> </ul>"},{"location":"CHANGELOG/#features_3","title":"Features","text":"<ul> <li>reveal: add reveal to embed presentations (f6e4cc6)</li> </ul>"},{"location":"CHANGELOG/#140-2023-07-28","title":"1.4.0 (2023-07-28)","text":""},{"location":"CHANGELOG/#bug-fixes_20","title":"Bug Fixes","text":"<ul> <li>mkdocs: fix mkdocs watching wrong folder (e3de093)</li> <li>mkdocs: improve blog exclusion on pdf generation (8719186)</li> </ul>"},{"location":"CHANGELOG/#features_4","title":"Features","text":"<ul> <li>blog: add blogging system (fb77f86)</li> </ul>"},{"location":"CHANGELOG/#performance-improvements_1","title":"Performance Improvements","text":"<ul> <li>life: game of life automated tests (eaeca18)</li> <li>maze: add automated tests for maze (988c4c7)</li> </ul>"},{"location":"CHANGELOG/#138-2023-07-26","title":"1.3.8 (2023-07-26)","text":""},{"location":"CHANGELOG/#bug-fixes_21","title":"Bug Fixes","text":"<ul> <li>maze: fix endlines for maze examples (95c18c1)</li> </ul>"},{"location":"CHANGELOG/#137-2023-07-26","title":"1.3.7 (2023-07-26)","text":""},{"location":"CHANGELOG/#bug-fixes_22","title":"Bug Fixes","text":"<ul> <li>maze: add empty spaces at the end of the line (7350899)</li> </ul>"},{"location":"CHANGELOG/#136-2023-07-26","title":"1.3.6 (2023-07-26)","text":""},{"location":"CHANGELOG/#bug-fixes_23","title":"Bug Fixes","text":"<ul> <li>maze: fix maze outputs (717a3ee)</li> </ul>"},{"location":"CHANGELOG/#performance-improvements_2","title":"Performance Improvements","text":"<ul> <li>maze: improve maze example description (2cd17f0)</li> </ul>"},{"location":"CHANGELOG/#135-2023-07-26","title":"1.3.5 (2023-07-26)","text":""},{"location":"CHANGELOG/#performance-improvements_3","title":"Performance Improvements","text":"<ul> <li>maze: improve maze generation examples (5210f70)</li> </ul>"},{"location":"CHANGELOG/#134-2023-07-21","title":"1.3.4 (2023-07-21)","text":""},{"location":"CHANGELOG/#bug-fixes_24","title":"Bug Fixes","text":"<ul> <li>lfs: undo lfs track (6ff23f7)</li> </ul>"},{"location":"CHANGELOG/#133-2023-07-21","title":"1.3.3 (2023-07-21)","text":""},{"location":"CHANGELOG/#bug-fixes_25","title":"Bug Fixes","text":"<ul> <li>gh-pages: force orphan (a689097)</li> </ul>"},{"location":"CHANGELOG/#132-2023-07-21","title":"1.3.2 (2023-07-21)","text":""},{"location":"CHANGELOG/#performance-improvements_4","title":"Performance Improvements","text":"<ul> <li>home: add stars to home (ff8d497)</li> </ul>"},{"location":"CHANGELOG/#131-2023-07-21","title":"1.3.1 (2023-07-21)","text":""},{"location":"CHANGELOG/#performance-improvements_5","title":"Performance Improvements","text":"<ul> <li>social: add logo (618c4ed)</li> </ul>"},{"location":"CHANGELOG/#130-2023-07-21","title":"1.3.0 (2023-07-21)","text":""},{"location":"CHANGELOG/#bug-fixes_26","title":"Bug Fixes","text":"<ul> <li>social: fix gource output (9f3e386)</li> </ul>"},{"location":"CHANGELOG/#features_5","title":"Features","text":"<ul> <li>social: add social cards (96564eb)</li> </ul>"},{"location":"CHANGELOG/#1214-2023-07-21","title":"1.2.14 (2023-07-21)","text":""},{"location":"CHANGELOG/#performance-improvements_6","title":"Performance Improvements","text":"<ul> <li>spatial-quantization: add spatial quantization to the AI index (2225e2e)</li> </ul>"},{"location":"CHANGELOG/#1213-2023-07-21","title":"1.2.13 (2023-07-21)","text":""},{"location":"CHANGELOG/#bug-fixes_27","title":"Bug Fixes","text":"<ul> <li>lfs: disable lfs (c2dc8fb)</li> <li>pdf: disable setup-chrome action (83a8690)</li> <li>pdf: install chrome manually (90602ec)</li> <li>pdf: install chrome properly to render js (096b0e6)</li> </ul>"},{"location":"CHANGELOG/#1212-2023-07-20","title":"1.2.12 (2023-07-20)","text":""},{"location":"CHANGELOG/#bug-fixes_28","title":"Bug Fixes","text":"<ul> <li>typo: innitiative -&gt; intitiative (92b25fa)</li> </ul>"},{"location":"CHANGELOG/#1211-2023-07-20","title":"1.2.11 (2023-07-20)","text":""},{"location":"CHANGELOG/#bug-fixes_29","title":"Bug Fixes","text":"<ul> <li>pdf: add chromium to render js formulas (045f296)</li> <li>pdf: convert $$ to notation [ in order to properly render formulas (ade71c6)</li> </ul>"},{"location":"CHANGELOG/#performance-improvements_7","title":"Performance Improvements","text":"<ul> <li>maze: add gif maze animation (6ea4ce4)</li> </ul>"},{"location":"CHANGELOG/#1210-2023-07-19","title":"1.2.10 (2023-07-19)","text":""},{"location":"CHANGELOG/#performance-improvements_8","title":"Performance Improvements","text":"<ul> <li>AI: improve AI index (a3b2ef2)</li> </ul>"},{"location":"CHANGELOG/#129-2023-07-19","title":"1.2.9 (2023-07-19)","text":""},{"location":"CHANGELOG/#bug-fixes_30","title":"Bug Fixes","text":"<ul> <li>IA: better indexing for maze (11631cb)</li> </ul>"},{"location":"CHANGELOG/#128-2023-07-19","title":"1.2.8 (2023-07-19)","text":""},{"location":"CHANGELOG/#performance-improvements_9","title":"Performance Improvements","text":"<ul> <li>maze: add maze desciption (dd05bd0)</li> <li>rng: better input type description (0d27624)</li> </ul>"},{"location":"CHANGELOG/#127-2023-07-19","title":"1.2.7 (2023-07-19)","text":""},{"location":"CHANGELOG/#performance-improvements_10","title":"Performance Improvements","text":"<ul> <li>rng: better input example and description (8ab58ff)</li> </ul>"},{"location":"CHANGELOG/#126-2023-07-19","title":"1.2.6 (2023-07-19)","text":""},{"location":"CHANGELOG/#bug-fixes_31","title":"Bug Fixes","text":"<ul> <li>IA: fix new line on schedule (b669e68)</li> </ul>"},{"location":"CHANGELOG/#125-2023-07-19","title":"1.2.5 (2023-07-19)","text":""},{"location":"CHANGELOG/#performance-improvements_11","title":"Performance Improvements","text":"<ul> <li>life: add game of life assignment (0d15638)</li> </ul>"},{"location":"CHANGELOG/#124-2023-07-18","title":"1.2.4 (2023-07-18)","text":""},{"location":"CHANGELOG/#performance-improvements_12","title":"Performance Improvements","text":"<ul> <li>rng: add pseudo random number generation assignment (da4663a)</li> </ul>"},{"location":"CHANGELOG/#123-2023-07-14","title":"1.2.3 (2023-07-14)","text":""},{"location":"CHANGELOG/#performance-improvements_13","title":"Performance Improvements","text":"<ul> <li>flocking: add gifs to the repo and start lfs attributes (4063fd7)</li> </ul>"},{"location":"CHANGELOG/#122-2023-07-14","title":"1.2.2 (2023-07-14)","text":""},{"location":"CHANGELOG/#performance-improvements_14","title":"Performance Improvements","text":"<ul> <li>math: change math formula processor to mathjax (4a03dc4)</li> </ul>"},{"location":"CHANGELOG/#121-2023-07-13","title":"1.2.1 (2023-07-13)","text":""},{"location":"CHANGELOG/#performance-improvements_15","title":"Performance Improvements","text":"<ul> <li>pdf: improve pdf link download (dce4279)</li> </ul>"},{"location":"CHANGELOG/#120-2023-07-13","title":"1.2.0 (2023-07-13)","text":""},{"location":"CHANGELOG/#features_6","title":"Features","text":"<ul> <li>pdf: automatic deploy pdf releases (a48edc5)</li> </ul>"},{"location":"CHANGELOG/#113-2023-07-13","title":"1.1.3 (2023-07-13)","text":""},{"location":"CHANGELOG/#bug-fixes_32","title":"Bug Fixes","text":"<ul> <li>flocking: fix dot multiplication notation (f3bde7d)</li> </ul>"},{"location":"CHANGELOG/#112-2023-07-13","title":"1.1.2 (2023-07-13)","text":""},{"location":"CHANGELOG/#performance-improvements_16","title":"Performance Improvements","text":"<ul> <li>flocking: improve tests (228dec9)</li> </ul>"},{"location":"CHANGELOG/#111-2023-07-13","title":"1.1.1 (2023-07-13)","text":""},{"location":"CHANGELOG/#bug-fixes_33","title":"Bug Fixes","text":"<ul> <li>disable instant navigation to avoid latex rendering problem (5b08e0e)</li> </ul>"},{"location":"CHANGELOG/#110-2023-07-13","title":"1.1.0 (2023-07-13)","text":""},{"location":"CHANGELOG/#features_7","title":"Features","text":"<ul> <li>flocking assignment (2be7cf9)</li> </ul>"},{"location":"CHANGELOG/#100-2023-07-02","title":"1.0.0 (2023-07-02)","text":""},{"location":"CHANGELOG/#bug-fixes_34","title":"Bug Fixes","text":"<ul> <li>Change pt to en. (b8b4203)</li> <li>checkout action ci (9ce8073)</li> <li>dojo filename (26c213b)</li> <li>fallback option for whet git is not available to provide dates (2430423)</li> <li>footer (a6f2118)</li> <li>git permissions inside container (d8d0547)</li> <li>indexing (de7ac39)</li> <li>maze links (06ac83c)</li> <li>navbar (35dcb9c)</li> <li>sorting: add more details on sorting algorithms (12dcc50)</li> </ul>"},{"location":"CHANGELOG/#features_8","title":"Features","text":"<ul> <li>add advanced cpp to the index (b9c9059)</li> <li>add comments, and improve tooling description (af77a6a)</li> <li>add communication homework (945af72)</li> <li>add tests for advanced classes, improved function text (750452b)</li> <li>Advanced CPP schedule (d717437)</li> <li>arrays and interview session with chatgpt (0aa50d5)</li> <li>better summary (8031089)</li> <li>conditionals and loops (f2db605)</li> <li>extend arrays and add introduction to adv cpp (be5cd72)</li> <li>finetune tracking folders (fa06675)</li> <li>github commiters (7c94f2c)</li> <li>hosting (9bf2456)</li> <li>improve cmake description for multiple executables in the same project (d665724)</li> <li>improved headline (ff7a219)</li> <li>intro: add more loop patterns (df0dcf9)</li> <li>introduction (f165d24)</li> <li>mkdocs (ae78e90)</li> <li>mkdocs + readthedocs (671e857)</li> <li>portfolio (c09f1bb)</li> <li>portfolio: Promoting content (40f057a)</li> <li>scaffold (2e0e054)</li> <li>some examples (3a3cba2)</li> <li>sorting: add sorting topic (205ef27)</li> <li>sorting: add videos (2dcccee)</li> <li>streams (03fcdb0)</li> <li>tooling description (4f7b487)</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/07/28/the-problem-with-ai-trolley-dilemma/","title":"The problem with AI Trolley dilemma","text":"<p>The premise about the AI trolley dilemma is invalid. So the whole discussion about who should the car kill in a fatal situation. Let me explain why.</p> <p>Yesterday I attended a conference about Ethics and AI, and the speaker mentioned the trolley dilemma. The question asked was \"What should the self-driving car do?\" and kind of forced us to take sides on the matter. </p> <ul> <li>Kill the passengers; </li> <li>Kill the pedestrians;</li> </ul> <p>This is the same as the trolley problem but one difference. AI don't have morals, it will follow what is programmed without any hesitation. So the question is not what the AI should do, but what the programmer codes it to do.</p> <p>Well, the whole premise on asking what should do \"kill this, or that\" is totally wrong. As a programmer myself, and knowing the limits of the system, I would never code a system to make such a decision. If the car is in a situation that it cannot break in time with the current limited vision, it should go slower. So no decision ever has to be made.</p> <p>Let's do some math for you to see how this could be easily solved.</p>"},{"location":"blog/2023/07/28/the-problem-with-ai-trolley-dilemma/#the-math","title":"The math","text":"<p>Let's use the standard formula for the distance needed to stop a car.</p> \\[S = v*t + \\frac{v^2}{2*u*g}\\] <p>Where:</p> <ul> <li>\\(S\\) is the distance needed to stop;</li> <li>\\(v\\) is the speed of the car;</li> <li>\\(t\\) is the reaction time;</li> <li>\\(v*t\\) is the distance traveled during the reaction time;</li> <li>\\(u\\) is the tire friction factor;</li> <li>\\(g\\) is the gravity acceleration;</li> <li>\\(\\frac{v^2}{2*u*g}\\) is the distance traveled during the breaking time;</li> </ul> <p>If the car is going at \\(100 km/h\\) (\\(27.7 m/s\\), \\(62.14 mi/h\\)) and the reaction time of the AI is relatively fast, let's say \\(0.2 s\\), so the distance traveled to a complete sage stop would be:</p> \\[S = 27.7 * 0.2 + \\frac{27.7^2}{2*0.2*9.8} = 5.54 + 38.5 = 44.04 m\\] <p>Which means that the car would need \\(44.04 m\\) to stop. So if the car cannot clearly see a distance greater than that, it should slow down. And this is the reason the self-driving AIs are said to be slow drivers.</p>"},{"location":"blog/2023/08/30/ferpa-consent/","title":"FERPA Consent","text":"<p>FERPA (The Family Educational Rights and Privacy Act) is a federal law protecting the confidentiality of student records. It restricts others from accessing or discussing your educational records without your consent. Here we are going to discuss how it applies to the courses I teach and what are the benefits on sharing your work publicly if you want.</p> <p>FERPA consent form</p> <p>Read more about the reasoning and rationale below.</p> <p>Note</p> <p>This a modified version from this original.</p> <p>In a typical class, your homework (and other information delineating your academic performance) would not be visible to the public. Indeed, the FERPA law requires that you have the right to privacy in this regard. This is one of the main reasons for the existence of so many \"walled gardens\" for courseware, such as Autolab, Blackboard, CanvasLMS and Piazza, which keep all student work hidden behind passwords.</p> <p>An essential component of the educational experience in new media arts, however, is learning how to participate in the \"Grand Conversation\" all around us, by becoming more effective culture operators. We cannot do this in the safe space of a Canvas module. Our work is strengthened and sharpened in the forge of public scrutiny: in this case, the agora of the Internet.</p> <p>Sometimes students are afraid to publish something because it is of poor quality. They think that they will receive embarrassing, negative critiques. In fact, negative critique is quite rare. The most common thing that happens when one creates an artwork of poor quality, is that it is simply ignored. Being ignored - this, not being shunned or derided - this is the fate of mediocre work.</p> <p>On the other hand, if something is truly great is published - and great projects can happen, and have happened, even in an introductory class like this one - there is the chance that it may be circulated widely on the Internet. Every year that I have taught, a handful of the students' projects get blogged and receive as many as 50000 views in a week. It cannot be emphasized that this can be an absolutely transformative experience for students, that cannot be obtained without taking the risk to work publicly. Students get jobs and build careers on the basis of such success.</p> <p>That said, there are also plenty of reasons why you may wish to work anonymously, when you work online. Perhaps you are concerned about stalkers or harassment. Perhaps you wish to address themes in your work which might not meet with the approval of your parents or future employers. These are valid considerations, in which case, we advise using an anonymous identity on Github. On our course repository, your work will be indexed by a public-facing name, generally your first name. If you would prefer something else, please inform the professor.</p>"},{"location":"blog/2023/08/30/ferpa-consent/#ferpa-consent-form","title":"Ferpa Consent Form","text":"<p>Fill this form if you want to share your work publicly. If you don't fill this form, your work should be private:</p> <p>FERPA consent form</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/","title":"Let's talk about Virtual Reality","text":"<p>The goal of this article is not be a comprehensive guide about Virtual Reality, but to give you a general sense of what it is and how it works. I will also give you some examples of how it is being used today and what we can expect for the future.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#history","title":"History","text":"<pre><code>graph TB\n  Start[Start] \n  -- 1838 --&gt; Stereoscope[Stereoscope] \n  -- 1935 --&gt; multisensory[Multi Sensory Machines]\n  -- 1960 --&gt; hmd[Head Mounted Devices\\nVR Goggles]\n  -- 1965 --&gt; military[Military Research\\nTraining\\nHelmets]\n  -- 1970 --&gt; artificialreality[Artificial Reality\\nComputer Simulations]\n  -- 1980 --&gt; gloves[Stereo Vision Glasses\\nGloves for VR]\n  -- 1989 --&gt; nasa[NASA Training\\nComputer Simulated Teleoperation]\n  -- 1990 --&gt; game[VR Gaming\\nVR Arcades]\n  -- 1997 --&gt; serious[PTSD Treatment]\n  -- 2007 --&gt; datavis[Google Street View\\nStereoscopic 3D]\n  -- 2010 --&gt;oculus[Oculus VR\\nOculus Kickstarter\\nFacebook acquisition]\n  -- 2015 --&gt;general[General Audience\\nMultiple VR products]\n  -- 2016 --&gt;ar[AR\\nPokemon Go\\nHololens] \n  -- 2017 --&gt;ARKIT[AR\\nApple ARKit] \n  -- 2018 --&gt;oculusquest[Oculus Quest\\nStandalone VR]\n  -- 2021 --&gt;metaverse[Metaverse\\nFacebook rebrands to Meta]\n  -- 2023 --&gt;apple[Apple Vision]</code></pre> <p>As you can see the history of VR is quite long and full of interesting surprising developments, but it is only in the last 10 years that it has become a reality for the general audience.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#terms-disambiguation","title":"Terms Disambiguation","text":"<p>Before we go any further, let's disambiguate some terms that are often used interchangeably. Nowadays we have a spectrum of immersive technologies that goes from the real world to the virtual world.</p> <pre><code>graph LR\n    real[Real World]--&gt;mixed\n\n    subgraph mixed[Mixed Reality]\n        augmentedreality[Augmented Reality]\n        augmentedvirtuality[Augmented Virtuality]\n    end\n\n    mixed --&gt; virtual[Virtual Reality]</code></pre>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#virtual-reality","title":"Virtual Reality","text":"<p>Virtual Reality (VR) is the most pervasive and ambiguous term. It is sometimes used as an umbrella for all immersive technologies, but it is more commonly used to refer to the process of simulating a virtual world that is completely isolated the user from the real world. This is usually done by using a Head Mounted Display (HMD) that blocks the user's view of the real world and replaces it with a simulation in front of the user's eyes; and headphones to replace the real sounds with virtual. The user can also use controllers to interact in it.</p> <p>This term gained lots of attention with the modern VR boom that started in 2010 with the Oculus Kickstarter campaign followed by its acquisition by Facebook in 2014. After that, many other companies started to develop their own VR products, such as the HTC Vive, the Playstation VR, and the Samsung Gear VR.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#augmented-reality","title":"Augmented Reality","text":"<p>Augmented Reality is another ambiguous term, but its meaning is more settled. It refers to the process of adding computer generated elements to the real world. It can be done by using a Head Mounted Display (HMD) that allows the user to see the real world and the virtual elements at the same time such as Google Glass or the Microsoft Hololens. It can also be done by using a smartphone or tablet that uses the camera to capture the real world and then adds virtual elements to it. This is the case of the Snapchat filters and the popular game Pokemon Go launched in 2016.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#augmented-virtuality","title":"Augmented Virtuality","text":"<p>This term usually is not misused and more specifically refers to the process of adding real world elements to a virtual world. It can appears in many forms, for example, the use of a treadmill to simulate walking in the virtual world or the use of a camera to capture the user's face and add it to the virtual world. Stereocameras or depth sensors are also used to capture the user's hands and add them to the virtual world as well.</p> <p>Most of the time Augmented Virtuality (AV) is seen as an enhancement to the already existing immersive experience. It can be used to add another level of realism to the virtual world, to make the user feel more immersed in it, reduce nausea, or discomfort by adding real world anchors to the virtual world.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#challenges","title":"Challenges","text":"<p>In order to make immersive gadgets a reality, we need to overcome some challenges. The most important ones are:</p> <ul> <li>Motion Sickness: the feeling of nausea and discomfort caused by the mismatch between the user's movements and the virtual world. It is mostly caused by:<ul> <li>Latency: the time it takes for the system to react to the user's actions. The system needs to process the inputs, accelerometers, gyroscopes, and other sensors, and then render the new image to the user. This process takes time and if it is too long the user will feel unresponsiveness and will get sick; </li> <li>Field of View: the area that the user can see at any given time doesnt match the area that the user can see in the real world;</li> <li>Resolution: the number of pixels that the user can see at any given time. Ex. The Oculus Rift DK1 had a resolution of 640x800 per eye that was zoomed to cover the user's entire field of view, and on top of that, the spacing between pixels makes the image looks like a grid of squared dots; you can see why it received so many complaints;</li> <li>Tracking: the ability of the system to track the user's movements properly. The sensors usually do not refresh at the same rate as the display, so the system needs to interpolate the user's movements between the sensor readings. This can cause the user to feel like the virtual world is lagging behind the real world and be out of sync with the user's movements;</li> </ul> </li> <li>Comfort: the feeling of comfort that the user has while using the system. If the device needs to be worn for a long period of time, right weight distribution, padding, and ventilation are important to make the user feel comfortable;</li> <li>Cost: the cost of the system. The machinery and technology used to create the system can be very expensive to be accessible to the general audience;</li> <li>Portability: the ability of the system to be used in different places. If the system is too heavy or too big it will be hard to carry; </li> <li>Social Acceptance: the acceptance of the system by the society. If the system is too intrusive or too weird it will be hard to use in public places. It could be seen as a threat to privacy or as a threat to the user's safety;</li> <li>Battery Life: the amount of time that the system can be used without being plugged in. If the system needs to be plugged in all the time it will be hard to use in public places;</li> <li>Software Development Kits: the tools that developers use to create applications for the system. If the SDK is too hard to use or too limited it will be hard to create applications for the system;</li> </ul> <p>I will add to this list a personal experience that I don't see many people talking about: bad smell, oily foams, and connectors corrosion. The root of those problems is the proximity with the user's face. The user's face is a very oily place and the foam that is used to make the device comfortable is an exceptional place for bacteria to grow. The connectors are also exposed to the user's sweat and can corrode over time and brick your device.</p>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#applications","title":"Applications","text":"<p>There are virtually infinite applications for immersive technologies, but I will focus on the ones that I think are the most important ones in my opinion:</p> <ul> <li>Entertainment: Games in general, but also movies, etc.;</li> <li>Data Visualization: the ability to visualize data in a 3D space can be very useful to understand complex data;</li> <li>Education: Training, virtual classrooms, virtual museums, virtual tours, etc.;</li> <li>Social: Virtual meetings, parties, dating, etc.;</li> <li>Psychological Treatment: Virtual exposure therapy(Ex.: PTSD, phobias), virtual reality therapy, etc.;</li> <li>Medical: Surgery planning, surgery simulation, etc.;</li> <li>Design: Architecture, interior design, etc.; </li> </ul>"},{"location":"blog/2023/08/09/lets-talk-about-virtual-reality/#future","title":"Future","text":"<p>In my past, I have created a startup to help surgeons plan their surgeries and ported it to VR - DocDo. I created some small scoped projects to psychological treatment via progressive exposition, some for data visualization and others for education. I am not in position to have a strong opinion about the future of VR, but I can share my thoughts about it.</p> <p>At the beginning of the metaverse boom, I was very skeptical about it, and I am still. I felt it was a just a new interpretation of a product previously tested on Second Life and proved to be a niche product, focused in being fun, but forcing the use of device with many issues. Another problem was the lack of a real application besides the fun factor.</p> <p>As a developer, I am in love with Apple's new Vision OS emulator and SDK. It is surprisingly easy to use, filled with useful functions, although it is buggy and crashes randomly in beta channel that I am using now. I think it is an exceptional example of how to create a nice SDK for a new platform. I am not sure if it will be a success, but I am sure that it will empower many developers to create new or port existing applications to their platform. They have created a simply way to bring a desktop experience to a VR gadget that just work. You can \"easily\" port your app to it and it will work. It is portable, easy to code, powerful hardware, nice battery life, and a nice SDK. I think it is a nice recipe for success. My only concern is related to the cost and social acceptance.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/","title":"Notes on Submissions","text":"Source: ideogram   <p>Here goes my personal opinions, rules and processes that I follow about submissions. I will cover gradings, deadlines, tolerances, and AI-assistant tools usage.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/#policy-on-limited-use-of-ai-assisted-tools","title":"Policy on Limited use of AI-assisted tools","text":"<p>Note</p> <p>\"During our classes, we may use AI writing tools such as ChatGPT in certain specific cases. You will be informed as to when, where, and how these tools are permitted to be used, along with guidance for attribution. Any use outside of these specific cases  constitutes a violation of Academic Honesty Policy.\" Source.</p> <p>The learner has to produce original content. You can use tools like ChatGPT to help yu learn by propting your own questions, but not to solve the problems, assignments or quizzes.</p> <p>The rationale is that the student has to learn the concepts and ideas, and not just copy and paste the answers.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/#what-is-acceptable","title":"What is acceptable:","text":"<ul> <li>On writting, coding assignments or interactive assignments, you can ask AI questions about concepts, ideas, sintaxes etc;</li> <li>You can ask AI assistants what is wrong with your code, but you cannot use the answer 1 to 1 copy to your final submission, you have to modify it;</li> <li>If your submission contains part of AI assisted tool, you have to cite it. Ex.: \"I prompted ____ in ChatGPT and the answer was ____.\", and as a professor, I will deduct points from your submission with fairness instead of giving you zero points;</li> </ul>"},{"location":"blog/2023/08/24/notes-on-submissions/#what-is-not-acceptable","title":"What is not acceptable","text":"<ul> <li>You cannot copy the question and prompt AI to answer it and then use the answer as your own;</li> <li>You cannot ask AI to code a solution for you;</li> <li>You cannot use any kind of AI while coding(Ex.: GH Copilot), but I do recommend you to use any IDE instead;</li> <li>You are not allowed to use AI assistace to solve quizzes or exams in any circunstances.</li> <li>Even on accepted cases, using AI assistance and not citing it will be considered plagiarism and will be reported to higher instances and zero-ed;</li> </ul>"},{"location":"blog/2023/08/24/notes-on-submissions/#how-do-i-detect-plagiarism-and-ai-assisted-tools-abuse","title":"How do I detect Plagiarism and AI-assisted tools abuse","text":"<ul> <li>I use some automated tools such as turnitin(canvas), moss(beecrowd), and others;</li> <li>I use my own experience to detect plagiarism;</li> <li>If two students uses the same AI assistant, chances are high that they will produce the same answer, and I will detect it;</li> </ul>"},{"location":"blog/2023/08/24/notes-on-submissions/#grading-timings","title":"Grading Timings","text":"<p>I usually take up to 1 week to grade assignments, but I will try to grade them as soon as possible. The worst case scenario is 2 weeks.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/#late-submissions-policy","title":"Late Submissions Policy","text":"<p>If you submit an assignment late, you will receive a flat 20% deduction on your grade.</p> <p>If you have accomodations, send me a message through me and I will try to accomodate you. But always send a message on every submission stating that. Canvas is a nice tool, but it does not cover accomodations well.</p> <p>If you fall under especial conditions, such as sickness, death of a relative, or any other condition that you cannot submit the assignment on time, please send me a message through canvas me and I will try to accomodate you.</p>"},{"location":"blog/2023/08/24/notes-on-submissions/#plagiarism","title":"Plagiarism","text":"<p>Plagiarism is a serious offense and will be reported to the higher instances. I will not tolerate any kind of plagiarism.</p> <p>I define plagiarism the act of:</p> <ul> <li>Searching for answers on the internet and copy and paste it as your own;</li> <li>Copying answers from other students;</li> <li>Using AI-assisted tools to produce full answers;</li> <li>Using AI-assisted tools to produce partial answers without citing it;</li> </ul>"},{"location":"blog/2023/08/24/notes-on-submissions/#welcoming-environment","title":"Welcoming environment","text":"<p>I am here to teach you the best as I can and guide you through your learning process. You can count on me as a friend and a teacher. I will try to help you as much as I can. I am willing to make exceptions for the ones that need it.</p>"},{"location":"courses/advanced/","title":"Advanced Programming","text":"<p>This course builds on the content from Introduction to Programming. Students study the Object Oriented Programming (OOP) Paradigm with topics such as objects, classes, encapsulation, abstraction, modularity, inheritance, and polymorphism. Students examine and use structures such as arrays, structs, classes, and linked lists to model complex information. Pointers and dynamic memory allocation are covered, as well as principles such as overloading and overriding. Students work to solve problems by selecting implementation options from competing alternatives.</p> <p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use the github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p>"},{"location":"courses/advanced/#schedule","title":"Schedule","text":"<p>Relevant dates for the Fall 2023 semester:</p> <ul> <li>09-13 Oct 2023 - Midterms Week</li> <li>20-24 Nov 2023 - Thanksgiving Break</li> <li>11-15 Dec 2023 - Finals Week</li> </ul> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul>"},{"location":"courses/advanced/#introduction","title":"Introduction","text":"<ul> <li>Week 1. 2023/08/28</li> <li>Topic: Introduction and tooling</li> <li>Formal Assignment: </li> <li>Interactive Assignment: </li> </ul>"},{"location":"courses/advanced/#structs-and-classes","title":"Structs and Classes","text":"<ul> <li>Week 2. 2023/09/04</li> <li>Topic: Stcucts and Classes. Objects, classes, member functions, constructors, destructors.</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#pointers","title":"Pointers","text":"<ul> <li>Week 3. 2023/09/11</li> <li>Topic: More about OOP. Private member functions, object passing, object composition, structs and unions</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#pointer-operations","title":"Pointer operations","text":"<ul> <li>Week 4. 2023/09/18</li> <li>Topic: Pointers - address operator, pointer variables, arrays and pointers, pointer math, pointers as function parameters and return types, dynamic memory allocation</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#pointers-continued","title":"Pointers continued","text":"<ul> <li>Week 5. 2023/09/25</li> <li>Topic: Pointers continued, this pointer, constant member functions, static members, friends, member-wise assignment, copy constructors</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-32-lg-middle-operators-review","title":":octicons-number-32:{ .lg .middle } Operators / Review","text":"<ul> <li>Week 6. 2023/10/02</li> <li>Topic: Operator overloading, type conversion operators, convert constructors, aggregation and composition, namespaces</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-40-lg-middle-midterms","title":":octicons-number-40:{ .lg .middle } Midterms","text":"<ul> <li>Week 7. 2023/10/09</li> <li>Topic: Midterms / Review</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-48-lg-middle-vectors-and-arrays","title":":octicons-number-48:{ .lg .middle } Vectors and Arrays","text":"<ul> <li>Week 8. 2023/10/16</li> <li>Topic: Vectors and arrays of objects. Linked lists, linked list operations</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-56-lg-middle-thanksgiving-break","title":":octicons-number-56:{ .lg .middle } Thanksgiving break","text":"<ul> <li>Week 9. 2023/10/23</li> <li>Topic: Thanksgiving Break - No Class</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-64-lg-middle-inheritance","title":":octicons-number-64:{ .lg .middle } Inheritance","text":"<ul> <li>Week 10. 2023/10/30</li> <li>Topic: Inheritance, protected members, constructors/destructors</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-72-lg-middle-inheritance-continued","title":":octicons-number-72:{ .lg .middle } Inheritance continued","text":"<ul> <li>Week 11. 2023/11/06</li> <li>Topic: Inheritance hierarchies, polymorphism and virtual member functions, abstract base classes and pure virtual functions</li> <li>Formal Assignment: </li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-80-lg-middle-exceptions","title":":octicons-number-80:{ .lg .middle } Exceptions","text":"<ul> <li>Week 12. 2023/11/13</li> <li>Topic: Exceptions, macros, function and class templates, STL and STL containers, iterators</li> <li>Formal Assignment:</li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-88-lg-middle-project-introduction-work-sessions","title":":octicons-number-88:{ .lg .middle } Project introduction / Work sessions","text":"<ul> <li>Week 13. 2023/11/20</li> <li>Topic: Project introduction. (Extra): Stack and Queue</li> <li>Formal Assignment:</li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-96-lg-middle-project-work","title":":octicons-number-96:{ .lg .middle } Project work","text":"<ul> <li>Week 14. 2023/11/27</li> <li>Topic: Project work</li> <li>Formal Assignment:</li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-104-lg-middle-project-presentations","title":":octicons-number-104:{ .lg .middle } Project Presentations","text":"<ul> <li>Week 15. 2023/12/04</li> <li>Topic: Project work</li> <li>Formal Assignment:</li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/#octicons-number-112-lg-middle-finals","title":":octicons-number-112:{ .lg .middle } Finals","text":"<ul> <li>Week 16. 2023/12/11</li> <li>Topic: Finals</li> <li>Formal Assignment:</li> <li>Interactive Assignment:</li> </ul>"},{"location":"courses/advanced/01-introduction/","title":"Advanced Programming with C++","text":""},{"location":"courses/advanced/01-introduction/#recapitulation","title":"Recapitulation","text":"<p>Before we start, let's recapitulate what we have learned in the previous course. Use the links below to refresh your memory. Or go straigth to the Introduction to Programming Course.</p> <ul> <li>Variables</li> <li>Decision making</li> <li>Loops;</li> <li>Functions;</li> <li>Strings;</li> <li>Arrays;</li> <li>Multidimensional arrays;</li> </ul>"},{"location":"courses/advanced/01-introduction/#structs","title":"Structs","text":"<p>Structs in C++ are a way to represent a collection of data packed sequentially into a single data structure. </p> <pre><code>struct Enemy\n{\ndouble health; float x, y, z;\nint score;\n};\n</code></pre> <p>The code above defines a type named as <code>Enemy</code>. This type has members(fields) named <code>health</code>, <code>score</code> with different types, and <code>x</code>, <code>y</code> and <code>z</code> with the same type. </p> <pre><code>struct Enemy\n{\ndouble health; // 8 bytes\nfloat x, y, z; // 4 bytes each. 12 bytes total\nint score; // 4 bytes\n};\n</code></pre> <p>The memory usage of a struct is defined roughly by the sum of the memory usage of its members. Assuming the default sizing of common data types in C++, in the example above, the struct will use 8 bytes for the <code>double</code>, 3 times 4 bytes for the <code>float</code>s and 4 bytes for the <code>int</code>. The total memory usage for the struct will be 20 bytes.</p>"},{"location":"courses/advanced/01-introduction/#data-alignment","title":"Data Alignment","text":"<p>The memory usage of a struct is not always exactly the sum of the memory usage of its members. The compiler may add padding bytes between the members of a struct to align the data in memory. This is done to improve the performance of the program. If you are programming in a multi-platform, cross-platform or even using different compilers, the size of the struct may vary even if it is the same.</p> <pre><code>struct InneficientMemoryLayoutExample\n{\nchar a;\nint b;\nchar c;\nchar d;\nchar e;\n};\n</code></pre> <p>The struct above stores a total of 8 bytes of data, but the compiler allocates more. It will add 3 padding bytes between the <code>int</code> and the last <code>char</code> to align the data with biggest field in the struct. In this case, the total memory usage of the struct will be 12 bytes instead of the expected 8.</p> <pre><code>struct InneficientMemoryLayoutExample\n{\nchar a; // 1 byte\n// compiler will add 3 padding bytes here\nint b; // 4 bytes\nchar c; // 1 byte\nchar d; // 1 bytes\nchar e; // 1 byte\n// compiler will add 1 padding byte here\n}; // total of 12 bytes allocated for this layout\n</code></pre> <p>You might think C++ compilers are smart and reorder the fields for us, but in order to maintain compatibility to C, the standard forbids it. So if you want to pack more data you will have to reorder the layout manually to something like this:</p> <pre><code>struct EfficientMemoryLayoutExample\n{\nint b; // 4 bytes\nchar a; // 1 byte\nchar c; // 1 byte\nchar d; // 1 bytes\nchar e; // 1 byte\n}; // total of 8 bytes allocated for this layout\n</code></pre> <p>Alternatively you can use the <code>#pragma pack</code> directive to tell the compiler to pack the data in memory without padding bytes. But be aware that it will force the compiler to do more memory operations to get the data, thus it will slow your software. Besides that, <code>pragma pack</code> may not work in all compilers. </p> <pre><code>#pragma pack(push, 1) // push current alignment to stack and set alignment to 1 byte boundary\nstruct EfficientMemoryLayoutExample\n{\nchar a; // 1 byte\nint b; // 4 bytes\nchar c; // 1 byte\nchar d; // 1 bytes\nchar e; // 1 byte\n};\n#pragma pack(pop)\n</code></pre>"},{"location":"courses/advanced/01-introduction/#bitfields","title":"Bitfields","text":"<p>If you really want to specify the layout location for each field and want to be sure that in will work on every compiler/platform, you will have to specify the number of bits each field will be able to use. This is called bitfields. But if you follow this path, you will have to be aware of the endianness of the platform you are working on.</p> <pre><code>struct BitfieldExample\n{\nchar a : 8; // 8 bits = 1 byte\nint b : 32; // 32 bits = 4 bytes\nchar c : 8; // 8 bits = 1 byte\nchar d : 8; // 8 bits = 1 byte\nchar e : 8; // 8 bits = 1 byte\n}; // total of 8 bytes allocated for this layout\n</code></pre> <p>Another nice application of bitfields is when you do not want to use the full range of a data type. For example, if you want to store a number between 0 and 7, as in a chess game or other board games, you can use a <code>char</code> and waste 5 bits or you can use a bitfield and use only 3 bits.</p> <pre><code>struct BitfieldExample\n{\nchar row : 3; // 3 bits\nchar column : 3; // 3 bits\nunsigned int state : 2; // 2 bit. will store 0, 1, 2 or 3\n}; // total of 1 byte allocated for this layout\n</code></pre>"},{"location":"courses/algorithms/","title":"Algorithms","text":""},{"location":"courses/artificialintelligence/","title":"Artificial Intelligence","text":"<p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use the github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p>"},{"location":"courses/artificialintelligence/#schedule-for-fall-2023","title":"Schedule for Fall 2023","text":"<p>Relevant dates for the Fall 2023 semester:</p> <ul> <li>09-10 Oct 2023 - Midterms Week</li> <li>20-24 Nov 2023 - Thanksgiving Break</li> <li>11-15 Dec 2023 - Finals Week</li> </ul> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul> <p>slide test: test</p>"},{"location":"courses/artificialintelligence/#introduction","title":"Introduction","text":"<ul> <li>Week 1. 2023/08/28</li> <li>Topic: Introduction</li> <li>Formal Assignment: Flocking at Beecrowd</li> <li>Interactive Assignment: Flocking at MoBaGEn</li> </ul>"},{"location":"courses/artificialintelligence/#behavioral-agents","title":"Behavioral Agents","text":"<ul> <li>Week 2. 2023/09/04</li> <li>Topic: Behavioral agents</li> <li>Formal Assignment: Flocking at Beecrowd</li> <li>Interactive Assignment: Flocking at MoBaGEn</li> </ul>"},{"location":"courses/artificialintelligence/#finite-automata","title":"Finite Automata","text":"<ul> <li>Week 3. 2023/09/11</li> <li>Topic: Automata Finite and 2D Grids</li> <li>Formal Assignment: Game of Life at Beecrowd</li> <li>Interactive Assignment: Game of Life at MoBaGEn</li> </ul>"},{"location":"courses/artificialintelligence/#random-numbers","title":"Random Numbers","text":"<ul> <li>Week 4. Date: 2023/09/18</li> <li>Topic: Pseudo Random Number Generation</li> <li>Formal Assignment: PRNG at Beecrowd</li> </ul>"},{"location":"courses/artificialintelligence/#dfs","title":"DFS","text":"<ul> <li>Week 5. 2023/09/25</li> <li>Topic: Depth First Search, Random walk, Maze Generation</li> <li>Formal Assignment: Maze at Beecrowd</li> <li>Interactive Assignment: Maze at Mobagen</li> </ul>"},{"location":"courses/artificialintelligence/#path-finding","title":"Path finding","text":"<ul> <li>Week 6. 2023/10/02</li> <li>Topic: Breadth First Search and Path Finding A*</li> <li>Interactive Assignment: Catch the Cat</li> </ul>"},{"location":"courses/artificialintelligence/#midterms","title":"Midterms","text":"<ul> <li>Week 7. Date: 2023/10/09</li> <li>Topic: Catch the Cat Challenge and Competition</li> <li>Catch the Cat</li> </ul>"},{"location":"courses/artificialintelligence/#spatial-quantization","title":"Spatial Quantization","text":"<ul> <li>Week 8. 2023/10/16</li> <li>Topic: Spatial Quantization and Partitioning</li> <li>Readings: Spatial Quantization</li> <li>Formal Assignment: Hide and Seek</li> </ul>"},{"location":"courses/artificialintelligence/#spatial-quantization_1","title":"Spatial Quantization","text":"<ul> <li>Week 9. 2023/10/23</li> <li>Topic: Spatial Quantization and Partitioning</li> <li>Readings: Spatial Quantization</li> <li>Formal Assignment: Hide and Seek</li> </ul>"},{"location":"courses/artificialintelligence/#noise-functions","title":"Noise Functions","text":"<ul> <li>Week 10. 2023/10/30</li> <li>Topic: Noise functions</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"courses/artificialintelligence/#procedural-generation","title":"Procedural Generation","text":"<ul> <li>Week 11. 2023/11/06</li> <li>Topic: Procedural Content Generation - Scenario</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"courses/artificialintelligence/#procedural-generation_1","title":"Procedural Generation","text":"<ul> <li>Week 12. 2023/11/13</li> <li>Topic: Procedural Content Generation - Scenario</li> <li>Formal Assignment:</li> <li>Interactive Assignment: Scenario Generation</li> </ul>"},{"location":"courses/artificialintelligence/#break","title":"Break","text":"<ul> <li>Week 13. 2023/11/20</li> <li>Topic: BREAK. No classes</li> </ul>"},{"location":"courses/artificialintelligence/#work-sessions","title":"Work sessions","text":"<ul> <li>Week 14. 2023/11/27</li> <li>Topic: Work sessions for final project</li> </ul>"},{"location":"courses/artificialintelligence/#work-sessions_1","title":"Work sessions","text":"<ul> <li>Week 15. 2023/12/04</li> <li>Topic: Work sessions for final project</li> </ul>"},{"location":"courses/artificialintelligence/#finals","title":"Finals","text":"<ul> <li>Week 16. 2023/12/11</li> <li>Topic: Final Presentations</li> </ul>"},{"location":"courses/artificialintelligence/00-introduction/","title":"Introduction to AI","text":"<p>Note</p> <p>Please refer to this repository in order follow the previous assignments for the first course of AI. https://github.com/InfiniBrains/mobagen</p> <p>Topics suggested in the survey, and some of my considerations.</p> <ul> <li>Procedural Content Generation. Advanced terrain generation - It was previously covered in the last class, I am going to focus other topics</li> <li>AI applied to improve 3D Animation Movement. Follow this https://github.com/sebastianstarke/AI4Animation</li> <li>Topics relating to an AI Fighting game - Mostly Agents, State Machines and latency simulation (reflex)</li> <li>Tactical AI - Linear programming, Restriction and Satisfiability problem</li> <li>Neuron networks / Machine learning - This can be real hard to cover all topics in this class</li> <li>Genetic algorithms and Reinforced learning - Find the best parameters for agent behaviors  </li> <li>Chess AI - In a broader sense it is a table game, and it is mostly heuristics and state exploration, chess is awesome to learn optimization techniques to reduce memory usage, space exploration, branch and cut, minmax, planning and satisfaction</li> <li>Prediction algorithms for multiplayer - We can cover some techniques to extrapolate data to compensate lag instead of just mathematically extrapolate position, this is mostly an application of agent theory. </li> <li>Stable diffusion/chatbot - This is a hot topic, I didn't went too deep on that, but I can help you at least surf this wave to create fun stuff for games, such as dialog creation.</li> <li>Procedural audio generation - Most of them use convolutional networks mixed with recurrent neuron network. It can be real hard, so if we cover that, we are just goint to understand the overall idea, and learn how to use pre-determined models available for free.</li> <li>Behavior trees - I have to be honest this is a topic that I don't like, but it is a good tool to have in your toolbox, so I can cover it.</li> <li>ChatGPT and its siblings to generate text - I can cover at least how to modify small scoped model and use for your own intent.</li> <li>Stable Diffusion and its siblings to generate images - I can cover at least how to modify small scoped model and use for your own intent.</li> <li>AI subsystems and how to debug it.</li> <li>Spatial quantization optimized for AI queries - I really enjoy this, but it can be hard to understand, because it uses lots of data structures</li> </ul> <p>Note for myself: game worldbox</p>"},{"location":"courses/artificialintelligence/01-pcg/","title":"Procedural Content Generation","text":"<p>One of the more emergent fields in AI for games is Procedural Content Generation - PCG. It is a technique to algorithmically generate game content and assets, such as levels, textures, sound, enemies, quests, and more. The goal of PCG is to create unique and varied content without the need for manual labor. This can save time and money during development, and also allow for a more dynamic and replayable experience for the player. There are many different algorithms and techniques used in PCG, such as random generation, evolutionary algorithms, and rule-based systems.</p> <p>Level generation. Instead of manually designing each level, a PCG algorithm can be used to generate a new level every time the player starts a new game or enters a new area. This allows for a large number of unique levels without the need for a designer to create each one individually.</p> <p>Enemies and NPCs. Instead of manually designing each character, a PCG algorithm can be used to randomly generate the appearance, abilities, and behavior of enemies. This can create a more diverse and unpredictable gameplay experience for the player.</p> <p>PCG can also be used in other areas of game development such as textures, terrain, narrative, quests, and sound effects. With PCG, the possibilities are endless.</p> <p>It's important to note that PCG is not a replacement for human creativity, but rather a tool that can help create new and unique content. It is often used in conjunction with manual design and artistic direction.</p>"},{"location":"courses/artificialintelligence/01-pcg/#procedural-scenario-generation","title":"Procedural Scenario Generation","text":"<p>Procedural scenario generation is a specific application of procedural content generation that is used to create unique and varied scenarios or missions in a game. These scenarios can include objectives, enemies, and environmental elements such as terrain and buildings.</p> <p>One popular technique is rule-based systems, where a set of predefined rules are used to generate new scenarios. For example, a rule could be that the player must navigate through a forest to reach a specific location, and another rule could be that the player must defeat a certain number of enemies along the way. These rules can be combined in different ways to create a wide variety of scenarios.</p> <p>Another technique used in procedural scenario generation is the use of random generation. In this approach, elements of the scenario such as objectives, enemies, and terrain are randomly generated. This can create a large number of unique scenarios, but the quality of the scenarios may be more inconsistent.</p> <p>Procedural scenario generation can be used in various types of games, including first-person shooters, open-world games, and strategy games. It allows for a more dynamic and replayable experience for the player, as well as saving development time and costs.</p>"},{"location":"courses/artificialintelligence/01-pcg/#procedural-terrain-generation","title":"Procedural Terrain Generation","text":"<p>Procedural terrain generation is a technique used in game development to algorithmically generate realistic and diverse terrain. This can include features such as mountains, valleys, rivers, and forests. The goal of procedural terrain generation is to create unique and varied terrain without the need for manual labor.</p> <p>One common technique used in procedural terrain generation is fractal noise, which uses mathematical algorithms to generate random patterns that resemble natural terrain. These patterns can be combined and layered to create more complex terrain features. Another technique used in procedural terrain generation is erosion simulation, which simulates the effects of erosion and weathering on the terrain to create more realistic landscapes.</p>"},{"location":"courses/artificialintelligence/01-pcg/#procedural-terrain-generation_1","title":"Procedural Terrain Generation","text":""},{"location":"courses/artificialintelligence/01-pcg/#random-number-generation","title":"Random Number Generation","text":""},{"location":"courses/artificialintelligence/01-pcg/#noise-generation","title":"Noise Generation","text":""},{"location":"courses/artificialintelligence/01-pcg/#homework","title":"Homework","text":"<p>You can either use your favorite game engine or use this repository as an entry point. 1. Use a noise function to generate a heightmap. Optional: Use octaves and fractals to make it feels nicer; 2. Implement islands reference or any other meaningful way to make hydraulically erosion apparent; 3. Implement Hydraulic Erosion to make the scenario feels more realistic. See the section 'HYDRAULIC EROSION' from book AI for Games Third ed. IanMillington; 4. Render the heightmap with biomes colors to make more understandable(ocean, sand, forest, mountains, snow...). Optionally use gradient / ramp functions instead of conditionals.</p>"},{"location":"courses/artificialintelligence/01-pcg/#references","title":"References","text":"<p>Procedural content generation is a broad topic, and we need to narrow down some applications and algorithms to cover. I carefully covered Maze generation and Scenario Generation here https://github.com/InfiniBrains/mobagen and I invite you to check the examples named <code>maze</code> and <code>scenario</code>. Besides that, Amit Patel have a really nice website focused in many game algorithms, check it out and support his work https://www.redblobgames.com/</p> <p>Please refer to the book below. We are going to follow the contents mostly from it.</p> <p> Book: https://amzn.to/3kvtNDS</p>"},{"location":"courses/artificialintelligence/02-sm/","title":"State machines","text":"<p>Some raw thoughts: - Probably a game of life is a good game to implement to showcase automata, state machines and decision making</p>"},{"location":"courses/artificialintelligence/03-boardgames/","title":"Board Games","text":"<p>Here we are going to cover  - Space exploration; - Memory optimization; - MinMax; - Branch and cut; - Rule and goal based decision-making</p> <p>The game we are going to cover here can be chess, rubbik cube or any card game.</p>"},{"location":"courses/artificialintelligence/animation/","title":"Deep learning","text":"<p>https://cascadeur.com/</p> <p>https://www.youtube.com/watch?v=14tNq-fqTmQ</p> <p>https://www.youtube.com/watch?v=wAbLsRymXe4</p> <p>https://github.com/sebastianstarke/AI4Animation</p>"},{"location":"courses/artificialintelligence/assignments/","title":"Setup the repos","text":"<p>We are going to use the following repositories:</p> <ol> <li>Read about Privacy and FERPA compliance here</li> <li>This one, for in class coding assignments. https://github.com/InfiniBrains/Awesome-GameDev-Resources</li> <li>MoBaGEn, for interactive assignments. https://github.com/InfiniBrains/mobagen</li> </ol>"},{"location":"courses/artificialintelligence/assignments/#types-of-coding-assignments","title":"Types of coding assignments","text":"<p>There are two types of coding assignments:</p> <ol> <li>Algorithm: Beecrowd - This is an automatic grading system, and I am still creating assignments for it. I will try my best to make it work through it. If it does not work, you could just submit the code on canvas and I will grade it manually;</li> <li>Interactive: For the interactive assignments you can choose whatever Game Engine you like, but I recommend you to use the framework I created for you: MoBaGEn.</li> </ol> <p>Danger</p> <p>Under no circunstaces, you should make your algorithm solutions public. Be aware that I spend so much time creating them and it is hard to me to always create new assignments.</p>"},{"location":"courses/artificialintelligence/assignments/#code-assignments","title":"Code assignments","text":"<p>Inline</p> <p>If you are a enrolled in a class that uses this material, you SHOULD use the institutional and internal git server to be FERPA compliant. If you want to use part of this assignments to build your portfolio I recommend you to use github and make the interactive assignment public. If you are just worried about privacy concerns, you can use a private repo on github.</p> <ol> <li>Create an account on github.com or any <code>git</code> hosting on your preference;</li> <li> <p>Fork repos or duplicate the target repo on your account; </p> <ol> <li>If you want to make it count as part of your portfolio, fork the repo follow this;</li> <li>If you want to keep it private or be FERPA compliant, duplicate the repo following this;</li> </ol> </li> <li> <p>Add my user to your repo to it with <code>read</code> role. My userid is <code>tolstenko</code> on github, for other options, talk with me in class. Follow this;</p> </li> <li>Send me a message on canvas with the link to your repo;</li> </ol>"},{"location":"courses/artificialintelligence/assignments/#development-tools","title":"Development tools","text":"<p>I will be using CMake for the classes, but you can use whatever you want. Please read this to understand the C++ toolset.</p>"},{"location":"courses/artificialintelligence/assignments/#recordings","title":"Recordings","text":"<p>In all interactive assignmets, you will have to record a 5 minute video explaing your code. Use OBS or any software you prefer to record your screen while you explain your code. But for this one, just send me the video showing the repo and the repo invites sent to me.</p>"},{"location":"courses/artificialintelligence/assignments/#grading","title":"Grading","text":"<p>20 points total:</p> <ul> <li>5 Points \u2013 inviting me to the repos;</li> <li>5 Points \u2013 sending me the video explaining the repo and the invite sent to me;</li> <li>10 Points - Show the repos cloned on your computer;</li> </ul>"},{"location":"courses/artificialintelligence/assignments/flocking/","title":"Flocking agents behavior assignment","text":"<p>You are in charge of implementing some functions to make some AI agents flock together in a game. After finishing it, you will be one step further to render it in a game engine, and start making reactive NPCs and enemies. You will learn all the basic concepts needed to code and customize your own AI behaviors.</p>"},{"location":"courses/artificialintelligence/assignments/flocking/#what-is-flocking","title":"What is flocking?","text":"<p>Flocking is a behavior that is observed in birds, fish and other animals that move in groups. It is a very simple behavior that can be implemented with a few lines of code. The idea is that each agent will try to move towards the center of mass of the group (cohesion), and will try to align its velocity with the average velocity of the group (AKA alignment). In addition, each agent will try to avoid collisions with other agents (AKA avoidance).</p> <p>Formal Notation Review</p> <ul> <li>\\( \\vec{F} \\) means a vector \\( F \\) that has components. In a 2 dimensional vector it will hold \\( F_x \\) and \\( F_y \\). For example, if \\( F_x = 1 \\) and \\( F_y = 3 \\), then \\( \\vec{F} = (1,3) \\)</li> <li>Simple math operations between vectors are done component-wise. For example, if \\( \\vec{F} = (1,1) \\) and \\( \\vec{G} = (2,2) \\), then \\( \\vec{F} + \\vec{G} = (3,3) \\)</li> <li>The notation \\( \\overrightarrow{P_{1}P_{2}} \\) means the vector that goes from \\( P_1 \\) to \\( P_2 \\). It is the same as \\( P_2-P_1 \\)</li> <li>The modulus notation means the length (magnitude) of the vector. \\( |\\vec{F}| = \\sqrt{F_x^2+F_y^2} \\) For example, if \\( \\vec{F} = (1,1) \\), then \\( |\\vec{F}| = \\sqrt{2} \\)</li> <li>The hat ^ notation means the normalized vector(magnitude is 1) of the vector. \\( \\hat{F} = \\frac{\\vec{F}}{|\\vec{F}|} \\) For example, if \\( \\vec{F} = (1,1) \\), then \\( \\hat{F} = (\\frac{1}{\\sqrt{2}},\\frac{1}{\\sqrt{2}}) \\)</li> <li>The hat notation over 2 points means the normalized vector that goes from the first point to the second point. \\( \\widehat{P_1P_2} = \\frac{\\overrightarrow{P_1P_2}}{|\\overrightarrow{P_1P_2}|} \\) For example, if \\( P_1 = (0,0) \\) and \\( P_2 = (1,1) \\), then \\( \\widehat{P_1P_2} = (\\frac{1}{\\sqrt{2}},\\frac{1}{\\sqrt{2}}) \\)</li> <li>The sum \\( \\sum \\) notation means the sum of all elements in the list going from <code>0</code> to <code>n-1</code>. Ex. \\( \\sum_{i=0}^{n-1} \\vec{V_i} = \\vec{V_0} + \\vec{V_1} + \\vec{V_2} + ... + \\vec{V_{n-1}} \\)</li> </ul> <p>It is your job to implement those 3 behaviors following the ruleset below:</p>"},{"location":"courses/artificialintelligence/assignments/flocking/#cohesion","title":"Cohesion","text":"<p>Apply a force towards the center of mass of the group.</p> <ol> <li>The \\( n \\) neighbors of an agent are all the other agents that are within a certain radius \\( r_c \\)( <code>&lt;</code> operation ) of the agent. It doesn't include the agent itself;</li> <li>Compute the location of the center of mass of the group (\\( P_{CM} \\));</li> <li>Compute the force that will move the agent towards the center of mass(\\( \\overrightarrow{F_c} \\)); The farther the agent is from the center of mass, the force increases linearly up to the limit of the cohesion radius \\( r_c \\).</li> </ol> <p></p> \\[  P_{CM} = \\frac{\\sum_{i=0}^{n-1} P_i}{n} \\] \\[ \\overrightarrow{F_{c}} = \\begin{cases}     \\frac{ \\overrightarrow{P_{agent}P_{CM}} }{r_c} &amp; \\text{if } |\\overrightarrow{P_{agent}P_{CM}}| \\leq r_c \\\\     0 &amp; \\text{if } |\\overrightarrow{P_{agent}P_{CM}}| &gt; r_c \\end{cases} \\] <p>Tip</p> <p>Note that the maximum magnitude of \\( \\overrightarrow{F_c} \\) is 1. Inclusive. This value can be multiplied by a constant \\( K_c \\) to increase or decrease the cohesion force to looks more appealing.</p> Cohesion Example <p></p>"},{"location":"courses/artificialintelligence/assignments/flocking/#separation","title":"Separation","text":"<p>It will move the agent away from other agents when they get too close.</p> <ol> <li>The \\( n \\) neighbors of an agent are all the other agents that are within the separation radius \\( r_s \\) of the agent;</li> <li>If the distance to a neighbor is less than the separation radius, then the agent will move away from it inversely proportionally to the distance between them.</li> <li>Accumulate the forces that will move the agent away from each neighbor (\\( \\overrightarrow{F_{s}} \\)). And then, clamp the force to a maximum value of \\( F_{Smax} \\).</li> </ol> <p> </p> \\[ \\overrightarrow{F_s} = \\sum_{i=0}^{n-1} \\begin{cases}       \\frac{\\widehat{P_aP_i}}{|\\overrightarrow{P_aP_i}|} &amp; \\text{if } 0 &lt; |\\overrightarrow{P_aP_i}| \\leq r_s \\\\       0 &amp; \\text{if } |\\overrightarrow{P_aP_i}| = 0  \\lor |\\overrightarrow{P_aP_i}| &gt; r_s  \\end{cases} \\] <p>Tip</p> <p>Here you can see that if we have more than one neighbor and one of them is way too close, the force will be very high and make the influence of the other neighbors irrelevant. This is the expected behavior.</p> <p>The force will go near infinite when the distance between the agent and the \\( n \\) neighbor is 0. To avoid this, after accumulating all the influences from every neighbor, the force will be clamped to a maximum magnitude of \\( F_{Smax} \\).</p> \\[ \\overrightarrow{F_{s}} = \\begin{cases}      \\overrightarrow{F_s} &amp; \\text{if } |\\overrightarrow{F_s}| \\leq F_{Smax} \\\\     \\widehat{F_s} \\cdot F_{Smax} &amp; \\text{if } |\\overrightarrow{F_s}| &gt; F_{Smax} \\end{cases} \\] <p>Tip</p> <ul> <li>You can implement those two math together, but it is better to isolate in two steps to make it easier to understand and debug.</li> <li>This is not an averaged force like the cohesion force, it is a sum of forces. So, the maximum magnitude of the force can be higher than 1.</li> </ul> Separation Example <p></p>"},{"location":"courses/artificialintelligence/assignments/flocking/#alignment","title":"Alignment","text":"<p>It is the force that will align the velocity of the agent with the average velocity of the group.</p> <ol> <li>The \\( n \\) neighbors of an agent are all the agents that are within the alignment radius \\( r_a \\) of the agent, including itself;</li> <li>Compute the average velocity of the group (\\( \\overrightarrow{V_{avg}} \\));</li> <li>Compute the force that will move the agent towards the average velocity (\\( \\overrightarrow{F_{a}} \\));</li> </ol> <p></p> \\[ \\overrightarrow{V_{avg}} = \\frac{\\sum_{i=0}^{n-1} \\vec{V_i}}{n} \\] Alignment Example <p></p>"},{"location":"courses/artificialintelligence/assignments/flocking/#behavior-composition","title":"Behavior composition","text":"<p>The force composition is made by a weighted sum of the influences of those 3 behaviors. This is the way we are going to work, this is not the only way to do it, nor the more correct. It is just a way to do it. </p> <ul> <li>\\(  \\vec{F} = K_c \\cdot \\overrightarrow{F_c} + K_s \\cdot \\overrightarrow{F_s} + K_a \\cdot \\overrightarrow{F_a}  \\) <code>This is a weighted sum!</code></li> <li>\\(  \\overrightarrow{V_{new}} = \\overrightarrow{V_{cur}} + \\vec{F} \\cdot \\Delta t  \\) <code>This is a simplification!</code></li> <li>\\(  P_{new} = P_{cur}+\\overrightarrow{V_{new}} \\cdot \\Delta t  \\) <code>This is an approximation!</code></li> </ul> <p>Warning</p> <p>A more precise way for representing the new position would be to use full equations of motion. But given timestep is usually very small and it even squared, it is acceptable to ignore it. But here they are anyway, just dont use them in this assignment:</p> <ul> <li>\\(  \\overrightarrow{V_{new}} = \\overrightarrow{V_{cur}}+\\frac{\\overrightarrow{F}}{m} \\cdot \\Delta t  \\)</li> <li>\\(  P_{new} = P_{cur}+\\overrightarrow{V_{cur}} \\cdot \\Delta t + \\frac{\\vec{F}}{m} \\cdot \\frac{\\Delta t^2}{2}  \\)</li> </ul> <p>Where:</p> <ul> <li>\\( \\overrightarrow{F} \\) is the force applied to the agent;</li> <li>\\( \\overrightarrow{V} \\) is the velocity of the agent;</li> <li>\\( P \\) is the position of the agent;</li> <li>\\( m \\) is the mass of the agent, here it is always 1;</li> <li>\\( \\Delta t \\) is the time frame (1/FPS);</li> <li>\\( cur \\) is the current value of the variable;</li> <li>\\( new \\) is the new value of the variable to be used in the next frame.</li> </ul> <p>The \\( \\overrightarrow{V_{new}} \\) and \\( P_{new} \\) are the ones that will be used in the next frame and you will have to print to the console at the end of every single frame.</p> <p>Note</p> <ul> <li>For simplicity, we are going to assume that the mass of all agents is 1.</li> <li>In a real game simulation, it would be nice to apply some friction to the velocity of the agent to make it stop eventually or just clamp it to prevent the velocity get too high. But, for simplicity, we are going to ignore it.</li> </ul> Combined behavior examples <p>Alignment + Cohesion:</p> <p></p> <p>Separation + Cohesion:</p> <p></p> <p>Separation + Alignment:</p> <p></p> <p>All 3:</p> <p></p>"},{"location":"courses/artificialintelligence/assignments/flocking/#input","title":"Input","text":"<p>The input consists in a list of parameters followed by a list of agents. The parameters are:</p> <ul> <li>\\( r_c \\) - Cohesion radius</li> <li>\\( r_s \\) - Separation radius</li> <li>\\( F_{Smax} \\) - Maximum separation force</li> <li>\\( r_a \\) - Alignment radius</li> <li>\\( K_c \\) - Cohesion constant</li> <li>\\( K_s \\) - Separation constant</li> <li>\\( K_a \\) - Alignment constant</li> <li>\\( N \\) - Number of agents</li> </ul> <p>Every agent is represented by 4 values in the same line, separated by a space:</p> <ul> <li>\\( x \\) - X coordinate</li> <li>\\( y \\) - Y coordinate</li> <li>\\( vx \\) - X velocity</li> <li>\\( vy \\) - Y velocity</li> </ul> <p>After reading the agent's data, the program should read the time frame (\\( \\Delta t \\)), simulate the agents and then output the new position of the agents in the same sequence and format it was read. The program should keep reading the time frame and simulating the agents until the end of the input.</p> <p>Data Types</p> <p>All values are double precision floating point numbers to improve consistency between different languages.</p>"},{"location":"courses/artificialintelligence/assignments/flocking/#input-example","title":"Input Example","text":"<p>In this example we are going to test only the cohesion behavior. The input is composed by the parameters and 2 agents. </p> <pre><code>1.000 0.000 0.000 0.000 1.000 0.000 0.000 2\n0.000 0.500 0.000 0.000\n0.000 -0.500 0.000 0.000\n0.125\n</code></pre>"},{"location":"courses/artificialintelligence/assignments/flocking/#output","title":"Output","text":"<p>The expected output is the position and velocity for each agent after the simulation step using the time frame. After printing each simulation step, the program should wait for the next time frame and then simulate the next step. All values should have exactly 3 decimal places and should be rounded to the nearest.</p> <pre><code>0.000 0.484 0.000 -0.125\n0.000 -0.484 0.000 0.125\n</code></pre>"},{"location":"courses/artificialintelligence/assignments/flocking/#grading","title":"Grading","text":"<p>10 points total:</p> <ul> <li>3 Points \u2013 by following standards;</li> <li>2 Points \u2013 properly submitted in Canvas;</li> <li>5 Points \u2013 passed on test cases;</li> </ul>"},{"location":"courses/artificialintelligence/assignments/life/","title":"Game of Life","text":"<p>You are are applying for a internship position at Valvule Corp and they want to test your abilities to manage states. You were tasked to code the Conway's Game of Life.</p> <p>The game consists in a C x L matrix of cells (Columns and Lines), where each cell can be either alive or dead. The game is played in turns, where each turn the state of the cells are updated according to the following rules:</p> <ol> <li>Any live cell with fewer than two live neighbours dies, as if by underpopulation.</li> <li>Any live cell with two or three live neighbours lives on to the next generation.</li> <li>Any live cell with more than three live neighbours dies, as if by overpopulation.</li> <li>Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.</li> </ol> <p></p> <p>The map is continuous on every direction, so the cells on the edges have the cells on the opposite edge as neighbors. It is effectively a toroidal surface.</p> <p></p>"},{"location":"courses/artificialintelligence/assignments/life/#input","title":"Input","text":"<p>The first line of the input are three numbers, C, L and T, the number of columns, lines and turns, respectively. The next L lines are the initial state of the cells, where each line has C characters, either <code>.</code> for dead cells or <code>#</code> for alive cells.</p> <pre><code>5 5 4\n.#...\n..#..\n###..\n.....\n.....\n</code></pre>"},{"location":"courses/artificialintelligence/assignments/life/#output","title":"Output","text":"<p>The output should be the state of the cells after T turns, in the same format as the input.</p> <pre><code>.....\n..#..\n...#.\n.###.\n.....\n</code></pre>"},{"location":"courses/artificialintelligence/assignments/maze/","title":"Maze generation via Depth First Search","text":"<p>You are in charge of implementing a new maze generator for a procedurally generated game. The game is a 2D top-down game, where every level is composed by squared rooms blocked by walls. The rooms are generated by a maze generator, and the walls can be removed to create paths.</p> <p>There are many ways to implement a maze generation and one of the most common is the Depth First Search algorithm combined with a Random Walk. The algorithm is simple and can be implemented in a recursive or interactive way. The suggested algorithm is as follows:</p> <ol> <li>All walls are up;</li> <li>Add the top left cell to the stack;</li> <li>While the stack is not empty:<ol> <li>If the stack top cell has visitable neighbor(s):<ol> <li>Mark the top cell as visited;</li> <li>List visitable neighbors;</li> <li>Choose a neighbor (see below);</li> <li>Remove the wall between the cell and the neighbor;</li> <li>Add the neighbor to the stack;</li> </ol> </li> <li>Else:<ol> <li>Remove the top cell from the stack, backtracking;</li> </ol> </li> </ol> </li> </ol> Simulation <p>If you simulate the algorithm visually, the result would be something similar to the following</p> <p></p>"},{"location":"courses/artificialintelligence/assignments/maze/#random-number-generation","title":"Random Number Generation","text":"<p>In order to be consistent with all languages and random functions the pseudo random number generation should follow the following sequence of 100 numbers:</p> <pre><code>[72, 99, 56, 34, 43, 62, 31, 4, 70, 22, 6, 65, 96, 71, 29, 9, 98, 41, 90, 7, 30, 3, 97, 49, 63, 88, 47, 82, 91, 54, 74, 2, 86, 14, 58, 35, 89, 11, 10, 60, 28, 21, 52, 50, 55, 69, 76, 94, 23, 66, 15, 57, 44, 18, 67, 5, 24, 33, 77, 53, 51, 59, 20, 42, 80, 61, 1, 0, 38, 64, 45, 92, 46, 79, 93, 95, 37, 40, 83, 13, 12, 78, 75, 73, 84, 81, 8, 32, 27, 19, 87, 85, 16, 25, 17, 68, 26, 39, 48, 36];\n</code></pre> <p>Every call to the random function should return the current number the index is pointing to, and then increment the index. If the index is greater than 99, it should be reset to 0.</p>"},{"location":"courses/artificialintelligence/assignments/maze/#direction-decision-making","title":"Direction decision making","text":"<p>In order to give consistency on how to decide the direction of the next cell, the following procedure should be followed:</p> <ol> <li>List all visitable neighbors of the current cell;</li> <li>Sort the list of visitable neighbors by clockwise order, starting from the top neighbor: UP, RIGHT, DOWN, LEFT;</li> <li>If there is one visitable, do not call random, just return the first neighbor found;</li> <li>If there are two or more visitable neighbors, call random and return the neighbor at the index of the random number modulo the number of visitable neighbors. <code>vec[i]%visitableCount</code></li> </ol>"},{"location":"courses/artificialintelligence/assignments/maze/#input","title":"Input","text":"<p>The input is a single line with three <code>32 bits</code> unsigned integer numbers, <code>C</code>, <code>L</code> and <code>I</code>, where <code>C</code> and <code>L</code> are the number of columns and lines of the maze, respectively, and <code>I</code> is the index of the first random number to be used&gt; <code>I</code> can varies from <code>0</code> to <code>99</code>.</p> <pre><code>2 2 0\n</code></pre> <p>In this case, our map will have <code>2</code> columns, <code>2</code> lines and the first random number to be used is the first one, <code>72</code> because it is pointed by the index <code>0</code>.</p>"},{"location":"courses/artificialintelligence/assignments/maze/#output","title":"Output","text":"<p>Every line is a combination of underscore <code>_</code>, pipe <code>|</code> and  empty <code></code> characters. The <code>_</code> character represents a horizontal wall and the <code>|</code> character represents a vertical wall.</p> <p>The initial state of the 2 x 2 map is:</p> <pre><code> _ _  \n|_|_| \n|_|_| \n</code></pre> <p>In order to interactively solve this, we will add <code>(0,0)</code> to the queue.</p> <p>The neighbors of the current top (0,0) are RIGHT and DOWN, <code>(0,1)</code> and <code>(1,0)</code> respectively.</p> <p>Following the clockwise order, the sorted neighbor list will be <code>[(0,1), (1,0)]</code>.</p> <p>We have more than one neighbor, so we call random. The current random index is <code>0</code>, so the random number is <code>72</code> and we increment the index.</p> <p>The random number is <code>72</code> and the number of neighbors is <code>2</code>, so the index of the neighbor to be chosen is <code>72 % 2 = 0</code>, so we choose the neighbor <code>(0,1)</code>, the RIGHT one.</p> <p>The wall between <code>(0,0)</code> and <code>(0,1)</code> is removed, and <code>(0,1)</code> is added to the queue. Now it holds <code>[(0,0), (0,1)]</code>. The map is now:</p> <pre><code> _ _  \n|_ _| \n|_|_| \n</code></pre> <p>Now the only neighbor of (0,1) is DOWN, (1,1). So no need to call random, we just choose the only neighbor.</p> <p>The wall between <code>(0,1)</code> and <code>(1,1)</code> is removed, and <code>(1,1)</code> is added to the queue. Now it holds <code>[(0,0), (0,1), (1,1)]</code>. The map is now:</p> <pre><code> _ _  \n|_  | \n|_|_| \n</code></pre> <p>Now the only neighbor of <code>(1,1)</code> is LEFT, <code>(1,0)</code>. So no need to call random, we just choose the only neighbor.</p> <p>The wall between (1,1) and (1,0) is removed, and (1,0) is added to the queue. Now it holds <code>[(0,0), (0,1), (1,1), (1,0)]</code>. The map is now:</p> <pre><code> _ _  \n|_  | \n|_ _| \n</code></pre> <p>Now, the current top of the queue is <code>(1,0)</code> and there isn't any neighbor to be visited, so we remove the current top <code>(1,0)</code> from the queue and backtrack. The queue is now <code>[(0,0), (0,1), (1,1)]</code>.</p> <p>The current top is <code>(1,1)</code> and there isn't any neighbor to be visited, so we remove <code>(1,1)</code> from the queue and backtrack. The queue is now <code>[(0,0), (0,1)]</code>.</p> <p>The current top is <code>(0,1)</code> and there isn't any neighbor to be visited, so we remove <code>(0,1)</code> from the queue and backtrack. The queue is now <code>[(0,0)]</code>.</p> <p>The current top is <code>(0,0)</code> and there isn't any neighbor to be visited, so we remove <code>(0,0)</code> from the queue and backtrack. The queue is now empty and we finish priting the map state. The final map is:</p> <pre><code> _ _  \n|_  | \n|_ _| \n</code></pre> <p>And this the only one that should be printed. No intermediary maps should be printed.</p>"},{"location":"courses/artificialintelligence/assignments/maze/#example-1","title":"Example 1","text":""},{"location":"courses/artificialintelligence/assignments/maze/#input-1","title":"Input 1","text":"<pre><code>3 3 0\n</code></pre>"},{"location":"courses/artificialintelligence/assignments/maze/#output-1","title":"Output 1","text":"<pre><code> _ _ _  \n|_  | | \n|  _| | \n|_ _ _| \n</code></pre>"},{"location":"courses/artificialintelligence/assignments/maze/#example-2","title":"Example 2","text":""},{"location":"courses/artificialintelligence/assignments/maze/#input-2","title":"Input 2","text":"<pre><code>3 3 1\n</code></pre>"},{"location":"courses/artificialintelligence/assignments/maze/#output2","title":"Output2","text":"<pre><code> _ _ _  \n| |_  | \n|_ _  | \n|_ _ _| \n</code></pre>"},{"location":"courses/artificialintelligence/assignments/rng/","title":"Pseudo Random Number Generation","text":"<p>You are a game developer in charge to create a fast an reliable random number generator for a procedural content generation system. The requirements are:</p> <ul> <li>Do not rely on external libraries;</li> <li>Dont need to be cryptographically secure;</li> <li>Be blazing fast;</li> <li>Fully reproducible via automated tests if used the same seed;</li> <li>Use exactly 32 bits as seed;</li> <li>Be able to generate a number between a given range, both inclusive.</li> </ul> <p>So you remembered a strange professor talking about the xorshift algorithm and decided it is good enough for your use case. and with some small research you found a the Marsaglia \"Xorshift RNGs\". You decided to implement it and test it.</p>"},{"location":"courses/artificialintelligence/assignments/rng/#xorshift","title":"XorShift","text":"<p>The xorshift is a family of pseudo random number generators created by George Marsaglia. The xorshift is a very simple algorithm that is very fast and have a good statistical quality. It is a very good choice for games and simulations.</p> <p><code>xorshift</code> is the process of shifting a number and then <code>xor</code>'ing it to the original value to create a new value. </p> <p><code>value = value xor (value shift by number)</code></p> <p>The shift operators can be to the left <code>&lt;&lt;</code> or to the right <code>&gt;&gt;</code>. When shifted to the left, it is the same thing as multiplying by 2 at the power of the number. When shifted to the right, it is the same thing as dividing.</p> <p>The <code>xorshift</code> algorithm from Marsaglia is a combination of 3 <code>xorshifts</code>: </p> <ol> <li><code>xorshift</code> the seed by <code>13</code> bits to the left;</li> <li><code>xorshift</code> the seed by <code>17</code> bits to the right;</li> <li><code>xorshift</code> the seed by <code>5</code> bits to the left; </li> </ol> <p>At the end of this 3 <code>xorshifts</code>, the current state of the seed is your current random number.</p> <p>In order to clamp a random number the value between two numbers (max and min), you should follow this idea:</p> <p><code>value = min + (random % (max - min + 1))</code></p>"},{"location":"courses/artificialintelligence/assignments/rng/#input","title":"Input","text":"<p>Receives the seed <code>S</code>, the number <code>N</code> of random numbers to be generated and the range <code>R1</code> and <code>R2</code> of the numbers should be in, there is no guarantee the range numbers are in order. The range numbers are both inclusive. <code>S</code> and <code>N</code> are both <code>32 bits</code> unsigned integers and <code>R1</code> and <code>R2</code> are both <code>32 bits</code> signed integers.</p> <pre><code>1 1 0 99\n</code></pre>"},{"location":"courses/artificialintelligence/assignments/rng/#output","title":"Output","text":"<p>The list of numbers to be generated, one per line. In this case, it would be only one and the random number should be clamped to be between 0 and 99.</p> <pre><code>seed in decimal:       1\nseed in binary:        0b00000000000000000000000000000001 \n\nseed:                  0b00000000000000000000000000000001\nseed &lt;&lt; 13:            0b00000000000000000010000000000000\nseed xor (seed &lt;&lt; 13): 0b00000000000000000010000000000001\n\nseed:                  0b00000000000000000010000000000001\nseed &gt;&gt; 17:            0b00000000000000000000000000000000\nseed xor (seed &gt;&gt; 17): 0b00000000000000000010000000000001\n\nseed:                  0b00000000000000000010000000000001\nseed &lt;&lt; 5:             0b00000000000001000000000000100000\nseed xor (seed &lt;&lt; 5):  0b00000000000001000010000000100001\n\nThe final result is 0b00000000000001000010000000100001 which is 270369 in decimal.\n</code></pre> <p>Now in order to clamp it to be between 0 and 99, we do:</p> <pre><code>value = min + (random % (max - min + 1))\nvalue = 0 + (270369 % (99 - 0 + 1))\nvalue = 0 + (270369 % 100)\nvalue = 0 + 69\nvalue = 69\n</code></pre> <p>So this output would be:</p> <pre><code>69\n</code></pre>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/","title":"Space quantization","text":"<p>Space quantization is a way to sample continuous space, and it can to be used in in many fields, such as Artificial Intelligence, Physics, Rendering, and more. Here we are going to focus primarily Spatial Quantization for AI, because it is the base for pathfinding, line of sight, field of view, and many other techniques.</p> <p>Some of the most common techniques for space quantization are: grids, voxels, graphs, quadtrees, octrees, KD-trees, BSP, Spatial Hashing and more. Another notable techniques are line of sight(or field of view), map flooding, caching, and movement zones.</p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#grids","title":"Grids","text":"<p>Grids are the most common technique for space quantization. It is a very simple technique, but it is very powerful. It consists in dividing the space in a grid of cells, and then we can use the cell coordinates to represent the space. The most common grid is the square grid, but we can use hexagonal and triangular grids, you might find some irregular shapes useful to exploit the space conformation better.</p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#square-grid","title":"Square Grid","text":"<p>The square grid is a regular grid, where the cells are squares. It is very simple to implement and understand.</p> <p>There are some ways to store data for squared grids. Arguably you could 2D arrays, arrays of arrays or vector of vectors, but depending on the way you implement it, it can hurt the performance. Example: if you use an array of arrays or vector of vectors, where every entry from de outer array is a pointer to the inner array, you will have a lot of cache misses, because the inner arrays are not contiguous in memory. </p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#notes-on-cache-locality","title":"Notes on cache locality","text":"<p>So in order do increase data locality for squared grids, you can use a single array, and then use the following formula to calculate the index of the cell. We call this strategy matrix flattening.</p> <pre><code>int arrray[width * height]; // 1D array with the total size of the grid\nint index = x + y * width; // index of the cell at x,y\n</code></pre> <p>There is a catch here, given we usually represent points as X and Y coordinates, we need to be careful with the order of the coordinates. While you are iterating over all the matrix, you need to iterate over the Y coordinate first, and then the X coordinate. This is because the Y coordinate is the one that changes the most, so it is better to have it in the inner loop. By doing that, you will have better cache locality and effectively the index will be sequential.</p> <pre><code>for(int y = 0; y &lt; height; y++) {\nfor(int x = 0; x &lt; width; x++) { int index = x + y * width;\n// do something with the cell at index\n}\n}\n</code></pre>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#quantization-and-dequantization-of-square-grids","title":"Quantization and dequantization of square grids","text":"<p>If your world is based on floats, you can use the square by using the floor function or just cast to integer type, because the default behavior of casting from float to integer is to floor it. Example: In the case of a quantization resolution of size of 1.0f, everything between 0 and 1 will be in the cell (0,0), everything between 1 and 2 will be in the cell (1,0), and so on.</p> <pre><code>Vector2int quantize(Vector2f position, float resolution) {\nreturn Vector2int((int)floor(position.x/resolution), (int)floor(position.y/resolution));\n}\n</code></pre> <p>If you need to get the center of the cell in the world coordinates following the quantization resolution, you can use the following code.</p> <pre><code>Vector2f dequantize(Vector2int index, float resolution) {\nreturn Vector2f((float)index.x * resolution + resolution/2.0f, (float)index.y * resolution + resolution/2.0f);\n}\n</code></pre> <p>If you need to get the corners of the cell following the quantization resolution, you can use the following code.</p> <pre><code>Rectangle2f cell_bounds(Vector2int index, float resolution) {\nreturn {index.x * resolution, index.y * resolution, (index.x+1) * resolution, (index.y+1) * resolution};\n}\n</code></pre> <p>If you need to get the neighbors of a cell, you can use the following code.</p> <pre><code>std::vector&lt;Vector2int&gt; get_neighbors(Vector2int index) {\nreturn {{index.x-1, index.y}, {index.x, index.y-1},\n{index.x+1, index.y}, {index.x, index.y+1}};\n}\n</code></pre>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#hexagonal-grid","title":"Hexagonal Grid","text":"<p>Hexagonal grid is an extension of a square grid, but the cells are hexagons. It feels nicer to human eyes because we have more equally distant neighbors. If used as subtract for pathfinding, it can be more efficient because the path can be more straight.</p> <p>It can be implemented as single dimension array, but you need to be careful with shift that happens in different odd or even indexes. You can use the following formula to calculate the index of the cell. In this world quantization can be in 4 conformations, depending on the rotation of the hexagon and the alignment of the first cell.</p> <ol> <li> <p>Point pointy top hexagon with first line aligned to the left: <pre><code>  / \\ / \\ / \\ \n | A | B | C |\n  \\ / \\ / \\ / \\\n   | D | E | F |\n  / \\ / \\ / \\ /\n | G | H | I |\n  \\ / \\ / \\ / \n</code></pre></p> </li> <li> <p>Point pointy top hexagon with first line aligned to the right <pre><code>    / \\ / \\ / \\\n   | A | B | C |\n  / \\ / \\ / \\ / \n | D | E | F |\n  \\ / \\ / \\ / \\\n   | G | H | I |\n    \\ / \\ / \\ /\n</code></pre></p> </li> <li>Flat top hexagon with first column aligned to the top: <pre><code> __    __\n/A \\__/C \\\n\\__/B \\__/\n/D \\__/F \\\n\\__/E \\__/\n/G \\__/I \\\n\\__/H \\__/\n   \\__/\n</code></pre></li> <li>Flat top hexagon with first column aligned to the bottom: <pre><code>     __\n  __/B \\__ \n /A \\__/C \\\n \\__/E \\__/\n /D \\__/F \\\n \\__/H \\__/\n /G \\__/I \\\n \\__/  \\__/\n</code></pre></li> </ol>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#quantization-and-dequantization-of-hexagonal-grids","title":"Quantization and dequantization of hexagonal grids","text":"<p>For simplicity, we are going to use the first conformation, where the first line is aligned to the left, and the hexagons are pointy top. The quantization is done by using the following formula.</p> <pre><code>// I am assuming that the hexagon is pointy top, and the first line is aligned to the left\n// I am also assuming that the hexagon is centered in the cell, and the top left corner is at (0,0), \n// y axis is pointing down and x axis is pointing right\n// this dont work for all the cases, but it is a good approximation for locations near the center of the hexagon\n/*\n  / \\ / \\ / \\ \n | A | B | C |\n  \\ / \\ / \\ / \\\n   | D | E | F |\n  / \\ / \\ / \\ /\n | G | H | I |\n  \\ / \\ / \\ /\n */\nVector2int quantize(Vector2f position, float hexagonSide) {\nint y = (position.y - hexagonSide)/(hexagonSide * 2);\nint x = y%2==0 ?\n(position.x - hexagonSide * sqrt3over2) / (hexagonSide * sqrt3over2 * 2) : // even lines\n(position.x - hexagonSide * sqrt3over2 * 2)/(hexagonSide * sqrt3over2 * 2) // odd lines\nreturn Vector2int(x, y);\n}\nVector2f dequantize(Vector2int index, float hexagonSide) {\nreturn Vector2f(index.y%2==0 ? hexagonSide * sqrt3over2 + index.x * hexagonSide * sqrt3over2 * 2 : // even lines\nhexagonSide * sqrt3over2 * 2 + index.x * hexagonSide * sqrt3over2 * 2, // odd lines\nhexagonSide + index.y * hexagonSide * 2);\n}\n</code></pre> <p>You will have to figure out the formula for the other conformations. Or send a merge request to this repository adding more information.</p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#voxels-and-grid-3d","title":"Voxels and Grid 3D","text":"<p>Grids in 3D works the same way as in 2D, but you need to use 3D vectors/arrays or voxel volumes. Most concepts applies here. If you want to expand this section, send a merge request.</p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#quadtree","title":"Quadtree","text":"<p>Quadtree is a tree data structure where each node has 4 children. It is used to partition a space in 2D. It is used to optimize collision detection, pathfinding, and other algorithms that need to iterate over a space. It is also used to optimize rendering, because you can render only the visible part of the space.</p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#quadtree-implementation","title":"Quadtree implementation","text":"<p>Quadtree is a recursive data structure, so you can implement it using a recursive data structure. The following code is a simple implementation of a quadtree.</p> <pre><code>// this code is not tested, but it should work. It is just an example and send a merge request if you find any errors.\n// node\ntemplate&lt;class T&gt;\nstruct DataAtPosition {\nVector2f center;\nT data;\n};\ntemplate&lt;class T&gt;\nstruct QuadtreeNode {\nRectangle2f bounds;\nstd::vector&lt;DataAtPosition&lt;T&gt;&gt; data;\nstd::vector&lt;QuadtreeNode&lt;T&gt;&gt; children;\n};\n// insert\ntemplate&lt;class T&gt;\nvoid insert(QuadtreeNode&lt;T&gt;&amp; root, DataAtPosition&lt;T&gt; data) {\nif (root.children.empty()) {\nroot.data.push_back(data);\nif (root.data.size() &gt; 4) {\nroot.children.resize(4);\nfor (int i = 0; i &lt; 4; ++i) {\nroot.children[i].bounds = root.bounds;\n}\nroot.children[0].bounds.max.x = root.bounds.center().x; // top left\nroot.children[0].bounds.max.y = root.bounds.center().y; // top left\nroot.children[1].bounds.min.x = root.bounds.center().x; // top right\nroot.children[1].bounds.max.y = root.bounds.center().y; // top right\nroot.children[2].bounds.min.x = root.bounds.center().x; // bottom right\nroot.children[2].bounds.min.y = root.bounds.center().y; // bottom right\nroot.children[3].bounds.max.x = root.bounds.center().x; // bottom left\nroot.children[3].bounds.min.y = root.bounds.center().y; // bottom left\nfor (auto&amp; data : root.data) {\ninsert(root, data);\n}\nroot.data.clear();\n}\n} else {\nfor (auto&amp; child : root.children) {\nif (child.bounds.contains(data.center)) {\ninsert(child, data);\nbreak;\n}\n}\n}\n}\n// query\ntemplate&lt;class T&gt;\nvoid query(QuadtreeNode&lt;T&gt;&amp; root, Rectangle2f bounds, std::vector&lt;DataAtPosition&lt;T&gt;&gt;&amp; result) {\nif (root.bounds.intersects(bounds)) {\nfor (auto&amp; data : root.data) {\nif (bounds.contains(data.center)) {\nresult.push_back(data);\n}\n}\nfor (auto&amp; child : root.children) {\nquery(child, bounds, result);\n}\n}\n}\n</code></pre>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#quadtree-optimization","title":"Quadtree optimization","text":"<p>The quadtree is a recursive data structure, so it is not cache friendly. You can optimize it by using a flat array instead of a recursive data structure. </p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#octree","title":"Octree","text":"<p>Section WiP. Send a merge request if you want to contribute.</p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#kd-tree","title":"KD-Tree","text":"<p>KD-Trees are a tree data structure that are used to partition a spaces in any dimension (2D, 3D, 4D, etc). They are used to optimize collision detection(Physics), pathfinding(AI), and other algorithms that need to iterate over a space. Also they are also used to optimize rendering, because you can render only the visible part of the space. Pay attention that KD-Trees are not the same as Quadtree and Octrees, even if they are similar.</p> <p>In KD-trees, every node defines an orthogonal partition plan that alternate every deepening level of the tree. The partition plan is defined by a dimension, a value. The dimension is the axis that is used to partition the space, and the value is the position of the partition plan. The partition plan is orthogonal to the axis, so it is a line in 2D, a plane in 3D, and a hyperplane in 4D.</p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#bsp-tree","title":"BSP Tree","text":"<p>BSP inherits almost all characteristics of KD-Trees, but it is not a tree data structure, it is a graph data structure. The main difference is to instead of being orthogonal you define the plane of the section. The plane is defined by a point and a normal. The normal is the direction of the plane, and the point is a point in the plane. </p>"},{"location":"courses/artificialintelligence/readings/spatial-quantization/#spatial-hashing","title":"Spatial Hashing","text":"<p>Spatial hashing is a data structure that is used to partition a space. It consists in a hash table where the keys are the positions of the elements, and the values are the elements in buckets. It is very fast to insert and query elements. But it is not good for iteration, because it is not cache friendly.</p> <p>Usually when you want to use a spatial hashing, you create hash functions for the bucket keys, there is no limit on how you do that, but you have to keep in mind that the hash functions have to be fast and have to be good for the distribution of the elements. Here is a good example of a hashing function for 2D vectors.</p> <pre><code>namespace std {\ntemplate&lt;&gt;\nstruct hash&lt;Vector2f&gt; {\n// I am assuming size_t is 64 bits and the float is 32 bits\nsize_t operator()(const Vector2f&amp; v) const {\n// get the bits of the float in a integer\nuint64_t x = *(uint64_t*)&amp;v.x;\nuint64_t y = *(uint64_t*)&amp;v.y;\n// mix the bits of the floats\nuint64_t hash = x &amp; (y &lt;&lt; 32);\nreturn hash;\n}\n};\n}\n</code></pre> <p>Pay attention that the hashing function above generates collisions, so you have to use a data structure that can handle collisions. You will use datastructures like <code>unordered_map&lt;Vector2D, unordered_set&lt;DATATYPE&gt;&gt;</code> or <code>unordered_map&lt;Vector2D, vector&lt;DATATYPE&gt;&gt;</code>. The first one is better for insertion and query, but it is not cache friendly. </p> <p>To avoid having one bucket per every possible position, you have to setup properly the dimension of the bucket, a good sugestion is to alwoys floor the position and have buckets dimension of 1.0f. That would be good enough for most cases.</p>"},{"location":"courses/artificialintelligence/slides/test/","title":"Slides","text":"<p>Artificial Intelligence</p>"},{"location":"courses/artificialintelligence/slides/test/#from-reveal","title":"From Reveal","text":"\\[ \\frac{1}{2} \\]"},{"location":"courses/artificialintelligence/slides/test/#slide-2","title":"Slide 2","text":"<p>--</p>"},{"location":"courses/artificialintelligence/slides/test/#vertical","title":"Vertical","text":"<p>TODO</p>"},{"location":"courses/artificialintelligence/slides/test/#slide-3","title":"Slide 3","text":"<p>--</p> <p>Some stuff</p>"},{"location":"courses/artificialintelligence/slides/test/#a-slide-containing-an-image","title":"A Slide containing an image.","text":""},{"location":"courses/datastructures/","title":"Data Structures","text":"<p>WiP</p>"},{"location":"courses/intro/","title":"Intro to Programming","text":""},{"location":"courses/intro/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Understand the fundamental concepts of programming and computer science;</li> <li>Practice how to solve problems programatically using C++;</li> <li>Use tools to write and compile C++ programs;</li> <li>Code, document, test, and implement a well-structured, robust computer program using the C++ programming language.</li> <li>Write reusable modules (collections of functions).</li> <li>Use version control to manage your code;</li> <li>Use the debugger to find and fix bugs in your code;</li> <li>Understand the basics of file input/output;</li> <li>Work in groups to solve problems;</li> </ul>"},{"location":"courses/intro/#learning-outcomes","title":"Learning Outcomes","text":"<ul> <li>Be able to understand computer science concepts and terminology;</li> <li>To describe the basic components of a computer system and their functions;</li> <li>Differentiate between the various types of programming languages;</li> <li>To describe and use software tools in the programming process;</li> <li>Use modern concepts and principles of C++ programming language;</li> <li>To design, code, test, and debug a computer program using the C++ programming language;</li> <li>To demonstrate an understanding of primitive data types, values, operators and expressions in C/C++;</li> <li>Manage and manipulate files in C++;</li> <li>Deliver a full working project collaboratively;</li> </ul>"},{"location":"courses/intro/#schedule","title":"Schedule","text":"<p>Warning</p> <p>This is a work in progress, and the schedule is subject to change. Every change will be communicated in class. Use the github repo as the source of truth for the schedule and materials. The materials provided in canvas are just a copy for archiving purposes and might be outdated.</p> <p>Relevant dates for the Fall 2023 semester:</p> <ul> <li>09-13 Oct 2023 - Midterms Week</li> <li>20-24 Nov 2023 - Thanksgiving Break</li> <li>11-15 Dec 2023 - Finals Week</li> </ul> Week Date Topic 1 2023/08/28 1. Introduction, 2. Tools for first Program 2 2023/09/04 Data Types, Arithmetic Operations, Type conversion 3 2023/09/11 Conditionals, Boolean and Bitwise Operations 4 2023/09/18 Loops, for, while, goto and debugging 5 2023/09/25 Functions, Base Conversion, Pointers, Reference 6 2023/10/02 Streams, File IO 7 2023/10/09 Midterm 8 2023/10/16 Arrays, Vectors, String 9 2023/10/23 Recursion 10 2023/10/30 Sorting 11 2023/11/06 Structs, Unions, Enumerations 12 2023/11/13 Work sessions 13 2023/11/20 Thanks giving week 14 2023/11/27 Work sessions / Review 15 2023/12/04 Review / Presentations 16 2023/12/11 Finals"},{"location":"courses/intro/#references","title":"References","text":"<p>10<sup>th</sup> edition Gaddis, T. (2020) Starting out with C++. Early objects / Tony Gaddis, Judy Walters, Godfrey Muganda. Pearson Education, Inc. Available at: https://research-ebsco-com.cobalt.champlain.edu/linkprocessor/plink?id=047f7203-3c9c-399b-834f-42cdaac4c1da</p> <p>9<sup>th</sup> edition Gaddis, T. (2017) Starting out with C++. Early objects / Tony Gaddis, Judy Walters, Godfrey Muganda. Pearson. Available at: https://discovery-ebsco-com.cobalt.champlain.edu/linkprocessor/plink?id=502e29d6-3b46-38ff-9dc2-65e79c81c29b</p> <ul> <li>C++ early objects. Amazon (Champlain: 9<sup>th</sup> 10<sup>th</sup>)</li> <li>Modern C++ Programming</li> <li>learncpp</li> <li>cpluslus</li> <li>cprogramming</li> <li>programming-books</li> <li>google style guide</li> <li>riptutorial</li> <li>cpp manual</li> <li>cpp core guidelines</li> <li>rooksguide</li> <li>cpp best practices</li> </ul>"},{"location":"courses/intro/01-introduction/","title":"Reasons why you should learn how to program with C++","text":"<p>Before we start, this repository aims to be practical, and I highly incentive you to look for other references. I want to add this another awesome repository it holds an awesome compilation of modern C++ concepts.</p> <p>Another relevant reference for what we are going to cover is the updated core guidelines that explain why some syntax or style is bad and what you should be doing instead.</p>"},{"location":"courses/intro/01-introduction/#why","title":"Why?","text":"<p>The first thing when you think of becoming a programmer is HOW DO I START? Well, C++ is one of the best  programming languages to give you insights into how a computer works. Through the process of learning how to code  C++, you will learn not only how to use this language as a tool to solve your problems, but the farther you go, the  more you will start uncovering and exploring exciting computer concepts.</p> <p>C++ gives you the simplicity of C and adds a lot of steroids. It delivers lots of quality-of-life stuff, increasing  the developer experience. Let\u2019s compare C with C++, shall we?</p> <ol> <li>The iconic book \"The C Programming Language\" by Brian W. Kernighan and Dennis M. Ritchie has only 263 pages.     Pretty simple, huh?</li> <li>The book \"C++ How to Program\" by Harvey and Paul Deitel It holds around 1000 pages, and the pages are way     bigger than the other one.</li> </ol> <p></p> <p>So, don\u2019t worry, you just need to learn the basics first, and all the rest are somehow advanced concepts. I will do  my best to keep you focused on what is relevant to each moment of your learning journey.</p> <p>Without further ado. Get in the car!</p> <p></p>"},{"location":"courses/intro/01-introduction/#speed-matters","title":"Speed Matters","text":"<p>A LOT. Period. C++ is one of the closest intelligible programming languages before reaching the level of  machine code, as known as Assembly Language. If you code in machine code, you obviously will code precisely what  you want the machine to do, but this task is too painful to be the de-facto standard of coding. So we need  something more straightforward and more human-readable. So C++ lies in this exact area of being close to assembly language and still able to be \"easily\" understandable. Note the quotes, they are there because it might not be that easy when you compare its syntax to other languages, C++ has to obey some constraints to keep the generated binary fast  as a mad horse while trying to be easier than assembly. Remember, it can always get worse.</p> <p></p> <p>The main philosophy that guides C++ is the \"Zero-cost abstractions\", and it is the main reason why C++ is so fast. It means that the language does not add any overhead to assembly. So, if someone proposes a new core feature as a Technical specification, it should pass through this filter. And it is a very high bar to pass. I am looking at you, ts reflection, everyone I know that want to make games, ask for this feature, but it is not there yet. </p> <p></p>"},{"location":"courses/intro/01-introduction/#why-does-speed-matter","title":"Why does speed matter?","text":"<p>Mainly because we don\u2019t want to waste time. Right? But it has more impactful consequences. Let\u2019s think a bit more, you  probably have a smartphone, and it lives only while it has enough energy on its battery. So, if you are a lazy  mobile developer and do not want to learn how to do code efficiently, you will make your app drain more energy  from the battery just by making the user wait for the task to be finished or by doing lots of unnecessary  calculations! You will be the reason the user has not enough power to use their phones up to the end of the day.  In fact, you will be punishing your user by using your app. You don\u2019t want that, right? So let\u2019s learn how to code  appropriately. For the sake of the argument, worse than that, a lazy blockchain smart contract developer will make  their users pay more for extra gas fee usage for the extra inefficient CPU cycles.</p> <p></p>"},{"location":"courses/intro/01-introduction/#language-benchmarks","title":"Language benchmarks","text":"<p>I don\u2019t want to point fingers at languages, but, hey, excuse me, python, are you listening to me, python? Python?  Please answer! reference cpp vs python.  Nevermind. It is still trying to figure things out. Ah! Hey ruby, don\u2019t be shy, I know you look  gorgeous, and I  admire you a lot, but can you dress up faster and be ready to run anytime soon? </p> <p>You don\u2019t need makeup to run fast. That\u2019s the idea. If the language does lots of fancy stuff, it won\u2019t be extracting the juicy power of the CPU.</p> <p>So let\u2019s first clarify some concepts for a fair comparison. Some languages do not generate binaries that run in your  CPU. Some of them run on top of a virtual machine. The Virtual Machine(VM) is a piece of software that, in runtime,  translates the bytecode or even compiles source code to something the CPU can understand. It\u2019s like an old car;  some of them will make you wait for the ignition or even get warm enough to run fast. I am looking at you Java and JavaScript. It is a funny concept, I admit, but you can see here that the ones that run on top of a translation device  would never run as fast as a compiled binary ready to run on the CPU.</p> <p>So let\u2019s bring some ideas from my own experience, and I invite you to test by yourself. Just search for \"programming  languages benchmark\" on your preferred search engine or go here. </p> <p></p> <p>I don\u2019t want to start a flame-war. Those numbers might be wrong, but the overall idea is correct. Assuming C++ does not  add much overhead to your native binary, let\u2019s set the speed to run as 1x. Java would be around 1.4x slower, and  JavaScript is 1.6x, python 40x, and ruby 100x. The only good competitor in the house is Rust because its compiled code  runs straight on the CPU efficiently with lots of quality-of-life additions. Rust gives almost similar results if  you do not play around with memory-intensive problems. Another honorable mention is WASM - Web Assembly, although it is  a bytecode for a virtual machine, many programming languages are able to target it(compile for it), it is becoming blazing fast and it is getting traction nowadays, keep tuned. </p> <p></p>"},{"location":"courses/intro/01-introduction/#who-should-learn-c","title":"Who should learn C++","text":"<p>YOU! Yes, seriously, I don\u2019t know you, but I am pretty sure you should know how to code in any language. C++  can be challenging, it is a fact, but if you dare to challenge yourself to learn it, your life will be somewhat better.</p> <p>Let\u2019s cut to the bullets:</p> <ol> <li>The ones who seek to build efficient modules for mobile apps, such as the video/image processing unit;</li> <li>Game developers. Even the gameplay developers that usually only script things should know how to ride a horse(CPU)     fast;</li> <li>Researchers looking to not waste time by coding inefficient code and wait hours, even days, to see the result of     their calculations. They should reduce the costs of renting CPU clusters;</li> <li>Computer scientists are those who should know how a computer works. After all, C++ is one of the preferred     programming languages that unlocks all the power of the CPU;</li> <li>Engineers, in general, should know how to simulate things efficiently;</li> </ol>"},{"location":"courses/intro/01-introduction/#how-do-machines-run-code","title":"How do machines run code?","text":"<p>The first thing is: the CPU does not understand any programming language, only binary instructions. So you have to  convert your code into something the machine can understand. This is the job of the compiler. A compiler is a  piece of software that reads a text file written following the rules of a programming language and essentially  converts it into binary instructions that the CPU can execute. There are many strategies and many ways of doing it. So, given its nature of being near assembly, with C++, you will control precisely what instructions the CPU will  run.</p> <p>But, there is a catch here: for each CPU, you will need a compiler for that instruction set. Ex.: the compiler GCC can generate an executable program for ARM processors, and the generated program won\u2019t work on x86 processors; In the same  way, an x64 executable won\u2019t work on an x86; you need to match the binary instructions generated by the compiler with  the same instruction set available on the target CPU you want to run it. Some compilers can cross-compile: the compiler  runs in your machine on your CPU with its instruction set, but the binary generated only runs on a target machine with  its own instruction set.</p> <pre><code>graph TD\n    START((Start))--&gt;\n    |Source Code|PreProcessor--&gt;\n    |Pre-processed Code|Compiler--&gt;\n    |Target Assembly Code|Assembler--&gt;\n    |Relacable Machine Code|Linker--&gt;\n    |Executable Machine Code|Loader--&gt;\n    |Operation System|Memory--&gt;\n    |CPU|RUN((Run))</code></pre>"},{"location":"courses/intro/01-introduction/#program-life-cycle","title":"Program Life Cycle","text":"<p>Software development is complex and there is lots of styles, philosophies and standard, but the overall structure  looks like this:</p> <ol> <li>Analysis, Specification, Problem definition </li> <li>Design of the Software (pseudocode/algorithm, flowchart), Problem analysis</li> <li>Implementation / Coding</li> <li>Testing and Debugging - In TDD(Test Driven Development) we write the tests first.</li> <li>Maintenance - Analytics and Improvements</li> <li>End of Life</li> </ol>"},{"location":"courses/intro/01-introduction/#pseudocode","title":"Pseudocode","text":"<p>Pseudocode is a way of expressing algorithms using a combination of natural language and programming constructs. It  is not a programming language and cannot be compiled or executed, but it provides a clear and concise way to  describe the steps of an algorithm. Here is an example of pseudocode that describes the process of finding the  maximum value in a list of numbers:</p> <pre><code>set maxValue to 0\nfor each number in the list of numbers\n  if number is greater than maxValue\n    set maxValue to number\noutput maxValue\n</code></pre> <p>Pseudocode is often used as a planning tool for programmers and can help to clarify the logic of a program before it  is written in a specific programming language. It can also be used to communicate algorithms to people who are not familiar with a particular programming language. Reference</p>"},{"location":"courses/intro/01-introduction/#flowcharts","title":"Flowcharts","text":"<p>A flowchart is a graphical representation of a process or system that shows the steps or events in a sequential  order. It is a useful tool for demonstrating how a process works, identifying potential bottlenecks or  inefficiencies in a process, and for communicating the steps involved in a process to others. </p> <p>Flowcharts are typically composed of a series of boxes or shapes, connected by arrows, that represent the steps in  a process. Each box or shape usually contains a brief description of the step or event it represents. The arrows  show the flow or movement from one step to the next. </p> <p>Flowcharts can be used in a variety of settings, including business, engineering, and software development. They  are particularly useful for demonstrating how a process works, identifying potential issues or bottlenecks in the  process, and for communicating the steps involved in a process to others. </p> <p>There are many symbols and notations that can be used to create flowcharts, and different organizations  and industries may have their own standards or conventions for using these symbols. Some common symbols and  notations used in flowcharts include: </p> <ol> <li>Start and end symbols: These are used to indicate the beginning and end of a process.</li> <li>Process symbols: These are used to represent the various steps or events in a process.</li> <li>Decision symbols: These are used to represent a decision point in a process, where the flow of the process depends on the outcome of a decision. </li> <li>Connector symbols: These are used to connect the various symbols in a flowchart, showing the flow or movement from one step to the next.</li> <li>Annotation symbols: These are used to add additional information or notes to a flowchart.</li> </ol> <p>By using a combination of these symbols and notations, you can create a clear and concise flowchart that effectively communicates the steps involved in a process or system. Reference</p> <p>I suggest using the tool Code2Flow to write pseudocode and see the flowchart drawn in real  time. But you can draw them on Diagrams. If you are into sequence diagrams, I suggest using sequencediagram.org.</p>"},{"location":"courses/intro/01-introduction/#practice","title":"Practice","text":"<p>Try to think ahead the problem definition by questioning yourself before expressing the algorithm as pseudocode or  flowchart:  - What are the inputs? - What is a valid input? - How to compute the math? - What is the output? - How many decimals is needed to express the result?</p> <p>Use diagrams to draw a flowchart or use Code2Flow to  write a working pseudocode to: 1. Compute the weighted average of two numbers. The first number has weight of 1 and the     second has weight of 3;  2. Area of a circle; 3. Compute GPA; 4. Factorial number;</p>"},{"location":"courses/intro/01-introduction/#glossary","title":"Glossary","text":"<p>It is expected for you to know superficially these terms and concepts. Research about them. It is not strictly required, because we are going to cover them in class.</p> <ul> <li>CPU</li> <li>GPU</li> <li>ALU</li> <li>Main Memory</li> <li>Secondary Memory</li> <li>Programming Language</li> <li>Compiler</li> <li>Linker</li> <li>Assembler</li> <li>Pseudocode</li> <li>Algorithms</li> <li>Flowchart</li> </ul>"},{"location":"courses/intro/01-introduction/#activities","title":"Activities","text":"<ol> <li>Sign up on beecrowd. If you are a enrolled student, look for the key in canvas to be assigned to the coding assignments. </li> <li>https://blockly.games/maze - test your ability to solve small problems via block programming</li> <li>https://codecombat.com/ - very interesting game</li> <li>https://scratch.mit.edu/ - start a project and make it say hello when you click on it</li> </ol>"},{"location":"courses/intro/01-introduction/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion this is publicly  visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me.</p>"},{"location":"courses/intro/02-tooling/","title":"Tools for C++ development","text":"<p>Opinion</p> <p>This list is a mix of standard tools and personal choice. It is a good starting point, but in the future you will be impacted by other options, just keep your mind open to new choices.</p> <ul> <li> Version Control<ul> <li> GIT</li> <li> Github</li> <li> GitKraken</li> </ul> </li> <li> Compiler</li> <li> CMake</li> </ul> <p>Every programing language use different set of tools in order to effectively code. In C++ you will need to learn how to use a bunch of them to solve problems and develop software.</p>"},{"location":"courses/intro/02-tooling/#version-control","title":"Version Control","text":"<p>Version control are tools that help you to keep track of your code changes. It is a must have tool for any developer. You can keep track the state of your code, and if you mess up something, you can go back to a previous state. It is also a great tool to collaborate with other developers. You can work on the same codebase without messing up each other work.</p>"},{"location":"courses/intro/02-tooling/#git","title":"GIT","text":"<p>Optional</p> <p>Install Git</p> <p> Git is a version control system that is used to track changes to files, including source code, documents, and other types of files. It allows multiple people to work on the same files concurrently, and it keeps track of all changes made to the files, making it easy to go back to previous versions or merge changes made by different people. Git is widely used by developers for managing source code, but it can be used to track changes to any type of file. It is particularly useful for coordinating work on projects that involve multiple people, as it allows everyone to see and track changes made by others.</p>"},{"location":"courses/intro/02-tooling/#github","title":"Github","text":"<p>Action</p> <p>Github Student Pack</p> <p> Github is a web-based platform for version control and collaboration on software projects. It is a popular platform for developers to share and collaborate on code, as well as to track and manage software development projects. GitHub provides version control using Git, a version control system that allows developers to track changes to their codebase and collaborate with other developers on the same codebase. It also includes a range of features such as bug tracking, project management, and team communication tools. In addition to being a platform for software development, GitHub is also a community of developers and a marketplace for buying and selling software development services.</p> <p>In this course we are going to extensively use GITHUB functionalities. So create an account now with your personal account. Use a meaningful username. Avoid names that hard to associate with you. If you have a educational email or student id, apply for the Github Student Pack, so you will have access to lots of free tools.</p> <p>It is nice to have <code>git</code> in your machine, but it is not required, because we are going to use gui via gui tools. See  GitKraken below. </p>"},{"location":"courses/intro/02-tooling/#gitkraken","title":"GitKraken","text":"<p>Action</p> <p>Install Gitkraken</p> <p>GitKraken  is a Git client for Windows, Mac, and Linux that provides a graphical interface for working with Git repositories. It allows users to manage Git repositories, create and review changes to code, and collaborate with other developers. Some features of GitKraken include a visual representation of the repository's commit history, the ability to stage and discard changes, and support for popular version control systems like GitHub and GitLab. GitKraken is designed to be user-friendly and to make it easier for developers to work with Git, particularly for those who may be new to version control systems.</p> <p>Gitkraken is a paid software, and it is free for public repositories, but you can have all enterprise and premium functionalities enabled for free with the student pack and described before.  </p> <p>Install Gitkraken. If you login into gitkraken using GitHub with student pack it will unlock all pro features.</p>"},{"location":"courses/intro/02-tooling/#compiler","title":"Compiler","text":"<p>A compiler is a type of computer program that translates source code into machine instructions that can be run  or the <code>CPU</code> or interpreted in a <code>Virtual Machine</code>.</p> <pre><code>graph TD\n  SRC[Source Code] --&gt; |Assembly| OBJ[Machine Code];\n  OBJ --&gt; EXE[Executable];\n  OBJ --&gt; LIB[Library];</code></pre> <ul> <li><code>Source Code</code> in C++, is associated to two different type of textual file extensions: <code>.cpp</code> for sources and <code>.h</code> for header files. It is what the developer writes.</li> <li><code>Assembly</code> is a human readable representation of the <code>Machine Code</code>. It is not the <code>Machine Code</code> itself, but it is a representation of it. It is a way to make the <code>Machine Code</code> human readable.</li> <li><code>Machine Code</code> is what the <code>CPU</code> can run and understand. It is a sequence of <code>0</code> and <code>1</code> that the <code>CPU</code> can understand and execute. It is not human readable.</li> <li><code>Executable</code> is the result of the compilation process. It is a file that can be executed by the <code>Operating System</code>.</li> <li><code>Library</code> is a collection of <code>Machine Code</code> that can be used by other programs.</li> <li><code>Executable</code> and <code>Library</code> Are binary file that contains the <code>Machine Code</code> instructions that the <code>CPU</code> can execute.</li> </ul> <p>Note</p> <p>In compiled languages, the end user only receives the executables and libraries. The source code is not distributed.</p> <p>Here you can see briefly a small function to square a number in <code>C++</code> compiled via <code>GCC</code> into a <code>x86-64</code> <code>assembly</code>. The left side is the <code>Source Code</code> and the right side is the code compiled into a human-readble <code>Assembly</code>. This code still needs links to the <code>Operation System</code> in order to be executed.</p>"},{"location":"courses/intro/02-tooling/#notes-on-virtual-machines-vm","title":"Notes on Virtual Machines (VM)","text":"<p>Tip</p> <p>The knowledge of this section is not required for this course, but it is good to know.</p> <p>Some languages such as <code>Java</code>, <code>C#</code> and others, compile the <code>Source Code</code> into <code>bytecode</code> that runs on top of an abstraction layer called <code>Virtual Machine</code> (VM). The VM is a software that runs on top of the <code>Operating System</code> and it is responsible to translate the <code>bytecode</code> into <code>Machine Code</code> that the <code>CPU</code> can understand. This is a way to make the <code>Source Code</code> portable across different <code>Operating Systems</code> and <code>CPU</code> architectures - <code>cross-platform</code>. But this abstraction layer has it cost and it is not as efficient as the <code>Machine Code</code> itself. </p> <p>To speed up the execution, some <code>VM</code> can <code>Just In Time</code> (<code>JIT</code>) compile the <code>bytecode</code> into <code>Machine Code</code> at runtime when the <code>VM</code> detects parts of <code>Source Code</code> is running a lot(<code>Hotspots</code>), to speed up the execution. When this optmization step is happening, the machine is warming up.</p> <pre><code>graph TD\n  SRC[Source Code] --&gt; |Compiles| BYT[Bytecode];\n  BYT --&gt; |JIT Compiler| CPU[Machine Code];</code></pre> <p>Note</p> <p>In languages that uses VMs, the end user receives the bytecode. The source code is not distributed.</p>"},{"location":"courses/intro/02-tooling/#notes-on-interpreters","title":"Notes on Interpreters","text":"<p>Tip</p> <p>The knowledge of this section is not required for this course, but it is good to know.</p> <p>Some languages such as <code>Python</code>, <code>Javascript</code> and others, do not compile the <code>Source Code</code>, instead, they run on top a program called <code>Interpreter</code> that reads the <code>Source Code</code> and executes it line by line.</p> <pre><code>graph TD\n  SRC[Source Code] --&gt; |read line| INT[Interpreter];\n  INT --&gt; |translates| CPU[Machine Code];</code></pre> <p>Some <code>Interpreters</code> are <code>Ahead Of Time</code> (<code>AOT</code>) and they compile the <code>Source Code</code> into <code>Machine Code</code> before the <code>Source Code</code> is executed.</p> <pre><code>graph TD\n  SRC[Source Code] --&gt; |AoT compile| INT[Bytecode / Machine Code];\n  INT --&gt; CPU;</code></pre> <p>Note</p> <p>In intrepreted languages, the end user receives the source code. Sometimes the source code is obfuscated, but it is still readable. </p>"},{"location":"courses/intro/02-tooling/#platform-specific","title":"Platform specific","text":"<p>This where things get tricky, C++ compiles the code into a binary that runs directly on the processor and interacts with the operating system. So we can have multiple combinations here. Most compilers are cross-platform, but there is exceptions. And to worsen it, some Compilers are tightly coupled with some IDEs(see below, next item). </p> <p>I personally prefer to use CLang to be my target because it is the one that is most reliable cross-platform compiler. Which means the code will work as expected in most of the scenarios, the feature support table is the same across all platforms. But GCC is the more bleeding edge, which means usually it is the first to support all new fancy features C++ introduces.</p> <p>No need to download anything here. We are going to use the CLion IDE. See below topics.</p>"},{"location":"courses/intro/02-tooling/#cmake","title":"CMake","text":"<p>CMake CMake is a cross-platform free and open-source software tool for managing the build process of software using a compiler-independent method. It is designed to support directory hierarchies and applications that depend on multiple libraries. It is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice.</p> <p>Note</p> <p>If you use a good IDE(see next topic), you won't need to download anything here. </p> <p>CMake is typically used in conjunction with native build environments such as Make, Ninja, or Visual Studio. It can also generate project files for IDEs such as Xcode and Visual Studio. You can see a full list of supported generators here. </p> <p>Here is a simple example of a <code>CMakeLists.txt</code> file that can be used to build a program called \"myproject\" that consists of a single source file called \"main.cpp\":</p> <pre><code># Set minimum version of CMake that can be used\ncmake_minimum_required(VERSION 3.10)\n# Set the project name\nproject(myproject)\n# Add executable named \"myproject\" to be built from the source \"main.cpp\"\nadd_executable(myproject main.cpp)\n</code></pre> <p>Warning</p> <p>Every executable can only cave one <code>main</code> function. Each file with a main function describes a new executable program. If you want to have multiple executables in the same project, in other words, you want to manage multiple executables in the same place, you can change the cmake descriptor to match that as follows, and use your IDE to switch between them:</p> <pre><code>cmake_minimum_required(VERSION 3.10)\nproject(myproject)\nadd_executable(myexecutable1 main1.cpp)\nadd_executable(myexecutable2 main2.cpp)\n</code></pre> <p>Tip</p> <p>If you are using a nice IDE, you won't need to run this on the command line. So go to next topic.    </p> <p>If you want to build via command line this project, you would first generate a build directory, and then run CMake to build the files using the detected compiler or IDE:</p> <pre><code>cmake -S. -Bbuild\ncmake --build build -j20\n</code></pre> <p>This will create a Makefile or a Visual Studio solution file in the build directory, depending on your platform and compiler. You can then use the native build tools to build the project by running \"make\" or opening the solution file in Visual Studio.</p> <p>CMake provides many options and variables that can be used to customize the build process, such as setting compiler flags, specifying dependencies, and configuring installation targets. You can learn more about CMake by reading the documentation at https://cmake.org/.</p> <p>[Subscribe to our newsletter][#]{ .md-button }</p>"},{"location":"courses/intro/02-tooling/#ide","title":"IDE","text":"<p>An integrated development environment (IDE) is a software application that provides comprehensive facilities to  computer programmers for software development. An IDE typically integrates a source code editor, build automation  tools, and a debugger. Some IDEs also include additional tools, such as a version control system, a class browser,  and a support for literate programming. IDEs are designed to maximize programmer productivity by providing tight-knit components with similar user interfaces. This can be achieved through features such as auto-complete, syntax highlighting, and code refactoring. Many IDEs also provide a code debugger, which allows the programmer to step through code execution and find and fix errors. Some examples of popular IDEs include Eclipse, NetBeans, Visual Studio, and Xcode. Each of these IDEs has its own set of features and capabilities, and developers may choose one based on their specific needs and preferences.</p> <p>In this course, it is strongly suggested to use an IDE in order to achieve higher quality of deliveries, a good IDE  effectively flatten the C++ learning curve. You can opt out and use everything by hand, of course, and it will deepen  your knowledge on how things work but be assured it can slow down your learning process. Given this course is result  oriented, it is not recommended to not use an IDE here. So use one.</p> <p>OPINION: The most pervasive C++ IDE is CLion and this the one I am going to use. If  you use it too, it would be easier to follow my recorded videos. It works on all platforms Windows, Linux and Mac. I  recommend downloading it via Jetbrains Toolbox. If you are a student, apply for student pack for free here. On Windows, CLion embeds  a GCC compiler or optionally can use visual studio, while on Macs it requires the xcode command line tools, and on  Linux, uses GCC from the system installation.</p> <p>The other options I suggest are:</p>"},{"location":"courses/intro/02-tooling/#on-all-platforms","title":"On all platforms","text":"<p>REPLIT - an online and real-time multiplayer IDE. It is slow and lack many functionalities,  but can be used for small scoped activities or work with a friend.</p> <p>VSCode - a small and highly modularized code editor, it have lots of extensions,  but it can be complex to set up everything needed: git, cmake, compiler and other stuff.</p>"},{"location":"courses/intro/02-tooling/#on-windows","title":"On Windows:","text":"<p>Visual Studio - mostly for Windows. When installing, mark C++ development AND  search and install additional tools \"CMake\". Otherwise, this repo won't work smoothly for you.</p> <p>DevC++ - an outdated and small IDE. Lacks lots of functionalities, but if you don't  have HD space or use an old machine, this can be your option. In long term, this choice would be bad for you for the  lack of functionalities. It is better to use REPLIT than this tool, in my opinion.</p>"},{"location":"courses/intro/02-tooling/#on-osx","title":"On OSX","text":"<p>XCode - for OSX and Apple devices. It is required at least to have the Command  Line Tools. CLion on Macs depends on that. </p> <p>Xcode Command Line Tools is a small suite of software development tools that are installed on your Mac along with Xcode. These tools include the GCC compiler, which is used to compile C and C++ programs, as well as other tools such as Make and GDB, which are used for debugging and development. The Xcode Command Line Tools are necessary for working with projects from the command line, as well as for using certain software development tools such as Homebrew.</p> <p>To install the Xcode Command Line Tools, you need to have Xcode installed on your Mac. To check if Xcode is already installed, open a Terminal window and type:</p> <p><code>xcode-select -p</code></p> <p>If Xcode is already installed, this command will print the path to the Xcode developer directory. If Xcode is not installed, you will see a message saying \"xcode-select: error: command line tools are not installed, use xcode-select --install to install.\"</p> <p>To install the Xcode Command Line Tools, open a Terminal window and type:</p> <p><code>xcode-select --install</code></p> <p>This will open a window that prompts you to install the Xcode Command Line Tools. Follow the prompts to complete the installation.</p> <p>Once the Xcode Command Line Tools are installed, you can use them from the command line by typing commands such as gcc, make, and gdb. You can also use them to install and manage software packages with tools like Homebrew.</p>"},{"location":"courses/intro/02-tooling/#on-linux","title":"On Linux","text":"<p>If you are using Linux, you know the drill. No need for further explanations here, you are ahead of the others.</p> <p>If you are using an Ubuntu distro, you can try this to install most of the tools you will need here:</p> <pre><code>  sudo apt-get update &amp;&amp; sudo apt-get install -y build-essential git cmake lcov xcb libx11-dev libx11-xcb-dev libxcb-randr0-dev\n</code></pre> <p>In order to compile: <pre><code>g++ inputFile.cpp -o executableName\n</code></pre></p> <p>Where <code>g++</code> is the compiler frontend program to compile your C++ source code; <code>inputFile.cpp</code> is the filename you want to compile, you can pass multiple files here separated by spaces ex.: <code>inputFile1.cpp inputFile2.cpp</code>; <code>-o</code> means the next text will be the output program name where the executable will be built, (for windows, the name should end with <code>.exe</code> ex.: <code>program.exe</code>).</p> <p>You will have a plethora of editors and IDEs. The one I can suggest is the VSCode, Code::Blocks or KDevelop. But I  really prefer CLion.</p>"},{"location":"courses/intro/02-tooling/#clion-project-workflow-with-cmake","title":"CLion project workflow with CMake","text":"<p>When you create a new project, select <code>New C++ Executable</code>, set the <code>C++ Standard</code> to the newest one, <code>C++20</code> is enough, and place in a folder location where you prefer.</p> <p>CLion automatically generate 2 files for you.  - <code>CMakeLists.txt</code> is the CMake multiplatform project descriptor, with that, you can share your project with colleagues that are using different platforms than you. - <code>main.cpp</code> is the entry point for your code.</p> <p>It is not the moment to talk about multiple file projects, but if you want to get ready for it, you will have to edit the <code>CMakeLists.txt</code> file and add them in the <code>add_executable</code> function. </p>"},{"location":"courses/intro/02-tooling/#hello-world","title":"Hello World","text":"<p>Hello World <pre><code>// this a single line comment and it is not compiled. comments are used to explain the code.\n// you can do single line comment by adding // in front of the line or\n// you can do multi line comments by wrapping your comment in /* and */ such as: /* insert comment here */\n/* this is\n * a multi line\n * comment\n */\n#include &lt;iostream&gt; // this includes an external library used to deal with console input and output\nusing namespace std; // we declare that we are going to use the namespace std of the library we just included \n// \"int\" means it should return an integer number in the end of its execution to communicate if it finished properly\n// \"main()\" function where the operating system will look for starting the code.\n// \"()\" empty parameters. this main function here needs no parameter to execute\n// anynthing between { and } is considered a scope. \n// everything stack allocated in this scope will be deallocated in the end of the scope. ex.: local variables. \nint main() {\n/* \"cout\" means console output. Print to the console the content of what is passed after the \n     * \"&lt;&lt;\" stream operator. Streams what in the wright side of it to the cout object\n     * \"endl\" means end line. Append a new line to the stream, in the case, console output.\n     */\ncout &lt;&lt; \"Hello World\" &lt;&lt; endl;\n/* tells the operating system the program finished without errors. Any number different from that is considered \n     * a error code or error number.\n     */\nreturn 0; }\n</code></pre></p>"},{"location":"courses/intro/02-tooling/#hello-username","title":"Hello Username","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt; // structure to deal with a char sequence, it is called string\nusing namespace std;\nint main(){\n// invites the user to write something\ncout &lt;&lt; \"Type your name: \" &lt;&lt; endl;\n/* * string means the type of the variable, this definition came from the string include\n     * username means the name of the variable, the container to hold and store the data\n     */\nstring username;\n/*\n     * cin mean console input. It captures data from the console.\n     * note the opposite direction of the stream operator. it streams what come from the cin object to the variable.\n     */\ncin &gt;&gt; username;\n// example of how to stream and concatenate texts to the console output;\ncout &lt;&lt; \"Hello \" &lt;&lt; username &lt;&lt; endl;\n}\n</code></pre>"},{"location":"courses/intro/02-tooling/#common-bugs","title":"Common Bugs","text":"First documented bug found in 1945"},{"location":"courses/intro/02-tooling/#1-syntax-error","title":"1. Syntax error","text":"<p>Syntax errors in C++ are usually caused by mistakes in the source code that prevent the compiler from being able to understand it. Some common causes of syntax errors include: 1. Omitting a required component of a statement, such as a semicolon at the end of a line or a closing curly brace. 2. Using incorrect capitalization or spelling in a keyword or identifier. 3. Using the wrong punctuation, such as using a comma instead of a semicolon. 4. Mixing up the order of operations, such as using an operator that expects two operands before the operands have been provided.</p> <p>To fix a syntax error, you will need to locate the source of the error and correct it in the code. This can often be a challenging task, as syntax errors can be caused by a variety of factors, and it is not always immediately clear what the problem is. However, there are a few tools that can help you locate and fix syntax errors in your C++ code: 1. A compiler error message: When you try to compile your code, the compiler will often provide an error message  that can help you locate the source of the syntax error. These error messages can be somewhat cryptic, but they usually include the line number and a brief description of the problem. 2. A text editor with syntax highlighting: Many text editors, such as Visual Studio or Eclipse, include syntax highlighting, which can help you identify syntax errors by coloring different parts of the code differently. For example, keywords may be highlighted in blue, while variables may be highlighted in green. 3. A debugger: A debugger is a tool that allows you to step through your code line by line, examining the values of variables and the state of the program at each step. This can be a very useful tool for tracking down syntax errors, as it allows you to see exactly where the error occurs and what caused it.</p> <p>Reference</p>"},{"location":"courses/intro/02-tooling/#2-logic-error","title":"2. Logic Error","text":"<p>A logic error in C++ is an error that occurs when the code produces unintended results or behaves in unexpected   ways due to a mistake in the logic of the program. This type of error is usually caused by a coding mistake, such as   using the wrong operator, omitting a necessary statement, or using the wrong variable. Here are some common causes of   logic errors in C++:</p> <ul> <li>Incorrect use of conditional statements (e.g., using the wrong comparison operator or forgetting to include a necessary else clause)</li> <li>Mistakenly using the assignment operator (=) instead of the equality operator (==) in a conditional statement</li> <li>Omitting a necessary loop iteration or failing to terminate a loop at the appropriate time</li> <li>Using the wrong variable or array index</li> <li>Incorrectly calling a function or passing the wrong arguments to a function </li> </ul> <p>To fix a logic error in C++, you will need to carefully examine your code and identify the mistake. It may be helpful to use a debugger to step through your code and see how it is executing, or to add print statements to help you understand what is happening at each step.</p> <p>Reference</p>"},{"location":"courses/intro/02-tooling/#3-run-time-error","title":"3. Run-time error","text":"<p>A runtime error in C++ means that there is an error in your program that is causing it to behave unexpectedly or  crash during runtime, i.e., after you have compiled and run the program. There are many possible causes of runtime errors in C++, including:</p> <ul> <li>Dereferencing a null pointer</li> <li>Accessing an array out of bounds</li> <li>Using an uninitialized variable</li> <li>Trying to divide by zero</li> <li>Attempting to use an object that has been deleted or has gone out of scope</li> </ul> <p>To troubleshoot a runtime error, you'll need to identify the source of the error by examining the error message and the code that is causing the error. Some common tools and techniques you can use to troubleshoot runtime errors include:</p> <ul> <li>Using a debugger to step through your code line by line </li> <li>Printing out the values of variables to see where the error might be occurring</li> <li>Adding additional debug statements or logging to your code to help identify the source of the error</li> </ul> <p>It's also a good idea to ensure that you have compiled your code with debugging symbols enabled, as this will  allow you to use the debugger to get a better understanding of what is happening in your code. will cause the program  to crash during run-time</p> <p>Reference</p>"},{"location":"courses/intro/02-tooling/#exercises","title":"Exercises:","text":"<ul> <li>Research and read about other notable errors: segmentation fault, stack overflow, buffer overflow.</li> <li>Hello World - just print <code>hello world</code>.</li> </ul>"},{"location":"courses/intro/02-tooling/#homework","title":"Homework","text":"<ol> <li>Setup your environment for your needs following the choices given above. If you are unsure, use CLion and you     will be mostly safe. </li> <li>Fork this repo privately. You will have to do your assignments there. Go to the home repo and hit fork.</li> <li>Clone this repo to your machine. gitkraken + github gitkraken clone gitkraken big tutorial</li> <li>Make sure the CMake option \"ENABLE_INTRO\" is set as ON in CMakeLists.txt file in the root directory in order to see     and enable all activities.</li> <li>(enrolled students) If you are enrolled in a class with me, share your repo with me, so I can track your evolution. And do the activities described there.</li> <li>(optional) star this repo :-)</li> </ol>"},{"location":"courses/intro/02-tooling/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion this is publicly  visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me.</p>"},{"location":"courses/intro/03-datatypes/","title":"Variables, Data Types, Expressions, Assignment, Formatting","text":""},{"location":"courses/intro/03-datatypes/#variables","title":"Variables","text":"<p>Variables are containers to store information and facilitates data manipulation. They are named and typed. Detailed Reference</p> <p>Container sizes are measured in Bytes. Bytes are the smallest addressable unit in a computer. Each byte is composed by 8 bits. Each bit can be <code>1</code> or <code>0</code> (<code>true</code> or <code>false</code>). If one byte have 8 bits and each bit one can hold 2 different values, the combination of all possible cases that a byte can be is <code>2^8</code> which is <code>256</code>, so one byte can hold up to <code>256</code> different states or possibilities. </p>"},{"location":"courses/intro/03-datatypes/#data-types","title":"Data Types","text":"<p>There are several types of variables in C++, including:</p> <ul> <li>Primitive data types: These are the most basic data types in C++ and include integer, floating-point, character, and boolean types.</li> <li>Derived data types: These data types are derived from the primitive data types and include arrays, pointers, and references.</li> <li>User-defined data types: These data types are defined by the programmer and include structures, classes, and enumerations.</li> </ul> <p>Detailed Reference</p>"},{"location":"courses/intro/03-datatypes/#numeric-types","title":"Numeric types","text":"<p>There are some basic integer container types with different sizes. It can have some type modifiers to change the default behavior or the type.</p> <p>The common size of the integer containers are <code>1</code>(<code>char</code>), <code>2</code>(<code>short int</code>), <code>4</code>(<code>int</code>) or <code>8</code>(<code>long long</code>) bytes. For a more detailed coverage read this.</p> <p>Note</p> <p>But the only guarantee the C++ imposes is: <code>1 == sizeof(char) &lt;= sizeof(short) &lt;= sizeof(int) &lt;= sizeof(long) &lt;= sizeof(long long)</code> and it can result in compiler defined behaviours where a <code>char</code> can have 8 bytes and a <code>long long</code> can be 1 byte.</p> <p>Note</p> <p>If you care about being cross-platform conformant, you have to always specify the sign modifier or use a more descriptive type such as listed here.</p> <p>For floating pointing numbers, the container size can be <code>4</code>(<code>float</code>), <code>8</code>(<code>double</code>), <code>10</code>(deprecated) or <code>16</code>(<code>long double</code>) bytes.</p> <p>The sign modifiers can be <code>signed</code> and <code>unsigned</code> and are applicable only for integer types. </p> <p>The default behavior of the types in a x86 cpu are as signed numbers and the first bit of the container is the signal. If the first bit is <code>0</code>, it means it is positive.  If the first bit is <code>1</code>, it means it is negative. More details.</p> <p>Which means that if the container follow two complement and is the size of 1 byte(8 bits), it have 1 bit for the signal and 7 bit for the content. So this number goes from <code>-128</code> up to <code>127</code>, this container is typically a <code>signed char</code>. The positive size has 1 less quantity in absolute than the negative because 0 is represented in positive side. There are <code>256</code> numbers between <code>-128</code> and <code>127</code> inclusive.</p>"},{"location":"courses/intro/03-datatypes/#char","title":"Char","text":"<p>A standard <code>char</code> type uses 1 byte to store data and follows complement of 1. Going <code>-127</code> to <code>127</code>, so tipically represents <code>255</code> numbers.</p> <p>A <code>signed char</code> follows complement of 2 and it can represent <code>2^8</code> or <code>256</code> different numbers. By default, in x86 machine char is signed and the represented numbers can go from <code>-2^7</code> or <code>-128</code> up to <code>2^7 - 1</code> or <code>127</code>.</p> <p>An <code>unsigned char</code></p> <p>Chars can be used to represent letters following the ascii table where each value means a specific letter, digit or symbol.</p> <p>Note</p> <p>A <code>char</code> can have different sizes to represent different character coding for different languages. If you are using hebrew, chinese, or others, you probably will need more than 1 byte to represent the chars. Use <code>char8_t</code> (UTF8), <code>char16_t</code>(UTF16) or <code>char36_t</code>(UTF32), to cover your character encoding for the language you are using.</p>"},{"location":"courses/intro/03-datatypes/#integer","title":"Integer","text":"<p>Note</p> <p>Most of the information that I am covering here might be not precise, but the overall idea is correct. If you want a deep dive, read this.</p> <p>A standard <code>int</code> type uses 4 bytes to store data. It is signed by default.</p> <p>It can represent <code>2^32</code> or <code>4294967296</code> different numbers. As a signed type, it can represent numbers from <code>-2^31</code> or  <code>-2147483648</code> up to <code>2^31 - 1</code> or <code>2147483647</code>.</p> <p>The type <code>int</code> can accept sign modifiers as <code>signed</code> or <code>unsigned</code> to change the behavior of the first bit to act as a sign or not.</p> <p>The type <code>int</code> can accept size modifiers as <code>short</code> (2 bytes) or <code>long long</code> (8 bytes) to change the size and representation capacity of the container. Type declaration <code>short</code> and <code>short int</code> result in the same container size of 2 bytes. In the same way a <code>long long</code> or <code>long long int</code> reserves the same size of 8 bytes for the container.</p> <p>The type <code>long</code> or <code>long int</code> usually gives the same size of <code>int</code> as 4 bytes. Historical fact or myth: This abnormality, comes from the evolution of the definition of <code>int</code>: in the past, 2 bytes were enough for the majority of the scenarios in the 16 bits processors, but it frequently reached the limits of the container and it overflowed. So they changed the standard definition of a integer from being 2 bytes to 4 bytes, and created the short modifier. In this scenario the long int lost the reason to exist.</p> <p>Here goes a list of valid integer types and its probable size(it depends on the implementation, cpu architecture and operation system): - Size of 2 bytes: <code>short int</code>, <code>short</code>, <code>signed short int</code>, <code>signed short</code>, <code>unsigned short int</code>, <code>unsigned short</code>,  - Size of 4 bytes: <code>signed</code>, <code>unsigned</code>, <code>int</code>, <code>signed int</code>, <code>unsigned int</code>, <code>long int</code>, <code>long</code>, <code>signed long int</code>, <code>signed long</code>, <code>unsigned long int</code>, <code>unsigned long</code>, - Size of 8 bytes: <code>long long int</code>, <code>long long</code>, <code>signed long long int</code>, <code>signed long long</code>, <code>unsigned long long int</code>, <code>unsigned long long</code>. </p> <p>OPINION: I highly recommend the usage of these types instead, to ensure determinism and consistency between compilers, operating systems and cpu architectures.</p>"},{"location":"courses/intro/03-datatypes/#float-pointing","title":"Float pointing","text":"<p>There are 3 basic types of floating point containers: <code>float</code>(4 bytes) and <code>double</code>(8 bytes) and <code>long double</code>(16 bytes) to represent fractional numeric types.</p> <p>The standard IEEE754 specifies how a floating point number is stored in the form of bits inside the container. The container holds 3 basic information to simulate the behavior of a fractional type inside a binary type: signal, exponent and fraction.</p> <p>Note</p> <p>This standard was very open to implementation definition in the past, and this is one of the root causes of non-determinism physics simulation. This is the main problem you cannot guarantee the same operation with the same pair of numbers will consistently give the same result across different types of processors and compilers, thus making the physics of a multiplayer game consistency hardly achievable. Many deterministic physics engines tend to not use this standard at all, and implement those behaviors via software on top of integers instead. There are 2 approaches to solve the floating-point determinism: softfloat that implement all the IEEE754 specifications via software, or implement some kind of fixed-point arithmetic on top of integers.</p>"},{"location":"courses/intro/03-datatypes/#booleans","title":"Booleans","text":"<p><code>bool</code> is a special type that has the container size of 1 byte but the compiler can optimize and pack up to 8 <code>bool</code>s in one byte if they are declared in sequence.</p>"},{"location":"courses/intro/03-datatypes/#enums","title":"Enums","text":"<p>An enumeration is a type that consists of a set of named integral constants. It can be defined using the <code>enum</code> keyword:</p> <pre><code>enum Color {\nRed,\nGreen,\nBlue\n};\n</code></pre> <p>This defines a new type called <code>Color</code>, which has three possible values: <code>Red</code>, <code>Green</code>, and <code>Blue</code>. By default, the values of these constants are <code>0</code>, <code>1</code>, and <code>2</code>, respectively. However, you can specify your own values:</p> <pre><code>enum Color {\nRed = 5,\nGreen,  // 6\nBlue    // 7\n};\n</code></pre> <p>You can then use the enumeration type just like any other type:</p> <pre><code>Color favoriteColor = Red;\n</code></pre> <p>Enumerations can also have their underlying type explicitly specified:</p> <pre><code>enum class Color : char {\nRed,\nGreen,\nBlue\n};\n</code></pre> <p>Here, the underlying type of the enumeration is <code>char</code>, so the constants <code>Red</code>, <code>Green</code>, and <code>Blue</code> will be stored as characters. The <code>enum class</code> syntax is known as a \"scoped\" enumeration, and it is recommended over the traditional <code>enum</code> syntax because it helps prevent naming conflicts. See the CppCoreGuidelines to understand better why you should prefer using this.</p>"},{"location":"courses/intro/03-datatypes/#special-derived-type-string","title":"Special derived type: string","text":"<p><code>string</code> is a derived type and in order to use it, string should be included in the beginning of the file or in the header. <code>char</code> are the basic unit of a <code>string</code> and is used to store words as a sequence of chars.</p> <p>In C++, a string is a sequence of characters that is stored in an object of the <code>std::string</code> class. The <code>std::string</code> class is part of the C++ Standard Library and provides a variety of functions and operators for manipulating strings.</p>"},{"location":"courses/intro/03-datatypes/#void-type","title":"<code>void type</code>","text":"<p>When <code>void</code> type specifier is used in functions, it indicates that a function does not return a value.</p> <p>It can also be used as a placeholder for a pointer to a memory location to indicate that the pointer is \"universal\" and can point to data of any type, but this can be arguably a bad pattern, and should be used exceptionally when interchanging types with c-style API.</p> <p>We are going to cover this again when covering pointers and functions.</p>"},{"location":"courses/intro/03-datatypes/#variable-naming","title":"Variable Naming","text":"<p>Variable names are called identifiers. In C++, you can use any combination of letters, digits, and underscores to name a variable, it should follow some rules: - Variables can have numbers, en any position, except the first character, so the name does not begin with a digit. Ex. <code>point2</code> and <code>vector2d</code> are allowed, but <code>9life</code> isn't; - Variable names are case-sensitive, so \"myVar\" and \"myvar\" are considered to be different variables; - Can have <code>_</code> in any position of the identifier. Ex. <code>_myname</code> and <code>user_name</code> are allowed; - It is not a reserved keyword;</p> <p>Keep in mind that it is a good practice to choose descriptive and meaningful names for your variables, as this can make your code easier to read and understand. Avoid using abbreviations or acronyms that may not be familiar to others who may read your code.</p> <p>It is also important to note that C++ has some naming conventions that are commonly followed by programmers. For example, it is common to use camelCase or snake_case to separate words in a variable name, and to use all lowercase letters for variables that are local to a function and all uppercase letters for constants.</p>"},{"location":"courses/intro/03-datatypes/#variable-declaration","title":"Variable declaration","text":"<p>Variable declaration in C++ follows this pattern. <pre><code>TYPENAME VARIABLENAME;\n</code></pre> <code>TYPENAME</code> can be the name of any predefined type. See Variable Types for the types. <code>VARIABLENAME</code> can be anything as long it follow the naming rules. See Variable Naming for the naming rules.</p> <p>Note</p> <p>A given variable name can only be declared once in the same context / scope. If you try to redeclare the same variable, the compiler will accuse an error.</p> <p>Note</p> <p>You can redeclare the same variable name in different scopes. If one scope is parent of the other, the current will be used and will shadow the content of the one from outer scope. We are going to cover this more when we are covering multi-file projects and functions.</p> <p>Examples:</p> <pre><code>int a;       // integer variable\nfloat pi;    // floating-point variable\nchar c;      // character variable\nbool d;      // boolean variable\nstring name; // string variable \n</code></pre> <p>Note</p> <p>We are going to cover later in this course other complex types in other modules such as arrays, pointers and references.</p>"},{"location":"courses/intro/03-datatypes/#variable-assignment","title":"Variable assignment","text":"<p><code>=</code> operator means that whatever the container have will be overwritten by the result of the right side statement. You should read it not as <code>equal</code> but as <code>receives</code> to avoid misunderstanding. Reference</p> <pre><code>int a = 10;         // integer variable\nfloat pi = 3.14;    // floating-point variable\nchar c = 'A';       // character variable\nbool d = true;      // boolean variable\nstring name = \"John Doe\"; // string variable \n</code></pre> <p>Every variable, by default, is not initialized. It means that you have to set the content of it after declaring. If the variable is read before the assignment, its content is garbage, it will read whatever is set in the memory stack for the given container location. So the best approach is to always set a value when a variable is declared or be assured that every variable is never read before an assigment.</p> <p>A <code>char</code> variable can be assigned by integer numbers or any characters between single quotes. <pre><code>char c;\nc = 'A'; // the content is 65 and the representation is A. see ascii table.\nc = 98; // the content is 98 and the representation is b. see ascii table.\n</code></pre></p> <p>A <code>bool</code> is by default either <code>true</code> or <code>false</code>, but it can be assigned by numeric value following this rule: - if the value is <code>0</code>, then the value stored by the variable is <code>false</code> (<code>0</code>); - if the value is anything different than <code>0</code>, the value stored is <code>true</code> (<code>1</code>);</p> <p>To convert a <code>string</code> to a <code>int</code>, you have to use a function stoi(for <code>int</code>), stol(for <code>long</code>) or stoll(for <code>long long</code>) because both types are not compatibles.</p> <p>To convert a <code>string</code> to a <code>float</code>, you have to use a function stof(for <code>float</code>), stod(for <code>double</code>), or stold(for <code>long double</code>) because both types are not compatibles.</p>"},{"location":"courses/intro/03-datatypes/#literals","title":"Literals","text":"<p>Literals are values that are expressed freely in the code. Every numeric type can be appended with suffixes to specify explicitly the type to avoid undefined behaviors or compiler defined behaviors such as implicit cast or container size. </p>"},{"location":"courses/intro/03-datatypes/#integer-literals","title":"Integer literals","text":"<p>There are 4 types of integer literals.  - decimal-literal: never starts with digit <code>0</code> and followed by any decimal digit; - octal-literal: starts with <code>0</code> digit and followed by any octal digit; - hex-literal: starts with <code>0x</code> or <code>0X</code> and followed by any hexadecimal digit; - binary-literal: starts with <code>0b</code> or <code>0B</code> and followed by any binary digit;</p> <pre><code>// all of these variables holds the same value, 42, but using different bases.\n// the right side of the = are literals\nint deci = 42; int octa = 052; int hexa = 0x2a; int bina = 0b101010;\n</code></pre> <p>Suffixes: - <code>no suffix</code> provided: it will use the first smallest signed integer container that can hold the data starting from <code>int</code>; - <code>u</code> or <code>U</code>: it will use the first smallest unsigned integer container that can hold the data starting from <code>unsigned int</code>; - <code>l</code> or <code>L</code>: it will use the first smallest signed integer container that can hold the data starting from <code>long</code>; - <code>lu</code> or <code>LU</code>: it will use the first smallest unsigned integer container that can hold the data starting from <code>unsigned long</code>; - <code>ll</code> or <code>LL</code>: it will use the long long signed integer container <code>long long</code>; - <code>llu</code> or <code>LLU</code>: it will use the long long unsigned integer container <code>unsigned long long</code>;</p> <pre><code>unsigned long long l1 = 15731685574866854135ull;\n</code></pre> <p>Reference</p>"},{"location":"courses/intro/03-datatypes/#float-point-literals","title":"Float point literals","text":"<p>There are 3 suffixes in floating point decimals. - <code>no suffix</code> means the container is a double; - <code>f</code> suffix means it is a float container; - <code>l</code> suffix means it is a long double container;</p> <p>A floating point literal can be defined by 3 ways: - digit-sequence decimal-exponent suffix(optional).      - <code>1e2</code> means its a <code>double</code> with the value of <code>1*10^2</code> or <code>100</code>;     - <code>1e-2f</code> means its a <code>float</code> with the value of <code>1*10^-2</code> or <code>0.01</code>; - digit-sequence . decimal-exponent(optional) suffix(optional).     - <code>2.</code> means it is a <code>double</code> with value of <code>2</code>;      - <code>2.f</code> means it is a <code>float</code> with value of <code>2</code>;     - <code>2.1l</code> means it is a <code>long double</code> with value of <code>2.1</code>; - digit-sequence(optional) . digit-sequence decimal-exponent(optional) suffix(optional)     - <code>3.1415f</code> means it is a <code>float</code> with value of <code>3.1415</code>;     - <code>.1</code> means it is a <code>double</code> with value of <code>0.1</code>;     - <code>0.1e1L</code> means it is a <code>long double</code> with value of <code>1</code>;</p> <p>Reference</p>"},{"location":"courses/intro/03-datatypes/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>In C++, you can perform common arithmetic operations is statements using the following operators Reference:</p> <ul> <li>Addition: <code>+</code></li> <li>Subtraction: <code>-</code></li> <li>Multiplication: <code>*</code></li> <li>Division: <code>/</code></li> <li>Modulus (remainder): <code>%</code></li> </ul> <p>There are two special cases called unary increment / decrement operators that may occur in before(prefixed) or after(postfixed) the variable name reference. If prefixed it is executed first and then return the result, if postfixed, it returns the current value and then execute the operation: - Increment: <code>++</code>;  - Decrement: <code>--</code>;</p> <p>There are shorthand assignment operators reference that reassign the value of the variable after executing the arithmetic operation with the right side of the operator with the old value of the variable: - Addition: <code>+=</code> - Subtraction: <code>-=</code> - Multiplication: <code>*=</code> - Division: <code>/=</code> - Modulus (remainder): <code>%=</code></p> <p>Here is an example of how to use these operators in a C++ program: <pre><code>#include &lt;iostream&gt;\nint main() {\nint a = 5;\nint b = 2;\nstd::cout &lt;&lt; a + b &lt;&lt; std::endl; // Outputs 7\nstd::cout &lt;&lt; a - b &lt;&lt; std::endl; // Outputs 3\nstd::cout &lt;&lt; a * b &lt;&lt; std::endl; // Outputs 10\nstd::cout &lt;&lt; a / b &lt;&lt; std::endl; // Outputs 2\nstd::cout &lt;&lt; a % b &lt;&lt; std::endl; // Outputs 1\na++;\nstd::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 6\na--;\nstd::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 5\nstd::cout &lt;&lt; a++ &lt;&lt; std::endl; // Outputs 5 because it first returns the current value and then increments.\nstd::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 6\nstd::cout &lt;&lt; --a &lt;&lt; std::endl; // Outputs 5 because it first decrements the value and then return it already changed;\nstd::cout &lt;&lt; a &lt;&lt; std::endl; // Outputs 5\nb *= 2; // it is a short version of b = b * 2; \nstd::cout &lt;&lt; b &lt;&lt; std::endl; // Outputs 4\nb /= 2; // it is a short version of b = b / 2; \nstd::cout &lt;&lt; b &lt;&lt; std::endl; // Outputs 2\nreturn 0;\n}\n</code></pre></p> <p>Note that the division operator (<code>/</code>) performs integer division if both operands are integers. If either operand is a floating-point type, the division will be performed as floating-point division. So <code>5/2</code> is <code>2</code> because both are integers, se we use integer division, but <code>5/2.</code> is <code>2.5</code> because the second one is a <code>double</code> literal.</p> <p>Also, the modulus operator (<code>%</code>) returns the remainder of an integer division. For example, <code>7 % 3</code> is equal to <code>1</code>, because <code>3</code> goes into <code>7</code> two times with a remainder of <code>1</code>.</p>"},{"location":"courses/intro/03-datatypes/#implicit-cast","title":"Implicit cast","text":"<p>Implicit casting, also known as type coercion, is the process of converting a value of one data type to another data type without the need for an explicit cast operator. In C++, this can occur when an expression involves operands of different data types and the compiler automatically converts one of the operands to the data type of the other in order to perform the operation.</p> <p>For example: <pre><code>int a = 1;\ndouble b = 1.5;\nint c = a + b; // c is automatically converted to a double before the addition\n</code></pre> In this example, the value of <code>b</code> is a double, while the value of <code>a</code> is an <code>int</code>. When the addition operator is used, the compiler will automatically convert a to a <code>double</code> before performing the addition. The result of the expression is a <code>double</code>, so <code>c</code> is also automatically converted to a <code>double</code> before being assigned the result of the expression.</p> <p>Implicit casting can also occur when assigning a value to a variable of a different data type. For example: <pre><code>int a = 2;\ndouble b = a; // a is automatically converted to a double before the assignment\n</code></pre> In this case, the value of <code>a</code> is an int, but it is being assigned to a double variable. The compiler will automatically convert the value of <code>a</code> to a <code>double</code> before making the assignment.</p> <p>It's important to be aware of implicit casting, because it can sometimes lead to unexpected results or loss of precision if not handled properly. In some cases, it may be necessary to use an explicit cast operator to explicitly convert a value to a specific data type.</p>"},{"location":"courses/intro/03-datatypes/#explicit-cast","title":"Explicit cast","text":"<p>In C++, you can use an explicit cast operator to explicitly convert a value of one data type to another. The general syntax for an explicit cast are:</p> <pre><code>// ref: https://en.wikibooks.org/wiki/C%2B%2B_Programming/Programming_Languages/C%2B%2B/Code/Statements/Variables/Type_Casting\n(TYPENAME) value; // regular c-style. do not use this extensively\nstatic_cast&lt;TYPENAME&gt;(value); // c++ style conversion, arguably it is the preferred style. use this if you know what you are doing.\nTYPENAME(value); // functional initialization, slower but safer. might not work for every case. use this if you are unsure or want to be safe.\nTYPENAME{value}; // initialization style, faster, convenient, concise and arguably safer because it triggers warnings. use this for the general case. \n</code></pre> <p>For example: <pre><code>int a = 7;\ndouble b = (double) a; // a is explicitly converted to a double\n</code></pre></p> <p>In this example, the value of <code>a</code> is an <code>int</code>, but it is being explicitly converted to a <code>double</code> using the explicit cast operator. The result of the cast is then assigned to the <code>double</code> variable <code>b</code>.</p> <p>Explicit casts can be useful in situations where you want to ensure that a value is converted to a specific data type, regardless of the data types of the operands in an expression. However, it's important to be aware that explicit casts can also lead to unexpected results or loss of precision if not used carefully. This behaviour is called narrowing.</p> <p>C-style: <pre><code>int a = 20001;\nchar b = (char) a; // b is assigned the ASCII value for the character '!'\n</code></pre></p> <p>In this case, the value of <code>a</code> is an <code>int</code>, but it is being explicitly converted to a <code>char</code> using the explicit cast operator. However, the range of values that can be represented by a <code>char</code> is much smaller than the range of values that can be represented by an <code>int</code>, so the value of <code>a</code> is outside the range that can be represented by a <code>char</code>. As a result, <code>b</code> is assigned the ASCII value for the character <code>1</code>, which is not the same as the original value of <code>a</code>. The value <code>!</code> is <code>33</code> in ASCII table, and <code>33</code> is the result of the <code>20001 % 256</code> where <code>256</code> is the number of elements the <code>char</code> can represent. In this case, what happened was a bug that is hard to track called <code>int overflow</code>.</p>"},{"location":"courses/intro/03-datatypes/#auto-keyword","title":"<code>auto</code> keyword","text":"<p><code>auto</code> keyword is mostly a syntax sugar to automatically infer the data type. It is used to avoid writing the full declaration of complex types when it is easily inferred. <code>auto</code> is not a dynamic type, once it is inferred, it cannot be changed later like in other dynamic typed languages such as javascript.</p> <pre><code>auto i = 0; // automatically inferred as an integer type;\nauto f = 0.0f; // automatically inferred as a float type;\ni = \"word\"; // this won't work, because it was already inferred as an integer and integer container cannot hold string\n</code></pre>"},{"location":"courses/intro/03-datatypes/#formatting","title":"Formatting","text":"<p>There are many functions to help you format the output in the way it is expected, here goes a selection of the most useful ones I can think. Yon can find more functions and manipulators here and here.</p> <p>To set a fixed precision for floating point numbers in C++, you can use the <code>std::setprecision</code> manipulator from the <code>iomanip</code> header, along with the <code>std::fixed</code> manipulator.</p> <p>Here's an example of how to use these manipulators to output a floating point number with a fixed precision of 3 decimal places: <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nint main() {\ndouble num = 3.14159265;\nstd::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; num &lt;&lt; std::endl;\n// Output: 3.142\nreturn 0;\n}\n</code></pre> You can also use the <code>std::setw</code> manipulator to set the minimum field width for the output, which can be useful for aligning the decimal points in a table of numbers.</p> <p>For example: <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nint main() {\ndouble num1 = 3.14159265;\ndouble num2 = 123.456789;\nstd::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; std::setw(8) &lt;&lt; num1 &lt;&lt; std::endl;\nstd::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(3) &lt;&lt; std::setw(8) &lt;&lt; num2 &lt;&lt; std::endl;\n// Output:\n//   3.142\n// 123.457\nreturn 0;\n}\n</code></pre> Note that these manipulators only affect the output stream, and do not modify the values of the floating point variables themselves. If you want to store the numbers with a fixed precision, you will need to use a different method such as rounding or truncating the numbers.</p> <p>To align text to the right or left in C++, you can use the <code>setw</code> manipulator in the <code>iomanip</code> header and the <code>right</code> or <code>left</code> flag. More details here </p> <p>Here is an example: <pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\nint main() {\nstd::cout &lt;&lt; std::right &lt;&lt; std::setw(10) &lt;&lt; \"Apple\" &lt;&lt; std::endl;\nstd::cout &lt;&lt; std::left &lt;&lt; std::setw(10) &lt;&lt; \"Banana\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre></p> <p>Both will print inside a virtual column with the size of 10 chars. This will output the following: <pre><code>    Apple\nBanana   </code></pre></p>"},{"location":"courses/intro/03-datatypes/#optional-exercises","title":"Optional Exercises","text":"<p>Do all exercises up to this topic here.</p> <p>In order to get into coding, the easiest way to learn is by solving coding challenges. It is like learning any new language, you have to be exposed and involved. Do not do only the homeworks, otherwise you are going to fail. Another metaphor is: the homework is the like a competition that you have to run to prove that you are trained, but in order to train, you have to do small runs and do small steps first, so you have to train yourself ot least 2x per week.</p> <p>The best way to train yourself in coding and solving problems in my opinion is this:</p> <ol> <li>Sort Beecrowd questions from the most solved to the least solved questions here is the link of the list already filtered.</li> <li>Start solving the questions from the top to the bottom. Chose one from de the beginning, it would be one of the easiest;</li> <li>If you are feeling comfortable and being able to solve more than 3 per hour, you are allowed to skip some of the questions. It is just like in a gym, when you get used with the load, you increase it. Otherwise continue training slowly.</li> </ol>"},{"location":"courses/intro/03-datatypes/#homework","title":"Homework","text":"<p>banknotes and coins - Here you will use formatting, modulus, casting, arithmetic operations, compound assignment. You don't need to use if-else.</p> <p>Hint. Follow this only if dont find your way of solving it. You can read the number as a double, multiply by 100 and then do a sequence of modulus and division operations. <pre><code>double input; // declare the container to store the input\ncin &gt;&gt; input; // read the input\nlong long cents = static_cast&lt;long long&gt;(input * 100); // number of cents. Note: if you just use float, you will face issues. \nlong long notes100 = cents/10000; // get the number of notes of 100 dollar (100 units of 100 cents) \ncents %= 10000; // remove the amount of 100 dollars\n</code></pre></p> <p>Another good way of solving it avoiding casting is reading the number as string and removing the point. Never use <code>float</code> for money</p> <pre><code>string input; // declare the container to store the input\ncin &gt;&gt; input; // read the input\n// given every input will have the dot, we should remove it. remove the dot `.`\ninput = input.erase(str.find('.'), 1);\n// not it is safe to use int, because no bit is lost in floating casting and nobody have more than MAX_INT cents.  \nint cents = stoll(input); // number of cents. \nlong long notes100 = cents/10000; // get the number of notes of 100 dollar (100 units of 100 cents) \ncents %= 10000; // update the remaining cents by removing the amount of 100 dollars in cents units\n</code></pre>"},{"location":"courses/intro/03-datatypes/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"courses/intro/04-conditionals/","title":"Conditionals, Switch, Boolean Operations","text":"<ul> <li>Boolean Operations</li> <li>Bitwise Operations</li> <li>Conditionals</li> <li>Switch</li> </ul>"},{"location":"courses/intro/04-conditionals/#boolean-operations","title":"Boolean Operations","text":"<p>In C++, the boolean operators are used to perform logical operations on boolean values (values that can only be true or false).</p>"},{"location":"courses/intro/04-conditionals/#and","title":"AND","text":"<p>And operators can be represented by <code>&amp;&amp;</code>(most common syntax) or <code>and</code>(C++20 and up - alternative operator representation). This operator represents the logical <code>AND</code> operation. It returns <code>true</code> if both operands are <code>true</code>, and <code>false</code> otherwise. - It needs only if one <code>false</code> element to make the result be <code>false</code>; - It needs all elements to be <code>true</code> in order the result be <code>true</code>;</p> <code>p</code> <code>q</code> <code>p and q</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>false</code> <code>false</code> <code>folse</code> <code>false</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = false;\nbool z = x &amp;&amp; y; // z is assigned the value false\n</code></pre>"},{"location":"courses/intro/04-conditionals/#or","title":"OR","text":"<p>Or operators can be represented by <code>||</code>(most common syntax) or <code>or</code>(C++20 and up - - alternative operator representation). This operator represents the logical <code>OR</code> operation. It returns <code>true</code> if one operands are <code>true</code>, and <code>false</code> if all are <code>false</code>. - It needs only if one <code>true</code> element to make the result be <code>true</code>; - It needs all elements to be <code>false</code> in order the result be <code>false</code>; </p> <code>p</code> <code>q</code> <code>p or q</code> <code>true</code> <code>true</code> <code>true</code> <code>true</code> <code>false</code> <code>true</code> <code>false</code> <code>true</code> <code>true</code> <code>false</code> <code>folse</code> <code>false</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = false;\nbool z = x || y; // z is assigned the value true\n</code></pre>"},{"location":"courses/intro/04-conditionals/#not","title":"NOT","text":"<p>Not operator can be represented by <code>!</code>(most common syntax) or <code>not</code>(C++20 and up - alternative operator representation). This operator represents the logical <code>NOT</code> operation. It returns <code>true</code> if operand after it is <code>false</code>, and <code>true</code> otherwise._</p> <code>p</code> <code>not p</code> <code>true</code> <code>false</code> <code>false</code> <code>true</code> <p>For example:</p> <pre><code>bool x = true;\nbool y = !x; // y is assigned the value false\n</code></pre>"},{"location":"courses/intro/04-conditionals/#bitwise-operations","title":"Bitwise operations","text":"<p>In C++, the bitwise operators are used to perform operations on the individual bits of an integer value.</p>"},{"location":"courses/intro/04-conditionals/#and_1","title":"AND","text":"<p>Bitwise <code>and</code> can be represented by <code>&amp;</code> or <code>bitand</code>(C++20 and up - alternative operator representation: This operator performs the bitwise AND operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if both bits are 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0. For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x &amp; y; // z is assigned the value 1, which is binary 0001\n</code></pre>"},{"location":"courses/intro/04-conditionals/#or_1","title":"OR","text":"<p>Bitwise <code>or</code> can be represented by <code>|</code> or <code>bitor</code>(C++20 and up - alternative operator representation: This operator performs the bitwise OR operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if either bit is 1, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0. For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x | y; // z is assigned the value 7, which is binary 0111\n</code></pre>"},{"location":"courses/intro/04-conditionals/#xor","title":"XOR","text":"<p>Bitwise <code>xor</code> can be represented by <code>^</code> or <code>bitxor</code>(C++20 and up - alternative operator representation: This operator performs the bitwise XOR (exclusive OR) operation. It compares each bit of the first operand to the corresponding bit of the second operand, and if the bits are different, the corresponding result bit is set to 1. Otherwise, the corresponding result bit is set to 0.</p> <pre><code>int x = 5; // binary representation is 0101\nint y = 3; // binary representation is 0011\nint z = x ^ y; // z is assigned the value 6, which is binary 0110\n</code></pre> <p>Bitwise xor is a type of binary sum without carry bit.</p>"},{"location":"courses/intro/04-conditionals/#not_1","title":"NOT","text":"<p>Bitwise <code>not</code> can be represented by <code>~</code> or <code>bitnot</code>(C++20 and up - alternative operator representation: This operator performs the bitwise NOT (negation) operation. It inverts each bit of the operand (changes 1 to 0 and 0 to 1). For example:</p> <pre><code>int x = 5; // binary representation is 0101\nint y = ~x; // y is assigned the value -6, which is binary 11111010. See complement of two for more details.\n</code></pre>"},{"location":"courses/intro/04-conditionals/#shift","title":"SHIFT","text":"<p>In C++, the shift operators are used to shift the bits of a binary number to the left or right. Pay attention to not mix with the same ones used to strings, in that case they are called stream operators. There are two shift operators:</p> <ol> <li><code>&lt;&lt;</code>: This operator shifts the bits of the left operand to the left by the number of positions specified by the right operand. For example:</li> </ol> <pre><code>int x = 2; // binary representation is 10\nx = x &lt;&lt; 1; // shifts the bits of x one position to the left and assigns the result to x\n// x now contains 4, which is binary 100\n</code></pre> <ol> <li><code>&gt;&gt;</code>: This operator shifts the bits of the left operand to the right by the number of positions specified by the right operand. For example:</li> </ol> <pre><code>int x = 4; // binary representation is 100\nx = x &gt;&gt; 1; // shifts the bits of x one position to the right and assigns the result to x\n// x now contains 2, which is binary 10\n</code></pre> <p>The shift operators are often used to perform operations more efficiently than can be done with other operators. They can also be used to extract or insert specific bits from or into a value.</p>"},{"location":"courses/intro/04-conditionals/#conditionals","title":"Conditionals","text":"<p>Conditionals are used to branch and execute different blocks of code based on whether a certain condition is true or false. There are several types of conditionals, including:</p>"},{"location":"courses/intro/04-conditionals/#if-clause","title":"if clause","text":"<p><code>if</code> statements: These execute a block of code if a certain condition is <code>true</code>. If statements usually uses comparison operators or any result that can be transformed as boolean - any number different than <code>0</code> is considered <code>true</code>, only <code>0</code> is considered <code>false</code>. </p> <p>Comparison operator is used to compare the value of two operands. The operands can be variables, expressions, or constants. The comparison operator returns a Boolean value of true or false, depending on the result of the comparison. There are several comparison operators available:</p> <ul> <li><code>==</code>: returns <code>true</code> if the operands are equal;</li> <li><code>!=</code>: returns <code>true</code> if the operands are not equal;</li> <li><code>&gt;</code>: returns <code>true</code> if the left operand is greater than the right operand;</li> <li><code>&lt;</code>: returns <code>true</code> if the left operand is less than the right operand;</li> <li><code>&gt;=</code>: returns <code>true</code> if the left operand is greater than or equal to the right operand;</li> <li><code>&lt;=</code>: returns <code>true</code> if the left operand is less than or equal to the right operand;</li> </ul> <p>For example: <pre><code>if (x &gt; y) {\n// code to execute if x is greater than y\n}\n</code></pre></p> <p>If it appears without scope <code>{}</code>, the condition will applied only to the next statement. For example  <pre><code>if (x &gt; y) doSomething(); // only happens if x &gt; y is evaluated as true\notherThing(); // this will always occur.  \n</code></pre> Inline conditional: <pre><code>if (x &gt; y) doSomething(); // only happens if x &gt; y is evaluated as true\n</code></pre> <pre><code>if (x &gt; y) {doSomething();} // only happens if x &gt; y is evaluated as true\n</code></pre></p> <p>A common source of error is adding a <code>;</code> after the condition. In this case, the compiler will understand that it is an empty statement and always execute the next statement.  <pre><code>if (x &gt; y); // note the inline empty statement here finished with a `;`\ndoSomething(); // this will always happen\n</code></pre></p> <p>Note</p> <p>It is preferred to always create scopes with <code>{}</code>, but there is no need to have them if you have only one statement that will happen for that condition.</p>"},{"location":"courses/intro/04-conditionals/#if-else-clause","title":"if-else clause","text":"<p>All the explanations from <code>if</code> applies here but now we have a fallback case.</p> <p><code>if-else</code> statements: These execute a block of code if a certain condition is true, and a different block of code if the condition is false. For example:</p> <pre><code>if (x &gt; y) {\n// code to execute if x is greater than y\n} else {\n// code to execute if x is not greater than y\n}\n</code></pre> <p>All the explanations about scope on the <code>if</code> clause described before, can be applied to the <code>else</code>.</p>"},{"location":"courses/intro/04-conditionals/#ternary-operator","title":"Ternary Operator","text":"<p>The ternary operator is also known as the conditional operator. It is used to evaluate a condition and return one value if the condition is true and another value if the condition is false. The syntax for the ternary operator is:</p> <pre><code>condition ? value_if_true : value_if_false\n</code></pre> <p>For example:</p> <pre><code>int a = 5;\nint b = 10;\nint min = (a &lt; b) ? a : b;  // min will be assigned the value of a, since a is less than b\n</code></pre> <p>Here, the condition <code>a &lt; b</code> is evaluated to be true, so the value of a is returned. If the condition had been <code>false</code>, the value of b would have been returned instead.</p> <p>The ternary operator can be used as a shorthand for an if-else statement. For example, the code above could be written as: <pre><code>int a = 5;\nint b = 10;\nint min;\nif (a &lt; b) {\nmin = a;\n} else {\nmin = b;\n}\n</code></pre></p>"},{"location":"courses/intro/04-conditionals/#switch","title":"Switch","text":"<p><code>switch</code> statement allows you to execute a block of code based on the value of a variable or expression. The switch statement is often used as an alternative to a series of if statements, as it can make the code more concise and easier to read. Here is the basic syntax for a switch statement in C++:</p> <pre><code>switch (expression) {\ncase value1:\n// code to be executed if expression == value1\nbreak;\ncase value2:\n// code to be executed if expression == value2\nbreak;\n// ...\ndefault:\n// code to be executed if expression is not equal to any of the values\n}\n</code></pre> <p>The expression is evaluated once, and the value is compared to the values in each case statement. If a match is found, the code associated with that case is executed. The break statement is used to exit the switch statement and prevent the code in subsequent cases from being executed. The default case is optional, and is executed if none of the other cases match the value of the expression.</p> <p>Here is an example of a switch statement that checks the value of a variable x and executes different code depending on the value of x:</p> <pre><code>int x = 2;\nswitch (x) {\ncase 1:\ncout &lt;&lt; \"x is 1\" &lt;&lt; endl;\nbreak;\ncase 2:\ncout &lt;&lt; \"x is 2\" &lt;&lt; endl;\nbreak;\ncase 3:\ncout &lt;&lt; \"x is 3\" &lt;&lt; endl;\nbreak;\ndefault:\ncout &lt;&lt; \"x is not 1, 2, or 3\" &lt;&lt; endl;\n}\n</code></pre> <p>In this example, the output would be \"x is 2\", as the value of x is 2.</p> <p>Note</p> <p>It's important to note that C++ uses strict type checking, so you need to be careful about the types of variables you use in your conditionals. For example, you can't compare a string to an integer using the <code>==</code> operator.</p>"},{"location":"courses/intro/04-conditionals/#switch-fallthrough","title":"Switch fallthrough","text":"<p>In C++, the <code>break</code> statement is used to exit a <code>switch</code> statement and prevent the code in subsequent cases from being executed. However, sometimes you may want to allow the code in multiple cases to be executed if certain conditions are met. This is known as a \"fallthrough\" in C++.</p> <p>To allow a <code>switch</code> statement to fall through to the next case, you can omit the break statement at the end of the case's code block. The code in the next case will then be executed, and the switch statement will continue to execute until a break statement is encountered or the end of the switch is reached.</p> <p>Here is an example of a switch statement with a fallthrough:</p> <pre><code>int x = 2;\nswitch (x) {\ncase 1:\ncout &lt;&lt; \"x is 1\" &lt;&lt; endl;\ncase 2:\ncout &lt;&lt; \"x is 2\" &lt;&lt; endl;\ncase 3:\ncout &lt;&lt; \"x is 3\" &lt;&lt; endl;\ndefault:\ncout &lt;&lt; \"x is not 1, 2, or 3\" &lt;&lt; endl;\n}\n</code></pre> <p>In this example, the output would be \"x is 2\" and \"x is 3\", as the break statement is omitted in the <code>case 2</code> block and the code in the <code>case 3</code> block is executed as a result.</p> <p>It is generally considered good practice to include a <code>break</code> statement at the end of each case in a <code>switch</code> statement to avoid unintended fallthrough. However, there may be cases where a fallthrough is desired behavior. In such cases, it is important to document the intended fallthrough in the code to make it clear to other programmers.</p>"},{"location":"courses/intro/04-conditionals/#homework","title":"Homework","text":"<ul> <li> <p>Do all exercises up to this topic here.</p> </li> <li> <p>Coordinates of a Point. In this activity, you will have to code a way to find the quadrant of a given coordinate.</p> </li> </ul>"},{"location":"courses/intro/04-conditionals/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1041</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"courses/intro/04-conditionals/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"courses/intro/05-loops/","title":"Loops, for, while and goto","text":"<p>A loop is a control flow statement that allows you to repeat a block of code. </p>"},{"location":"courses/intro/05-loops/#while-loop","title":"while loop","text":"<p>This loop is used when you want to execute a block of code an unknown number of times, as long as a certain condition is true. It has the following syntax:</p> <p>Syntax: <pre><code>while (condition) {\n// code block to be executed\n}\n</code></pre> Example: <pre><code>int nums = 10;\nwhile (nums&gt;=0) {\ncout &lt;&lt; nums &lt;&lt; endl;\nnums--;\n}\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>while (condition) // statement goes here\n</code></pre> Example: <pre><code>int nums = 10;\nwhile (nums&gt;=0) cout &lt;&lt; nums-- &lt;&lt; endl;\n</code></pre></p>"},{"location":"courses/intro/05-loops/#do-while-loop","title":"do-while loop","text":"<p>This is similar to the <code>while</code> loop, but it is guaranteed to execute at least once.</p> <p>Syntax: </p> <pre><code>do {\n// code block to be executed\n} while (condition);\n</code></pre> <p>Example: <pre><code>int x = 0;\ndo{\ncout &lt;&lt; x &lt;&lt; endl;\nx++;\n} while(x&lt;10);\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>do\n// single statement goes here\nwhile (condition);    </code></pre> Example: <pre><code>int x = 0;\ndo cout &lt;&lt; x++ &lt;&lt; endl;\nwhile (x&lt;=10);\n</code></pre></p>"},{"location":"courses/intro/05-loops/#for-loop","title":"for loop","text":"<p>This loop is used when you know in advance how many times you want to execute a block of code.</p> <ul> <li>The initialization part is executed only once, at the beginning of the loop. It is used to initialize any loop variables.</li> <li>The condition is evaluated at the beginning of each iteration of the loop. If the condition is true, the code block inside the loop is executed. If the condition is false, the loop is terminated.</li> <li>The increment part is executed at the end of each iteration of the loop. It is used to update the loop variables.</li> </ul> <p>Syntax: <pre><code>for (initialization; condition; step_iteration) {\n// code block to be executed\n}\n</code></pre></p> <p>Example: <pre><code>for(int i=10; i&lt;=0; i--){\ncout &lt;&lt; i &lt;&lt; endl; }\n</code></pre></p> <p>If the block is only one statement, it can be expressed without <code>{}</code>s.</p> <p>Syntax: <pre><code>for (initialization; condition; step_iteration)\n// single statement goes here\n</code></pre> Example: <pre><code>for(int i=10; i&lt;=0; i--)\ncout &lt;&lt; i &lt;&lt; endl;\n</code></pre></p>"},{"location":"courses/intro/05-loops/#range-based-loops","title":"range based loops","text":"<p>A range-based loop is a loop that iterates over a range of elements. The declaration type should follow the same type of the elements in the range. </p> <p>Syntax: <pre><code>for (declaration : range) {\n// code block to be executed\n}\n</code></pre> or <pre><code>for (declaration : range)\n// single statement\n</code></pre></p> <p>To avoid explaining arrays and vectors now, assume <code>v</code> as an iterable container that can hold multiple elements. I am going to use auto here to avoid explaining this topic any further. <pre><code>auto v = {1, 2, 3, 4, 5}; // an automatically inferred iterable container with multiple elements\nfor (int x : v) {\ncout &lt;&lt; x &lt;&lt; \" \";\n}\n</code></pre></p> <p>It is possible to automatically generate ranges <pre><code>#include &lt;ranges&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main() {  // goes from 0 to 9. in iota, the first element is inclusive and the last one is exclusive.\nfor (int i : views::iota(0, 10))  cout &lt;&lt; i &lt;&lt; ' ';\n}\n</code></pre></p>"},{"location":"courses/intro/05-loops/#loop-control-statements","title":"Loop Control Statements","text":""},{"location":"courses/intro/05-loops/#break","title":"<code>break</code>","text":"<p><code>break</code> keyword defines a way to break the current loop and end it immediately.</p> <pre><code>// check if it is prime\nint num; cin &gt;&gt; num; // read the number to be checked if is prime or not\nbool isPrime = true;\nfor(int i=2; i&lt;num; i++){\nif(num%i==0){ // check if i divides num\nisPrime = false;\nbreak; // this will break the loop and prevent further precessing\n}\n}\n</code></pre>"},{"location":"courses/intro/05-loops/#continue","title":"<code>continue</code>","text":"<p><code>continue</code> keyword is used to skip the following statements of the loop and move to the next iteration.</p> <pre><code>// print all even numbers\nfor (int i = 1; i &lt;= 10; i++) {\nif (i % 2 == 1)\ncontinue;\ncout &lt;&lt; i &lt;&lt; \" \"; // this statement is skipped if odd numbers\n}\n</code></pre>"},{"location":"courses/intro/05-loops/#goto","title":"<code>goto</code>","text":"<p>You should avoid <code>goto</code> keyword. PERIOD. The only acceptable usage is to break multiple nested loops at the same time. But even in this case, is better to use <code>return</code> statement and <code>functions</code> that you're going to see later in this course.  </p> <p>The <code>goto</code> keyword allows you to transfer control to a labeled statement elsewhere in your code. </p> <p>Example on how to create a loop using labels and goto. You can create a loop just using labels(anchors) and goto keywords. But this syntax is hard to debug and read. Avoid it at all costs:</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\nint i=0;\nstart: // this a label named as start.\ncout &lt;&lt; i &lt;&lt; endl;\ni++;\nif(i&lt;10)\ngoto start; // jump back to start\nelse\ngoto finish; // jump to finish\nfinish: // this a label named as finish.\nreturn 0;\n}\n</code></pre> <p>Example on how to jump over and skip statements: <pre><code>#include &lt;iostream&gt;\nint main() {\nint x = 10;\ngoto jump_over_this;  // control jumps to the label below\nx = 20;  // this line of code is skipped\njump_over_this:  // label for goto statement\nstd::cout &lt;&lt; x &lt;&lt; std::endl;  // outputs 10\nreturn 0;\n}\n</code></pre></p> <p>Example of an arguably acceptable use of <code>goto</code>. Here you can see the usage of a way to break both loops at the same time. If you use <code>break</code>, you will only break the inner loop. In this situation it is better to break your code into functions to reduce complexity and nesting.  <pre><code>for (int i = 0; i &lt; imax; ++i)\nfor (int j = 0; j &lt; jmax; ++j) {\nif (i + j &gt; elem_max) goto finished;\n// ...\n}\nfinished:\n// ...\n</code></pre></p>"},{"location":"courses/intro/05-loops/#loop-nesting","title":"Loop nesting","text":"<p>You can nest loops by placing one loop inside another. The inner loop will be executed completely for each iteration of the outer loop. Here is an example of nesting a for loop inside another for loop:</p> <pre><code>for (int i = 0; i &lt; 10; i++) {\nfor (int j = 0; j &lt; 5; j++) {\ncout &lt;&lt; \"i: \" &lt;&lt; i &lt;&lt; \" j: \" &lt;&lt; j &lt;&lt; endl;\n}\n}\n</code></pre>"},{"location":"courses/intro/05-loops/#infinite-loops","title":"Infinite loops","text":"<p>A infinite loop is when the code loops indefinitely without having a way out. Here goes some examples:</p> <pre><code>while(true)\ncout &lt;&lt; \"Hello World!\" &lt;&lt; endl; </code></pre> <pre><code>for(;;)\ncout &lt;&lt; \"Hello World!\" &lt;&lt; endl; </code></pre> <pre><code>int i = 0;\nwhile(i&lt;10); // note the ';' here, it will run indefinitely an empty statement because it won't reach the scope.\n{\ncout &lt;&lt; i &lt;&lt; endl;\ni++;\n}\n</code></pre>"},{"location":"courses/intro/05-loops/#accumulator-pattern","title":"Accumulator Pattern","text":"<p>The accumulator pattern is a way to accumulate values in a loop. Here is an example of how to use it:</p> <pre><code>int fact = 1; // accumulator variable\nfor(int i=2; i&lt;5; i++){\nfact *= i; // multiply the accumulator by the current value of i\n}\n// fact = 1*1*2*3*4 = 24\ncout &lt;&lt; fact &lt;&lt; endl;\n</code></pre>"},{"location":"courses/intro/05-loops/#search-pattern","title":"Search pattern","text":"<p>The search pattern is a way to search for a value in a loop, the most common implementation is a boolean flag. Here is an example of how to use it:</p> <pre><code>int num;\ncin &gt;&gt; num; // read the number to be checked if is prime or not\nbool isPrime = true; // flag to indicate if the number is prime or not\nfor(int i=2; i&lt;num; i++){\nif(num%i==0){ // check if i divides num\nisPrime = false;\nbreak; // this will break the loop and prevent further precessing\n}\n}\ncout &lt;&lt; num &lt;&lt; \" is \" &lt;&lt; (isPrime ? \"\" : \"not \") &lt;&lt; \"prime\" &lt;&lt; endl;\n// (isPrime ? \"\" : \"not \") is the ternary operator, it is a shorthand for if-else\n</code></pre>"},{"location":"courses/intro/05-loops/#debugging","title":"Debugging","text":"<p>Debugging is the act of instrumentalize your code in order to track problems and fix them.</p> <p>The most naive way of doing it is by printing variables random texts to find the problem. Don't do it. Use debugger tools instead. Each IDE has his its ows set of tools, if you are using CLion, use this tutorial.</p>"},{"location":"courses/intro/05-loops/#automated-tests","title":"Automated tests","text":"<p>There are lots of methodologies to guarantee your code is correct and solve the problem it is supposed to solve. The one that stand out is Automated tests.</p> <p>When you are using beecrowd, leetcode, hackerrank or any other tool to solve problems to learn how to code, a problem is posted to be solved and they test your code solution against a set of expected outputs. This is automated testing. You can generate custom automated tests for your code and cover all cases that you can imagine before you start coding the solution. This is a good practice and is documented in the industry as Test Driven Development.</p>"},{"location":"courses/intro/05-loops/#homework","title":"Homework","text":"<p>Do all exercises up to this topic here.</p> <p>In this activity, you will have to solve Fibonacci sequence. You should implement using loops, and variables. Do not use arrays nor closed-form formulas.</p> <ul> <li>Easy Fibonacci</li> </ul> <p>Optional Readings on Fibonacci Sequence;</p> <p>Hint: Create two variables, one to store the current value and the previous value. For each iteration step, calculate the sum of both and store and put into a temp variable. Copy the current into the previous and set the current with the temporary you calculated before.</p>"},{"location":"courses/intro/05-loops/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1151</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"courses/intro/05-loops/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"courses/intro/06-functions/","title":"Base Conversion, Functions, Pointers, Parameter Passing","text":""},{"location":"courses/intro/06-functions/#base-conversion","title":"Base conversion","text":"<p>Data containers use binary coding to store data where every digit can be 0 or 1, this is called base 2, but there are different types of binary encodings and representation, the most common integer representation is Complement of two for representing positive and negative numbers and for floats is IEEE754. Given that, it is relevant to learn how to convert the most used common bases in computer science in order to code more efficiently.</p> <p>Most common bases are: - Base 2 - Binary. Digits can go from 0 to 1. <code>{0, 1}</code>; - Base 8 - Octal. Digits can go from 0 to 7. <code>{0, 1, 2, 3, 4, 5, 6, 7}</code>;  - Base 10 - Decimal. Digits can go from 0 to 9. <code>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</code>; - Base 16 - Hexadecimal. Digits can go from 0 to 9 and then from A to F. <code>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F}</code>;</p>"},{"location":"courses/intro/06-functions/#converting-from-decimal-to-any-base","title":"Converting from Decimal to any base","text":"<p>There are several methods for performing base conversion, but one common method is to use the repeated division and remainder method. To convert a number from base 10 to another base <code>b</code>, you can divide the number by <code>b</code> and record the remainder. Repeat this process with the quotient obtained from the previous division until the quotient becomes zero. The remainders obtained during the process will be the digits of the result in the new base, with the last remainder being the least significant digit.</p> <p>For example, to convert the decimal number 75 to base 2 (binary), we can follow these steps:</p> <pre><code>75 \u00f7 2 = 37 remainder 1\n37 \u00f7 2 = 18 remainder 1\n18 \u00f7 2 = 9 remainder 0\n9 \u00f7 2 = 4 remainder 1\n4 \u00f7 2 = 2 remainder 0\n2 \u00f7 2 = 1 remainder 0\n1 \u00f7 2 = 0 remainder 1\n</code></pre> <p>The remainders obtained during the process (1, 1, 0, 1, 0, 0, 1) are the digits of the result in base 2, with the last remainder (1) being the least significant digit. Therefore, the number 75 in base 10 is equal to 1001011 in base 2.</p>"},{"location":"courses/intro/06-functions/#converting-from-any-base-to-decimal","title":"Converting from any base to decimal","text":"<p>The most common way to convert from any base to decimal is to follow the formula:</p> <p>d<sub>n-1</sub>*b<sup>n-1</sup> + d<sub>n-2</sub>*b<sup>n-2</sup> + ... + d<sub>1</sub>*b<sup>1</sup> + d<sub>0</sub>*b<sup>0</sup> </p> <p>Where d<sub>x</sub> represents the digit at the corresponding position x in the number, n is the number of digits in the number, and b is the base of the number.</p> <p>For example, to convert the number 1001011 (base 2) to base 10, we can use the following formula:</p> <p>(1 * 2^6) + (0 * 2^5) + (0 * 2^4) + (1 * 2^3) + (0 * 2^2) + (1 * 2^1) + (1 * 2^0) = 75</p> <p>Therefore, the number 1001011 in base 2 is equal to 75 in base 10.</p>"},{"location":"courses/intro/06-functions/#functions","title":"Functions","text":"<p>A function is a block of code that performs a specific task. It is mostly used to isolate specific reusable functionality from the rest of the code. It has a name, a return type, and a list of parameters. Functions can be called from other parts of the program to execute the task. Here is an example of a simple C++ function that takes two integers as input and returns their sum.</p> <pre><code>int add(int x, int y) {\nint sum = x + y;\nreturn sum;\n}\n</code></pre> <p>To call the function, you would use its name followed by the arguments in parentheses:</p> <pre><code>int a = 2, b = 3;\nint c = add(a, b); // c will be equal to 5\n</code></pre> <p>Functions can also be declared before they are defined, in which case they are called \"prototypes.\" This allows you to use the function before it is defined, which can be useful if you want to define the function after it is used. For example:</p> <pre><code>int add(int x, int y);\nint main() {\nint a = 2, b = 3;\nint c = add(a, b);\nreturn 0;\n}\nint add(int x, int y) {\nint sum = x + y;\nreturn sum;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#reference-declaration","title":"Reference Declaration","text":"Note <p>This content only covers an introduction to the topic.  </p> <p>The <code>&amp;</code> is used to refer memory address of the variable. When used in the declaration, it is the Lvalue reference declarator. It is an alias to an already-existing, variable, object or function. Read more here.</p> <p>When used as an prefix operator before the name of a variable, it will return the memory address where the variable is allocated.</p> <p>Example: <pre><code>string s;\n// the variable r has the same memory address of s\n// the declaration requires initialization\nstring&amp; r = s; s = \"Hello\";\ncout &lt;&lt; &amp;s &lt;&lt; endl; // prints the variable memory address location. in my machine: \"0x7ffc53631cd0\"\ncout &lt;&lt; &amp;r &lt;&lt; endl; // prints the same variable memory address location. in my machine: \"0x7ffc53631cd0\"\ncout &lt;&lt; s &lt;&lt; endl; // prints \"Hello\"\ncout &lt;&lt; r &lt;&lt; endl; // prints \"Hello\"\n// update the content\nr += \" world!\";\ncout &lt;&lt; s &lt;&lt; endl; // prints \"Hello world!\"\ncout &lt;&lt; r &lt;&lt; endl; // prints \"Hello world!\"\n</code></pre></p>"},{"location":"courses/intro/06-functions/#pointer-declaration","title":"Pointer Declaration","text":"Note <p>This content only covers an introduction to the topic.  </p> <p>The <code>*</code> is used to declare a variable that holds the address of a memory position. A pointer is an integer number that points to a memory location of a container of a given type. Read more here.</p> <pre><code>string* r = nullptr; // it is not required do initialize, but it is a good practice to always initialize a pointer pointing to null address (0). \nstring s = \"Hello\";\nr = &amp;s; // the variable r stores the memory address of s\ncout &lt;&lt; s &lt;&lt; endl; // prints the content of the variable s. \"Hello\"\ncout &lt;&lt; &amp;s &lt;&lt; endl; // prints the address of the variable s. in my machine \"0x7fffdda021b0\"\ncout &lt;&lt; r &lt;&lt; endl;  // prints the numeric value of the address the pointer points, in this case it is \"0x7fffdda021b0\".\ncout &lt;&lt; &amp;r &lt;&lt; endl; // prints the address of the variable r. it is a different address than s, in my machine \"0x7fffdda021d0\".\ncout &lt;&lt; *r &lt;&lt; endl; // prints the content of the container that is pointing, it prints \"Hello\".\nstring other = \"world\";\nr = &amp;s; // r now points to another variable\ncout &lt;&lt; *r &lt;&lt; endl; // prints the content of the container that is pointing, it prints \"world\"\n</code></pre>"},{"location":"courses/intro/06-functions/#void-type","title":"<code>void</code> type","text":"<p>We covered briefly the <code>void</code> type when we covered data types. There are 2 main usages of <code>void</code></p> <p><code>void</code> is used to specify that some function dont return anything to the caller.</p> voidFunction.cpp<pre><code>// this function does not need to return anything\n// optionally you can use an empty `return` keyword without variable to break the flow early\nvoid doSomething() {\n// function body goes here\nreturn; // this line is optional, it can be used inside conditional do break early the function flow\n}\n</code></pre> <p><code>void*</code> is used as a placeholder to store a pointer to anything in memory. Use this with extreme caution, because you can easily mess with it and lose track of the type or the conversion. The most common use are:  - Access the raw content of a variable in memory; - Low-level raw memory allocation; - Placeholder to act as a pointer to anything;</p> rawpointer.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;iomanip&gt;\n#include &lt;bitset&gt;\nusing namespace std;\nint main()\n{\n// declare our data\nfloat f = 2.0f;\n// point without type that points to the memory location of `f`\nvoid* p = &amp;f; // (int*) casts the void* to int*, so it can be understandable\n// * in front means that we want to fetch the content of what is pointing\nint i = *(int*)(p); cout &lt;&lt; hex &lt;&lt; i &lt;&lt; endl; // prints 40000000\nstd::bitset&lt;32&gt; bits(i);\ncout &lt;&lt; bits &lt;&lt; endl; // prints 01000000000000000000000000000000\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#passing-parameter-to-a-function-by-value","title":"Passing parameter to a function by value","text":"<p>Pass-by-value is when the parameter declaration follows the traditional variable declaration without <code>&amp;</code>. A copy of the value is made and passed to the function. Any changes made to the parameter inside the function have don't change on the original value outside the function.</p> pass-by-value.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int x) {\nx = x * 2;\n// the value x here is doubled. but it dont change the value outside the scope\n}\nint main()\n{\nint y = 2;\ntimes2(y); // this dont change the value, it passes a copy to the function\ncout &lt;&lt; y &lt;&lt; endl;  // output: 2\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#passing-parameter-to-a-function-by-reference","title":"Passing parameter to a function by reference","text":"<p>Pass-by-reference occurs when the function parameter uses the <code>&amp;</code> in the parameter declaration. It will allow the function to modify the value of the parameter directly in the other scope, rather than making a copy of the value as it does with pass-by-value. The mechanism behind the variable passed is that it is an alias to the outer variable because it uses the same memory position.</p> pass-by-reference.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int &amp;x) { // by using &amp;, x has the same address the variable passed where the function is called \nx*=2; // it will change the variable in caller scope\n}\nint main() {\nint y = 2;\ntimes2(y);\ncout &lt;&lt; y &lt;&lt; endl;  // Outputs 4\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#passing-parameter-to-a-function-by-pointer","title":"Passing parameter to a function by pointer","text":"<p>Pass-by-pointer occurs when the function parameter uses the <code>*</code> in the parameter declaration. It will allow the function to modify the value of the parameter in the other scope via memory pointer, rather than making a copy of the value as it does with pass-by-value. The mechanism behind it is to pass the memory location of the outer variable as a parameter to the function.</p> pass-by-pointer.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid times2(int *x) { // by using *, x has the same address the variable passed where the function is called\n// x holds the address of the outer variable\n// *x is the content of what x points.\n*x *= 2; // it will change the variable in caller scope\n}\nint main() {\nint y = 2;\ntimes2(&amp;y); // the function expects a pointer, given pointer is an address, we pass the address of the variable here\ncout &lt;&lt; y &lt;&lt; endl;  // Outputs 4\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#function-overload","title":"Function overload","text":"<p>A function with a specific name can be overload with different not implicitly convertible parameters.</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nfloat average(float a, float b){\nreturn (a + b)/2;\n}\nfloat average(float a, float b, float c){\nreturn (a + b + c)/3;\n}\nint main(){\ncout &lt;&lt; average(1, 2) &lt;&lt; endl; // print 1.5\ncout &lt;&lt; average(1, 2, 3) &lt;&lt; endl; // print 2\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#default-parameter","title":"Default parameter","text":"<p>Functions can have default parameters that should be used if the parameter is not provided, making it optional.</p> defaultparam.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid greet(string username = \"user\") {\ncout &lt;&lt; \"Hello \" &lt;&lt; mes &lt;&lt; endl;\n}\nint main() {\n// Prints \"Hello user\"\ngreet(); // the default parameter user is used here\n// Prints \"Hello John\"\ngreet(\"John\");\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#scopes","title":"Scopes","text":"<p>Scope is a region of the code where a identifier is accessible. A scope usually is specified by what is inside <code>{</code> and <code>}</code>. The global scope is the one that do not is inside any <code>{}</code>.</p> scope.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nstring h = \"Hello\"; // this variable is in the global scope\nint main() {\nstring w = \" world\"; // this variable belongs to the scope of the main function\ncout &lt;&lt; h &lt;&lt; w &lt;&lt; endl; // both variables are visible and accessible\nreturn 0;\n}\n</code></pre> <p>Multiple identifiers with same name can not be created in the same scope. But in a nested scope it is possible to shadow the outer one when declared in the inner scope.</p> variableShadowing.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nstring h = \"Hello\"; // this variable is in the global scope\nint main() {\ncout &lt;&lt; h; // will print \"Hello\"\nstring h = \" world\"; // this will shadow the global variable with the same name h\ncout &lt;&lt; h; // will print \" world\"\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#lambda-functions","title":"Lambda functions","text":"<p>In C++, an anonymous function is a function without a name. Anonymous functions are often referred to as lambda functions or just lambdas. They are useful for situations where you only need to use a function in one place, or when you don't want to give a name to a function for some other reason. </p> <pre><code>auto lambda = [](int x, int y) { return x + y; };\n// auto lambda = [] (int x, int y) -&gt; int { return x + y; }; // or you can specify the return type\nint z = lambda(1, 2);  // z is now 3\n</code></pre> <p>In this case the only variables accessible by the lambda function scope are the ones passed as parameter <code>x</code> and <code>y</code>, and works just like a normal function, but it can be declared inside at any scope.</p> <p>If you want to make a variable available to the lambda, you can pass it via captures, and it can be by-value or by-reference. To capture a variable by value, just pass the variable name inside the <code>[]</code>. To capture a variable by reference, you use the <code>&amp;</code> operator followed by the variable name inside the <code>[]</code>. Here is an example of capturing a variable by value:</p> <pre><code>int x = 1;\nauto lambda = [x] { return x + 1; };\n</code></pre> <p>The value of <code>x</code> is copied into the lambda function, and any changes to <code>x</code> inside the lambda function have no effect on the original variable.</p> <p>Here is an example of capturing a variable by reference:</p> <pre><code>int x = 1;\nauto lambda = [&amp;x] { return x + 1; };\n</code></pre> <p>The lambda function has direct access to the original variable, and any changes to <code>x</code> inside the lambda function are reflected in the original variable.</p> <p>You can also capture multiple variables by separating them with a comma. For example:</p> <pre><code>int x = 1, y = 2;\nauto lambda = [x, &amp;y] { x += 1; y += 1; return x + y; };\n</code></pre> <p>This defines a lambda function that captures <code>x</code> by-value and <code>y</code> by-reference. The lambda function can modify <code>y</code> but not <code>x</code>.</p> <p>Lambda captures are a useful feature of C++ that allow you to write more concise and expressive code. They can be especially useful when working with algorithms from the Standard Template Library (STL), where you often need to pass a function as an argument.</p> <p>In order to capture everything automatically you can either capture by copy <code>[=]</code> or by reference <code>[&amp;]</code>.</p> <pre><code>// capture everything via copy\nint x = 1, y = 2;\nauto lambda = [=] { // x += 1; // cannot be changed because it is read-only \n// y += 1; // cannot be changed because it is read-only\nreturn x + y; };\nint c = lambda(); // c will be 5, but x and y wont change their values\n</code></pre> <pre><code>// capture everything via reference\nint x = 1, y = 2;\nauto lambda = [&amp;] { x += 1; y += 1; return x + y; };\nint c = lambda(); // c will be 5, x will be 2, and y will be 3.\n</code></pre> <p>For a more in depth understanding, go to Manual Reference or check this tutorial. </p>"},{"location":"courses/intro/06-functions/#multiple-files","title":"Multiple files","text":"<p>In bigger projects, it is useful to split your code in multiple files isolating intention and organizing your code. To do so, you can create a header file with the extension <code>.h</code> and a source file with the extension <code>.cpp</code>. The header file will contain the declarations of the functions and the source file will contain the definitions of the functions. The header file will be included in the source file and the source file will be compiled together with the main file.</p> main.cpp<pre><code>#include &lt;iostream&gt;\n#include \"functions.h\"\nusing namespace std;\nint main() {\ncout &lt;&lt; sum(1, 2) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> functions.h<pre><code>// Preprocessor directive (macro) to ensure that this header file is only included once\n#ifndef FUNCTIONS_H\n#define FUNCTIONS_H\n// Function declaration without body\nint sum(int a, int b);\n#endif\n</code></pre> <p>Alternatively, you can use <code>#pragma once</code> instead of <code>#ifndef</code>, <code>#define</code> end <code>#endif</code> to ensure that the header file is only included once. This is a non-standard preprocessor directive, but it is supported by most compilers. Ex.:</p> functions.h<pre><code>// Preprocessor directive (macro) to ensure that this header file is only included once\n#pragma once\n// Function declaration without body\nint sum(int a, int b);\n</code></pre> functions.cpp<pre><code>// include the header file that contains the function declaration\n#include \"functions.h\"\n// function definition with body \nint sum(int a, int b) {\nreturn a + b;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#preprocessor-directives-and-macros","title":"Preprocessor directives and macros","text":"<p>In C++, the preprocessor is a text substitution tool. It runs before compiling the code. It scans a program for special commands called preprocessor directives, which begin with a <code>#</code> symbol. When it finds a preprocessor directive, it performs the specified text substitutions before the program is compiled. </p> <p>The most common preprocessor directive is <code>#include</code>, which tells the preprocessor to include the contents of another file in the current file. The included file is called a header file, and commonly has a <code>.h</code> extension. For example:</p> <pre><code>#include &lt;iostream&gt;\n</code></pre> <p>Another extensively used macro is <code>#define</code>, which defines a macro. A macro is a symbolic name for a constant value or a small piece of code. For example:</p> <pre><code>#define PI 3.14159\n</code></pre> <p>It will replace all occurrences of <code>PI</code> with <code>3.14159</code> before compiling the code. But pay attention that is not recommended to use macros for constants, because they are not type safe and can cause unexpected behavior. It is recommended to declare <code>const</code> variable instead.</p> <p>See more about some cases against macros here:</p> <ul> <li>https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#enum1-prefer-enumerations-over-macros</li> <li>https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es30-dont-use-macros-for-program-text-manipulation</li> <li>https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es31-dont-use-macros-for-constants-or-functions</li> </ul> <p>Nowadays the best use case for macros are for conditional compilation or platform specification. For example:</p> <pre><code>#define DEBUG 1\nint main() {\n#if DEBUG\nstd::cout &lt;&lt; \"Debug mode\" &lt;&lt; std::endl;\n#else\nstd::cout &lt;&lt; \"Release mode\" &lt;&lt; std::endl;\n#endif\n}\n</code></pre> <p>Another example is to define the operating system:</p> <pre><code>#ifdef _WIN32\n#define OS \"Windows\"\n#elif __APPLE__\n#define OS \"MacOS\"\n#elif __linux__\n#define OS \"Linux\"\n#else\n#define OS \"Unknown\"\n#endif\nint main() {\nstd::cout &lt;&lt; \"OS: \" &lt;&lt; OS &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"courses/intro/06-functions/#homework","title":"Homework","text":"<ul> <li>Do all exercises up to this topic here.</li> <li>Hexadecimal converter. In this activity, you will have to code a way to find the convert to hexadecimal without using any std library to do it for you. DON'T USE <code>std::hex</code>.</li> </ul>"},{"location":"courses/intro/06-functions/#outcomes","title":"Outcomes","text":"<p>It is expected for you to be able to solve all questions before this one <code>1957</code> on beecrowd. Sort Beecrowd questions from the most solved to the least solved questions here in the link. If you don't, see Troubleshooting. Don`t let your study pile up, this homework is just a small test, it is expected from you to do other questions on Beecrowd or any other tool such as leetcode.</p>"},{"location":"courses/intro/06-functions/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems here, start a discussion. Nhis is publicly visible and not FERPA compliant. Use discussions in Canvas if you are enrolled in a class with me. Or visit the tutoring service.</p>"},{"location":"courses/intro/07-streams/","title":"Streams and File IO","text":"<p>At this point, you already are familiar with the <code>iostream</code> header. But we never discussed what it is properly. It is a basic stream and it has two static variable we already use: <code>cin</code> for reading variables from the console input and <code>cout</code> to output things to console, see details here. It is possible to interact with all streams via the <code>&gt;&gt;</code> and <code>&lt;&lt;</code> operators.</p> <p>But C++ have 2 other relevant streams that we need to cover: <code>fstream</code> and <code>sstream</code>.</p>"},{"location":"courses/intro/07-streams/#file-streams","title":"File streams","text":"<p>File streams are streams that target files instead of the terminal console. The <code>fstream</code> header describes the file streams and the ways you can interact with it.</p> <p>The main differences between console and file streams are: - You have to target the filesystem path for files because we can manage different files at the same, but for console, you only have one, so you dont need to target which console we are streaming. In order to not mess each target, you have to declare a different variable to store the target and state. - Files are persistent, so if you write something to them, and try to read from it again, the that will be there saved.</p> <p>Files are a kind of resource managed by the operation system. So every time you request something to be read or write, behind the scenes you are requesting something to the operating system, and it can be slow or subject by lock control. When you open a file to be read or write, the OS locks it to avoid problems. You can open a file to be read multiple times simultaneously, but you cannot write more than once. So to avoid problems, after reading or writing the file, you should close the file.</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n// Open the file\n// this file path is relative to the executable, so be assured it exists in the same folder the executable is placed\n// fin is the variablename and it is function initialized via a file path to target, but it can be any valid identifier\n// I am using fin as variable to follow the same metaphor `fin` as `file input` as we have with console input `cin`, \nifstream fin(\"file.txt\"); // Check if the file is open\n// it is a good practice to check if the file is really there before doing anything\nif (!fin.is_open()) {\ncerr &lt;&lt; \"Error opening file\" &lt;&lt; endl;\nreturn 1; // quits the program with an error code\n}\n// Read the contents of the file line by line\nstring line;\n// getline can target streams in general, so you can pass the file stream as a target\nwhile (getline(fin, line)) { // while the file have lines, read and store the content inside the line variable\ncout &lt;&lt; line &lt;&lt; endl; // output each string into the console\n}\n// Close the file\nfin.close();\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/07-streams/#string-stream","title":"String Stream","text":"<p>The <code>sstream</code> header describes string stream, which is a type of memory stream and is very useful to do string manipulation. For our intent, we aro going to focus 3 types of memory streams.</p> <ul> <li><code>ostringstream</code>: works just like <code>cout</code> but the content will printed to a memory region.</li> <li>it is more efficient to build a complex string in this way than <code>cout</code>ing multiple times;  </li> <li><code>istringstream</code>: works just like <code>cin</code> but it will read from a memory area.</li> <li>it is safer to read from a closed memory area than, and you ran reset the reading pointer to re-read previous elements easier than with <code>cin</code>.</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\nostringstream oss; // declare the output stream\n// print numbers from 0 to 100\nfor(int i=0; i&lt;=100; i++)\noss &lt;&lt; i &lt;&lt; ' '; // store the data into memory\ncout &lt;&lt; oss.str(); // convert the stream into a string to be printed all at once\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;sstream&gt;\nusing namespace std;\nint main() {\n// read input\nstring input;\ngetline(cin, input);\n// initialize string stream with the content from a console line\nistringstream ss(input); // declare the stream to read from\n// extract input\nstring name;\nstring course;\nstring grade;\niss &gt;&gt; name &gt;&gt; course &gt;&gt; grade;\n}\n</code></pre> <p>You can combine string stream and file stream to read a whole file and store into a single string.</p> <pre><code>#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;sstream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n// Open the file\nifstream file(\"file.txt\");\n// Check if the file is open\nif (!file.is_open()) {\ncerr &lt;&lt; \"Error opening file\" &lt;&lt; endl;\nreturn 1;\n}\n// Read the contents of the file into a stringstream\nstringstream ss;\nss &lt;&lt; file.rdbuf(); // read the whole file buffer and stores it into a string stream\n// Close the file\nfile.close();\n// Convert the stringstream into a string\nstring contents = ss.str();\ncout &lt;&lt; contents &lt;&lt; endl; // prints the whole file at once\nreturn 0;\n}\n</code></pre>"},{"location":"courses/intro/07-streams/#homework","title":"Homework","text":"<p>You have the job of creating a small program to read a file image in the format PGMA and inverse the colors as a negative image.</p> <p>You can test your code with different images if you want. You can download more images here. But here goes 2 examples:</p> <ul> <li>Sample input easy: baboon.ascii.pgm - max intensity is not 255 and don't have comments.</li> <li>Sample input harder: lena.ascii.pgm - have comments, and the max intensity is different than 255.</li> </ul> <p>You can test if your output file is correct using this tool. You can open this file via any text reader, use the online viewer, or use any app that reads pnm images.</p>"},{"location":"courses/intro/07-streams/#attention","title":"Attention:","text":"<ul> <li>To create the inverse image, you should read the file header and search for the maximum intensity. You should use this number as a base to inverse. In the Lena case, it is 245.</li> <li>You should pay attention that every line shouldn't be bigger than 70 chars;</li> <li>Pay attention that the line 2 might exists or not. And any comment found in the file should be skipped.</li> </ul> <p>The user should input the filename to be read. So you should store it into a string variable. The output filename should be the same as the input but with '.inverse' concatenated in the end. Ex.: lena.pgm becomes lena.inverse.pgm; If you find this too complicated, just concatenate with .inverse.pgm would be acceptable. ex.: lena.pgm becomes lena.pgm.inverse.pgm</p> <p>In order for your program to find the file to be read, you should provide the fullpath to the file or simply put the file in the same folder your executable is.</p> <p>HINT: In order to find comments and ignore them do something like that: <pre><code>string widthstr;\nint width;\nfin &gt;&gt; widthstr;\nif(widthstr.at(0)=='#')\ngetline(fin, widthstr); // ignore line\nelse\nwidth = stoi(widthstr); // covert string to integer\n</code></pre></p>"},{"location":"courses/intro/08-arrays/","title":"Arrays","text":"<p>An array is a collection of similar data items, stored in contiguous memory locations. The items in an array can be of any built-in data type such as int, float, char, etc. An array is defined using a syntax similar to declaring a variable, but with square brackets indicating the size of the array.</p> <p>Here's an example of declaring an array of integers with a size of 5:</p> <pre><code>int arr[5]; // declare an array of size 5 at the stack\n</code></pre> <p>The above declaration creates an array named arr of size 5, which means it can store 5 integers. The array elements are stored in contiguous memory locations, which means the next element is stored at the immediate next memory location. The first element of the array is stored at the 0<sup>th</sup> index, the second element at the 1<sup>st</sup> index, and so on up to 4. Between 0 an 4 all inclusive we have 5 elements.</p> <p>This creates an array called \"myArray\" that can hold 5 integers. The first element of the array is accessed using the index 0, and the last element is accessed using the index 4. You can initialize the array elements during declaration by providing a comma-separated list of values enclosed in braces:</p> <pre><code>int myArr[5] = {10, 20, 30, 40, 50}; // initialize the array with 5 elements\n</code></pre> <p>In this case, the first element of the array will be 10, the second element will be 20, and so on.</p> <p>You can also use loops to iterate over the elements of an array and perform operations on them. For example:</p> <pre><code>for (int i = 0; i &lt; 5; i++) { myArray[i] *= 2;\n}\n</code></pre> <p>This loop multiplies each element of the \"myArray\" by 2.</p> <p>Arrays are a useful data structure in C++ because they allow you to store and manipulate collections of data in a structured way. However, they have some limitations, such as a fixed size that cannot be changed at runtime, and the potential for buffer overflow if you try to access elements beyond the end of the array.</p>"},{"location":"courses/intro/08-arrays/#buffer-overflow","title":"Buffer overflow","text":"<p>A buffer overflow occurs when a program attempts to write more data to a fixed-size buffer than it can hold. This can happen when a program attempts to write more data to a buffer than the buffer can hold, or when a program attempts to read more data from a buffer than the buffer contains. This can happen when a program attempts to write more data to a buffer than the buffer can hold, or when a program attempts to read more data from a buffer than the buffer contains.</p> <p>A buffer overflow can be caused by a number of different factors, including:</p> <ul> <li>A program that attempts to write more data to a buffer than the buffer can hold</li> <li>A program that attempts to read more data from a buffer than the buffer contains</li> </ul> <p>Buffer overflow vulnerabilities are a common type of security vulnerability, as they can be exploited by malicious attackers to execute arbitrary code or gain unauthorized access to a system. To prevent buffer overflow vulnerabilities, it's important to carefully manage memory allocation and use bounds checking functions or techniques such as using safe C++ library functions like <code>std::vector</code> or <code>std::array</code>, and ensuring that input data is properly validated and sanitized.</p>"},{"location":"courses/intro/08-arrays/#multi-dimensional-arrays","title":"Multi-dimensional arrays","text":"<p>A multi-dimensional array is an array of arrays. For example, a 2-dimensional array is an array of arrays, where each element of the array is itself an array. A 3-dimensional array is an array of 2-dimensional arrays, where each element of the array is itself a 2-dimensional array. And so on.</p> <p>For example, to declare a two-dimensional array with 3 rows and 4 columns of integers, you would use the following code:</p> <pre><code>int arr[3][4]; // Declare a 2-dimensional array with 3 rows and 4 columns at the stack\n</code></pre> <p>You can access elements in a multidimensional array using multiple sets of square brackets. For example, to access the element at row 2 and column 3 of myArray, you would use the following code:</p> <pre><code>int element = myArray[1][2]; // Access the element at row 2 and column 3\n</code></pre> <p>In C++, you can have arrays with any number of dimensions, but keep in mind that as the number of dimensions increases, it becomes more difficult to manage and visualize the data.</p>"},{"location":"courses/intro/08-arrays/#array-dynamic-allocation","title":"Array dynamic allocation","text":"<p>In some cases, you dont know the size of the array at compile time. In this case, you can use dynamic memory allocation to allocate the array at runtime. This is done using the <code>new</code> operator, which allocates a block of memory on the heap and returns a pointer to the beginning of the block. For example, to allocate an array of 5 integers on the heap, you would use the following code:</p> <pre><code>int *arr = new int[5]; // Allocate a block of memory on the heap\n</code></pre> <p>The above code allocates a block of memory on the heap that is large enough to hold 5 integers. The <code>new</code> operator returns a pointer to the beginning of the block, which is assigned to the pointer variable <code>arr</code>. You can then use the pointer to access the elements of the array. You can access individual elements of the array using the array subscript notation:</p> <pre><code>arr[0] = 10;\narr[1] = 20;\narr[2] = 30;\narr[3] = 40;\narr[4] = 50;\n</code></pre> <p>When you are done using the array, you should free the memory using the <code>delete</code> operator. For example, to free the memory allocated to the array in the previous example, you would use the following code:</p> <pre><code>delete[] arr; // Free the memory by telling the operation system you are done with it\narr = nullptr; // Reset the pointer to null to avoid dangling pointers and other bugs\n</code></pre> <p>The <code>delete</code> operator takes a pointer to the beginning of the block of memory to free. The <code>[]</code> operator is used to indicate that the block of memory contains an array, and that the <code>delete</code> operator should free the entire array.</p>"},{"location":"courses/intro/08-arrays/#dynamic-allocation-of-multi-dimensional-arrays","title":"Dynamic allocation of multi-dimensional arrays","text":"<p>In the case of dynamically allocate memory for a multidimensional array, first you have to understand that in the same way you can have an array of arrays, you can have a pointer to a pointer. This is called a double pointer. So, if you want to allocate a 2-dimensional array dynamically, you can do it like this:</p> <pre><code>int lines, columns;\ncin &gt;&gt; lines &gt;&gt; columns;\nint **arr = new int*[lines]; // Allocate an array of pointers to pointers\nfor (int i = 0; i &lt; lines; i++) {\narr[i] = new int[columns]; // Allocate an array of integers for each pointer\n}\n// do stuff with the array\nfor (int i = 0; i &lt; lines; i++) {\ndelete[] arr[i]; // Free the memory for each array of integers\n}\ndelete[] arr; // Free the memory for the array of pointers\n</code></pre>"},{"location":"courses/intro/08-arrays/#smart-pointers-to-rescue","title":"Smart pointers to rescue","text":"<p>You probably noticed the number of bugs and vulnerabilities that can be caused by improper memory management. To help address that, C++ introduced smart pointers. The general purpose smart contract you will be mostly using is <code>shared_ptr</code> that in the end of the scope and when all references to it become 0 will automatically free the memory. The other smart pointers are <code>unique_ptr</code> and <code>weak_ptr</code> that are used in more advanced scenarios. But for now, we will focus on <code>shared_ptr</code>.</p> <p>In C++11, smart pointers were introduced to help manage memory allocation and deallocation. Smart pointers are classes that wrap a pointer to a dynamically allocated object and provide additional features such as automatic memory management. The most commonly used smart pointers are <code>std::unique_ptr</code> and <code>std::shared_ptr</code>. The <code>std::unique_ptr</code> class is a smart pointer that owns and manages another object through a pointer and disposes of that object when the <code>std::unique_ptr</code> goes out of scope. The <code>std::shared_ptr</code> class is a smart pointer that retains shared ownership of an object through a pointer. Several <code>std::shared_ptr</code> objects may own the same object. The object is destroyed and its memory deallocated when either of the following happens:</p> <ul> <li>the last remaining <code>std::shared_ptr</code> owning the object is:<ul> <li>destroyed</li> <li>is assigned another pointer via <code>operator=</code> or <code>reset()</code> </li> <li>is reset or released </li> <li>moved from</li> <li>is swapped with another <code>std::shared_ptr</code> using <code>swap()</code></li> <li>the function <code>std::shared_ptr::swap()</code> is called with the last remaining <code>std::shared_ptr</code> owning the object as an argument</li> </ul> </li> <li>the object is no longer reachable from the program (for example, when the program terminates)</li> <li>the program:<ul> <li>throws an exception that is not caught within the same thread</li> <li>calls terminating calls such as <code>std::terminate()</code>, <code>std::abort()</code>, <code>std::exit()</code>, or <code>std::quick_exit()</code></li> </ul> </li> </ul> <p>To create a dynamic array of int using shared pointers, you can use the std::shared_ptr class template. Here's an example:</p> <pre><code>#include &lt;memory&gt; // for std::shared_ptr\nstd::shared_ptr&lt;int[]&gt; arr(new int[5]);\n</code></pre> <p>This creates a shared pointer to an array of 5 integers. The <code>new int[5]</code> expression dynamically allocates memory for the array on the heap, and the shared pointer takes ownership of the memory. When the shared pointer goes out of scope, the memory is automatically freed.</p> <p>You can access individual elements of the array using the array subscript notation, just like with a regular C-style array:</p> <pre><code>arr[0] = 10;\narr[1] = 20;\narr[2] = 30;\narr[3] = 40;\narr[4] = 50;\n</code></pre> <p>To deallocate the memory, you don't need to call delete[] explicitly, because the shared pointer takes care of it automatically. When the last shared pointer that points to the array goes out of scope or is explicitly reset, the memory is deallocated automatically:</p> <pre><code>arr.reset(); // deallocates the memory and reset the shared pointer to null to avoid dangling pointers and other bugs\n</code></pre> <p>Shared pointers provide a convenient and safe way to manage dynamic memory in C++, because they automatically handle memory allocation and deallocation, and help prevent memory leaks and dangling pointers.</p> <p>Smart pointers are no silver bullet. They are not a replacement for proper memory management, but they can help you avoid common memory management bugs and vulnerabilities. For example, smart pointers can help you avoid memory leaks, dangling pointers, and double frees. They can also help you avoid buffer overflow vulnerabilities by providing bounds checking functions.</p>"},{"location":"courses/intro/08-arrays/#passing-arrays-to-functions","title":"Passing arrays to functions","text":"<p>You can pass arrays to functions in C++ in the same way that you pass any other variable to a function. For example, to pass an array to a function, you would use the following code:</p> <pre><code>void printArray(int arr[], int size) // Pass the array by reference to avoid copying the entire array\n{\nfor (int i = 0; i &lt; size; ++i)\nstd::cout &lt;&lt; arr[i] &lt;&lt; ' ';\nstd::cout &lt;&lt; '\\n';\n}\n</code></pre> <p>Alternativelly you can pass the array as a pointer:</p> <pre><code>void printArray(int *arr, int size)\n{\nfor (int i = 0; i &lt; size; ++i)\nstd::cout &lt;&lt; arr[i] &lt;&lt; ' ';\nstd::cout &lt;&lt; '\\n';\n}\n</code></pre> <p>If you want to pass a two dimension array, you can do it in multiple ways:</p> <pre><code>void printArray(int rows, int columns, int **arr); // Pass the array as a pointer of pointers\n</code></pre> <p>This approach is problematic as you can see it in depth here. It does not check for types and it is not safe. You can also pass the array as a pointer to an array:</p> <pre><code>void printArray(int rows, int arr[][10]); // if you know the number of columns and it is fixed, in this case 10 \n</code></pre> <pre><code>void printArray(int rows, int (*arr)[10]); // if you know the number of columns and it is fixed, in this case 10 \n</code></pre> <pre><code>void printArray(int arr[10][10]); // if you know the number of rows and columns and they are fixed, in this case both 10\n</code></pre> <p>There is others ways to pass arrays to functions, such as templates but they are more advanced and we will not cover them now.</p>"},{"location":"courses/intro/08-arrays/#extra-standard-template-library-stl","title":"EXTRA: Standard Template Library (STL)","text":"<p>Those are the most common data structures that you will be using in C++. But it is outside the scope of this course to cover them in depth. So we will only give entry-points for you to learn more about them.</p>"},{"location":"courses/intro/08-arrays/#arrays_1","title":"Arrays","text":"<p>If you are using fixed sized arrays, and want to be safe to avoid problems related to out of bounds, you should use the STL arrays. It is a template class that encapsulates fixed size arrays and adds protections for it. It is a safer alternative to C-style arrays. Read more about it here.</p>"},{"location":"courses/intro/08-arrays/#vectors","title":"Vectors","text":"<p>Vectors are the safest way to deal with dynamic arrays in C++, the cpp core guideline even states that you should use it whenever you can. Vector is implemented in the standard template library and provide a lot of useful functions. Read more about them here.</p>"},{"location":"courses/intro/08-arrays/#extra-curiosities","title":"Extra curiosities","text":"<p>Context on common bugs and vulnerabilities: - Weaknesses in the 2022 CWE Top 25 Most Dangerous Software Weaknesses - US Government enforces cyber security requirements - https://en.cppreference.com/w/cpp/language/array</p>"},{"location":"courses/intro/09-recursion/","title":"Recursion","text":"<p>Recursion is a method of solving problems where the solution depends on solutions to smaller instances of the same problem. It is a common technique used in computer science, and is one of the central ideas of functional programming. Let's explore recursion by looking at some examples.</p> <p>You have to be aware that recursion isn't always the best solution for a problem. Sometimes it can be more efficient to use a loop and a producer-consumer strategy instead of recursion. But, in some cases, recursion is the more elegant solution.</p> <p>When you call functions inside functions, the compiler will store the return point, value and variables on the stack, and it has limited size. Each time you call a function, it is added to the top of the stack. When the function returns, it is removed from the top of the stack. The last function to be called is the first to be returned. This is called the call stack. A common source of problems in programming is when the call stack gets too big. This is called a stack overflow. This is why you should be careful when using recursion.</p>"},{"location":"courses/intro/09-recursion/#fibonacci-numbers","title":"Fibonacci numbers","text":"<p>The Fibonacci numbers are a sequence of numbers where each number is the sum of the two numbers before it. The constraints are: the first number is 0, the second number is 1, it only run on integers and it is not negative. The sequence looks like this:</p> <pre><code>int fibonacci(int n) {\n// base case\nif (n == 0 || n == 1)\nreturn n;\nelse // recursive case\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n}\n</code></pre>"},{"location":"courses/intro/09-recursion/#factorial-numbers","title":"Factorial numbers","text":"<p>The factorial of a number is the product of all the numbers from 1 to that number. It only works for positive numbers greater than 1.</p> <pre><code>int factorial(int n) {\n// base case\nif (n &lt;= 1)\nreturn 1;\nelse // recursive case\nreturn n * factorial(n - 1);\n}\n</code></pre>"},{"location":"courses/intro/09-recursion/#divide-and-conquer","title":"Divide and Conquer","text":"<p>Divide and conquer is a method of solving problems by breaking them down into smaller subproblems. It is extensively used to reduce the complexity of some algorithms and increase readability.</p>"},{"location":"courses/intro/09-recursion/#binary-search","title":"Binary search","text":"<p>Imagine that you already have a sorted array of numbers and you want to find the location of a specific number in that array. You can use a binary search to find it. The binary search works by dividing the array in half and checking if the number you are looking for is in the first half or the second half. If it is in the first half, you repeat the process with the first half of the array. If it is in the second half, you repeat the process with the second half of the array. You keep doing this until you find the number or you know that it is not in the array.</p> <pre><code>// recursive binary search on a sorted array to return the position of a number\nint binarySearch(int arr[], int start, int end, int number) {\n// base case\nif (start &gt; end)\nreturn -1; // number not found\nelse {\n// recursive case\nint mid = (start + end) / 2;\n// return the middle if wi find the number\nif (arr[mid] == number)\nreturn mid;\n// if the number is smaller than the middle, search in left side\nelse if (arr[mid] &gt; number)\nreturn binarySearch(arr, start, mid - 1, number);\n// if the number is bigger than the middle, search in right side\nelse\nreturn binarySearch(arr, mid + 1, end, number);\n}\n}\n</code></pre> <p>Binary search plays a fundamental role in Newton's method, which is a method to find and approximate the result of complex mathematical functions such as the square root of a number. Binary-sort is extensively used in sorting algorithms such as quick sort and merge sort. </p>"},{"location":"courses/intro/09-recursion/#merge-sort","title":"Merge sort","text":"<p>Please refer to the Merge sort section in the sorting chapter.</p>"},{"location":"courses/intro/10-sorting/","title":"Sorting algorithms","text":"<p>TODO: Note for my furune self: add complete example of how to use those algorithms</p> <p>Sorting are algorithms that put elements of a list in a certain order. It is cruxial to understand the basics of sorting in order to start understanding more complex algorithms and why you have to pay attention to efficiency.</p> <p>Before going deep, please watch this video:</p> <p>SEIZURE WARNING!! </p> <p>and this one:</p> <p></p> <p>Explore the concepts interactively at visualgo.net.</p> <p>Try to answer the following questions, before continuing:</p> <ul> <li>What are the slowest sorting algorithms?</li> <li>What are the fastest sorting algorithms?</li> <li>Con you infer the difference between a stable and unstable sorting algorithm?</li> <li>What is the difference between a comparison and a non-comparison sorting algorithm?</li> <li>What would be an in-place and a non-in-place sorting algorithm?</li> <li>What is the difference between a recursive and a non-recursive sorting algorithm?</li> </ul>"},{"location":"courses/intro/10-sorting/#the-basics","title":"The basics","text":"<p>Many of the algorithms will have to swap elements from the array, vector or list. In order to do that, we will need to create a function that swaps two elements. Here is the function:</p> <pre><code>// A function to swap two elements\nvoid swap(int *xp, int *yp) {  int temp = *xp;  *xp = *yp;  *yp = temp;  }  </code></pre> <p>The <code>*</code> operator used in the function signature means that the function will receive a pointer to an integer. So it will efectivelly change the content in another scope. The <code>*</code> operator is used to dereference a pointer, which means that it will return the value stored in the memory address pointed by the pointer. Given the declaration is <code>int *xp</code>, the <code>*xp</code> will return the value stored in the memory address pointed by <code>xp</code>.</p> <p>Alternatively you could use the <code>&amp;</code> operator to pass the reference to that variable in the similar fashion, but the usage wont be requiring the <code>*</code> before the variable name as follows:</p> <pre><code>// A function to swap two elements\nvoid swap(int &amp;xp, int &amp;yp) {  int temp = xp;  xp = yp;  yp = temp;  }  </code></pre> <p>The result is the same, but the usage is different. The first one is more common in C++, while the second one is more common in C.</p>"},{"location":"courses/intro/10-sorting/#bubble-sort","title":"Bubble sort","text":"<p>Bubble sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.</p> <pre><code>// A function to implement bubble sort\nvoid bubbleSort(int arr[], int n) {  // if the array has only one element, it is already sorted\nif(n&lt;=1)\nreturn;\nint i, j;  for (i = 0; i &lt; n-1; i++)\n// Last i elements are already in place  \nfor (j = 0; j &lt; n-i-1; j++)  if (arr[j] &gt; arr[j+1])  swap(&amp;arr[j], &amp;arr[j+1]);  }  </code></pre> <p>As you can see, the algorithm is very simple, but it is not very efficient. It has a time complexity of O(n^2) and a space complexity of O(1).</p> <p>One of the drawbacks of this algorithm is the sheer amount of swaps. In the worst scenario, it does n^2 swaps, which is a lot. If your machine have slow writes, it will be very slow.</p>"},{"location":"courses/intro/10-sorting/#insertion-sort","title":"Insertion sort","text":"<p>Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands. You pick one card and insert it in the correct position in the sorted part of the list. You repeat this process until you have sorted the whole list. Here is the code:</p> <pre><code>// A function to implement insertion sort\nvoid insertionSort(int arr[], int n) {  // if the array has only one element, it is already sorted\nif(n&lt;=1)\nreturn;\nint i, key, j;  for (i = 1; i &lt; n; i++) {  key = arr[i];  j = i - 1;  /* Move elements of arr[0..i-1], that are  \n        greater than key, to one position ahead  \n        of their current position */\nwhile (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {  arr[j + 1] = arr[j];  j = j - 1;  }  arr[j + 1] = key;  }  }  </code></pre> <p>It falls in the same category of algorithms that are very simple, but not very efficient. It has a time complexity of O(n^2) and a space complexity of O(1).</p> <p>Although it have the same complexity as bubble sort, it is a little bit more efficient. It does less swaps than bubble sort, but it is still not very efficient. It will swap all numbers to the left of the current number, which is a lot of swaps.</p>"},{"location":"courses/intro/10-sorting/#selection-sort","title":"Selection sort","text":"<p>Selection sort is a simple sorting algorithm. This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list. The smallest element is selected from the unsorted array and swapped with the leftmost element, and that element becomes a part of the sorted array. This process continues moving unsorted array boundary by one element to the right. Here is the code:</p> <pre><code>// A function to implement selection sort\nvoid selectionSort(int arr[], int n) {\n// if the array has only one element, it is already sorted\nif(n&lt;=1)\nreturn;\nint i, j, min_idx;  // One by one move boundary of unsorted subarray  \nfor (i = 0; i &lt; n-1; i++) {  // Find the minimum element in unsorted array  \nmin_idx = i;  for (j = i+1; j &lt; n; j++)  if (arr[j] &lt; arr[min_idx])  min_idx = j;  // Swap the found minimum element with the first element  \nswap(&amp;arr[min_idx], &amp;arr[i]);  }  }  </code></pre> <p>It is also a simple algorithm, but it is a little bit more efficient than the previous two. It has a time complexity of O(n^2) and a space complexity of O(1).</p> <p>It does less swaps than the previous two algorithms, potentially n swaps, but it is still not very efficient. It selects for the current position, the smallest number to the right of it and swaps it with the current number. It does this for every number in the list, which fatally a lot of swaps. </p>"},{"location":"courses/intro/10-sorting/#merge-sort","title":"Merge sort","text":"<p>Merge sort is a divide and conquer algorithm. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Here is the code:</p> <pre><code>// recursive merge sort\nvoid mergeSort(int arr[], int l, int r) {  if (l &lt; r) {  // Same as (l+r)/2, but avoids overflow for  \n// large l and h  \nint m = l+(r-l)/2;  // Sort first and second halves  \nmergeSort(arr, l, m);  mergeSort(arr, m+1, r);  merge(arr, l, m, r);  }  }  // merge function\nvoid merge(int arr[], int l, int m, int r) {  int i, j, k;  int n1 = m - l + 1;  int n2 =  r - m;  // allocate memory for the sub arrays\nint *L = new int[n1];\nint *R = new int[n2];\n/* Copy data to temp arrays L[] and R[] */\nfor (i = 0; i &lt; n1; i++)  L[i] = arr[l + i];  for (j = 0; j &lt; n2; j++)  R[j] = arr[m + 1+ j];  /* Merge the temp arrays back into arr[l..r]*/\ni = 0; // Initial index of first subarray  \nj = 0; // Initial index of second subarray  \nk = l; // Initial index of merged subarray  \nwhile (i &lt; n1 &amp;&amp; j &lt; n2) {  if (L[i] &lt;= R[j]) {  arr[k] = L[i];  i++;  }  else {  arr[k] = R[j];  j++;  }  k++;  }  /* Copy the remaining elements of L[], if there are any */\nwhile (i &lt; n1) {  arr[k] = L[i];  i++;  k++;  }  /* Copy the remaining elements of R[], if there  \n    are any */\nwhile (j &lt; n2) {  arr[k] = R[j];  j++;  k++;  }\n// deallocate memory\ndelete[] L;\ndelete[] R;\n}  </code></pre> <p>It is a very efficient algorithm that needs extra memory to work. It has a time complexity of O(n*log(n)) and a space complexity of O(n). It is a very efficient algorithm, but it is not very simple. It is quite more complex than the previous algorithms. It is a divide and conquer algorithm, which means that it divides the problem in smaller problems and solves them. It divides the list in two halves, sorts them and then merges them. It does this recursively until it has a list of size 1, which is sorted. Then it merges the lists and returns the sorted list.</p>"},{"location":"courses/intro/10-sorting/#quick-sort","title":"Quick sort","text":"<p>Quick sort is a divide and conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. Here is the code:</p> <pre><code>// recursive quick sort\nvoid quickSort(int arr[], int low, int high) {  if (low &lt; high) {  /* pi is partitioning index, arr[p] is now  \n        at right place */\nint pi = partition(arr, low, high);  // Separately sort elements before  \n// partition and after partition  \nquickSort(arr, low, pi - 1);  quickSort(arr, pi + 1, high);  }  }\n// partition function\nint partition (int arr[], int low, int high) {  int pivot = arr[high]; // pivot  \nint i = (low - 1); // Index of smaller element  \nfor (int j = low; j &lt;= high- 1; j++) {  // If current element is smaller than or  \n// equal to pivot  \nif (arr[j] &lt;= pivot) {  i++; // increment index of smaller element  \nswap(&amp;arr[i], &amp;arr[j]);  }  }  swap(&amp;arr[i + 1], &amp;arr[high]);  return (i + 1);  }  </code></pre> <p>It is a very efficient algorithm that don't needs extra memory, which means it is in-place. In average, it can be as fast as mergesort with time complexity of O(n*log(n)), but in the worst case it can be as slow as O(n^2). But it is a better choice if you are not allowed to use extra memory. It is a divide and conquer algorithm, which means that it divides the problem in smaller problems and solves them. It selects a pivot and partitions the list around the pivot. It does this recursively until it has a list of size 1, which is sorted. Then it merges the lists and returns the sorted list.</p>"},{"location":"courses/intro/10-sorting/#counting-sort","title":"Counting sort","text":"<p>Counting sort is a specialized algorithm for sorting numbers. It only works well if you have a small range of numbers. It counts the number of occurrences of each number and then uses the count to place the numbers in the right position. Here is the code:</p> <pre><code>// counting sort\nvoid countingSort(int arr[], int n) {  // if the array has only one element, it is already sorted\nif(n&lt;=1)\nreturn;\nint max=arr[0];\nint min[0];\n// find the max and min number\nfor(int i=0; i&lt;n; i++) {\nif(arr[i]&gt;max) {\nmax=arr[i];\n}\nif(arr[i]&lt;min) {\nmin=arr[i];\n}\n}\n// allocate memory for the count array\nint *count = new int[max-min+1];\n// initialize the count array\nfor(int i=0; i&lt;max-min+1; i++) {\ncount[i]=0;\n}\n// count the number of occurrences of each number\nfor(int i=0; i&lt;n; i++) {\ncount[arr[i]-min]++;\n}\n// place the numbers in the right position\nint j=0;\nfor(int i=0; i&lt;max-min+1; i++) {\nwhile(count[i]&gt;0) {\narr[j]=i+min;\nj++;\ncount[i]--;\n}\n}\n// deallocate memory\ndelete[] count;\n}\n</code></pre> <p>Counting sort is a very efficient sorting algorithm which do not rely on comparisons. It has a time complexity of O(n+k) where k is the range of numbers. Space complexity is O(k) which means it is not an in-place sorting algorithm. It is a very efficient algorithm, but it is not very simple. It counts the number of occurrences of each number and then uses the count to place the numbers in the right position.</p>"},{"location":"courses/intro/10-sorting/#radix-sort","title":"Radix sort","text":"<p>Radix sort is a specialized algorithm for sorting numbers. It only works well if you have a small range of numbers. It sorts the numbers by their digits. Here is the code:</p> <pre><code>// Radix sort\nvoid radixSort(int arr[], int n) {\n// if the array has only one element, return\nif(n&lt;=1)\nreturn;\n// initialize the max number as the first number. \nint max=arr[0];\n// find the max number\nfor(int i=0; i&lt;n; i++) {\nif(arr[i]&gt;max) {\nmax=arr[i];\n}\n}\n// allocate memory for the count array\nint *count = new int[10]; // 10 digits\n// allocate memory for the output array\nint *output = new int[n];\n// do counting sort for every digit\nfor(int exp=1; max/exp&gt;0; exp*=10) {\n// initialize the count array\nfor(int i=0; i&lt;10; i++) {\ncount[i]=0;\n}\n// count the number of occurrences of each number\nfor(int i=0; i&lt;n; i++) {\ncount[(arr[i]/exp)%10]++;\n}\n// change count[i] so that count[i] now contains actual position of this digit in output[]\nfor(int i=1; i&lt;10; i++) {\ncount[i]+=count[i-1];\n}\n// build the output array\nfor(int i=n-1; i&gt;=0; i--) {\noutput[count[(arr[i]/exp)%10]-1]=arr[i];\ncount[(arr[i]/exp)%10]--;\n}\n// copy the output array to the input array\nfor(int i=0; i&lt;n; i++) {\narr[i]=output[i];\n}\n}\n}\n</code></pre> <p>Radix sort is just a counting sort that is applied to every digit. It has a time complexity of O(n*k) where k is the number of digits. </p>"},{"location":"courses/intro/10-sorting/#conclusion","title":"Conclusion","text":"<p>This is the first time we will talk about efficiency, and for now on, you will start evaluating and taking care about your algorithms' efficiency. You will learn more about efficiency in the next semester and course when we cover data structures.</p>"},{"location":"courses/intro/11-structs/","title":"Structs","text":"<p>wip</p>"},{"location":"courses/portfolio/","title":"Portfolio","text":"<p>Main resources for the course.</p>"},{"location":"courses/portfolio/#schedule","title":"Schedule","text":"Week Date Topic 1 2023/01/16 Introduction 2 2023/01/23 Case Studies 3 2023/01/30 Game Developer Portfolio Structure 4 2023/02/06 Communication &amp; Audience 5 2023/02/13 Strategy &amp; Analytics 6 2023/02/20 Demo Reels 7 2023/02/27 Frontend 8 2023/03/06 Content Management System 9 2023/03/13 BREAK 10 2023/03/20 Final Project &amp; Coding Interviews 11 2023/03/27 Hosting and Domain 12 2023/04/03 Dynamic Content &amp; Blogs 13 2023/04/10 Promoting 14 2023/04/17 Cover Letters 15 2023/04/24 Traditional CVs 16 2023/05/01 FINALS <p>https://www.champlain.edu/career-success/career-collaborative/resources-for-students/career-resources/computer-science-and-innovation</p>"},{"location":"courses/portfolio/01-introduction/","title":"Introduction","text":"<p>A game developer portfolio is a collection of materials that showcase a game developer's skills, experience, and    accomplishments. It is typically used by game developers to demonstrate their abilities to potential employers,    clients, or partners, and may include a variety of materials such as:</p> <ul> <li>A resume or CV: This should highlight your education, work experience, and skills relevant to game development.</li> <li>Examples of your work: This can include demos, prototypes, or completed games that you have developed or    contributed to. It's a good idea to include links to any online versions of your work, as well as screenshots or video trailers.</li> <li>A portfolio website: Many game developers choose to create a website specifically for their portfolio, which can    include additional information about their skills and experience, as well as links to their work.</li> <li>Blogs, articles, or other writing: If you have written about game development or related topics, you may want to    include these in your portfolio to show your knowledge and expertise.</li> <li>Testimonials or references: Including positive feedback from clients or colleagues can help to demonstrate the    quality of your work.</li> </ul> <p>Overall, a game developer portfolio should be designed to demonstrate your abilities and accomplishments in a    clear and concise way, and should be tailored to the specific needs and goals of the person or organization you    are presenting it to.</p> <p>Building a portfolio is not only about you, it is about making the life easier of the ones interested on you by  giving insights if they should hire you, follow you or anything else. In order to make people understand you, you  have to know yourself better.</p>"},{"location":"courses/portfolio/01-introduction/#who-are-you-what-you-excel-and-what-do-you-enjoy-doing","title":"Who are you, what you excel and what do you enjoy doing?","text":"<p>In your portfolio, you will have to express yourself in a way that others can understand who you are, and it can be  challenging for some. In order do help you discover who you are, what you excel, and what do you really enjoy  doing. I will be briefly vague here to point some emotional support and reasoning to help you answer the question.  If you are clear about that, please skip this entire section. Here goes a small amount of advices I wish I have  heard when I was young.</p> <p> </p> Ikigai Note <p>The above image links to a very good reference to understand the drives that you should be aware while taking decisions on your future career. Visit it.</p> <p>You are a complex being and hard to define. I know. It is hard to put yourself in a frame or box, but this process is  relevant to make the life of the others to evaluate if they want more you or not. If for some reason a person is  reading your portfolio, it means that you are ahead of the others, so you must respect their time and goals while  they are reading your content.</p> <p>What you do, do not define what you are, you can even work with something you dont love as long it is part of a bigger  plan. Given that, you have to know how to differentiate yourself from your work while respecting your  feelings. The sweet spot is when you mix who you are with what you do, and you have nice feelings about it. But this  can be hard to achieve and require maturity to mix things. If you dont have a clear understand of those aspects of  yourself, you will be subjected to be exploited by bad companies and managers.</p> <p>It is totally fine try to excel some job you are not passionate. You just have to find means to make your time  doing it as enjoyable as possible. In the end of the journey it will slowly become something you can be proud of,  and you will become a different person than the one you are now. Understanding this kind of mentality will help you  endure more and be more resilient to problems. </p> <p>Keep track of your progress towards your goal. First of all, have a clear goal, so you can build a path to it.  Otherwise, any path would sound just like any other apathetic path. Having a clear goal will make your path  shine and easy to choose. It will help you in difficult moments where you feel uncomfortable by being just a small  piece of a machinery. You will be able to act as part of machine while you need to achieve your goal as a necessary  step.</p> <p>Focus on always keep track on your evolution on your journey to excellence. Don't compare too much yourself to the  others, everyone is facing a different journey and everyone took different paths in their career that probably you  didn't have the option to chose in the past. But you cannot be uncritical either, you have to analyse your progress and  check if your current path is making you life good, you have to take a decision to change the plan or even the goal  with the new information you learned through the current path you are pursuing.</p> <p>In other point of view, you wont start your career as senior developer, so you have to build your own path. Making  mistakes is part of the process, and that is the reason you will be gradually exposed to big things. You should  accept yourself, don't push too hard, and do some basic stuff. Just accept the challenges of doing something not  fancy, but relevant to build your career.</p>"},{"location":"courses/portfolio/01-introduction/#define-and-state-your-mission-and-goal","title":"Define and state your mission and goal","text":"<ul> <li>Are you a generalist or a specialist type?</li> <li>What position you are looking for?</li> <li>What kind of person you want to become?</li> </ul>"},{"location":"courses/portfolio/01-introduction/#gather-information","title":"Gather information","text":"<p>In order to build a good portfolio, you will need to gather information about yourself and your work. In the process  you will discover yourself. It will feels like looking to a mirror for the first time.</p> <p>If you didnt published yot your projects on itchio, github, or any other platform, now it is a good moment for doing it. Pay attention that if you are going to share your code publicly, you have to avoid sharing content that do not belong to you. In other words, avoid copyright infringements. </p>"},{"location":"courses/portfolio/01-introduction/#proof-of-your-accomplishments","title":"Proof of your accomplishments","text":"<p>It is a good practice to always take screenshots, use web archive or any means to prove what you are stating. Some games got lost in time, they die or become unavailable in the long term.</p> Personal advice <p>In my case, we developed a very successful game in the past, and because of some problems with investors and judicial dispute, we had to shut down the game. But it was one of the most successful games in that year, it was nominated to Unity Awards and it was the most downloaded racing game. The only things that I can showcase now are print-screens, recorded videos and web-archive pages. So it is something that can make you survive the questions.</p>"},{"location":"courses/portfolio/01-introduction/#videos-photos-or-lightweight-web-builds","title":"Videos, photos, or lightweight web builds","text":"<p>A good way to express your work is to show it in a form of videos, or photos. If your game is small enough to be embedded, or you can strip the most relevant part of it and built for web(webgl, wasm etc), try to publish the relevant part of it online, but do not over-do it, because it will take too much time to craft a good interaction.</p>"},{"location":"courses/portfolio/01-introduction/#homework","title":"Homework","text":"<ol> <li>Define your domain name;<ul> <li>I usually search domains here and buy on wherever is cheaper, usually here </li> </ul> </li> <li>Find a good portfolio to follow;</li> <li>Design the scaffold / wireframe of what you want to show; </li> <li>Gather the data you want to show;</li> <li>Think on catchphrases and call to actions.</li> </ol>"},{"location":"courses/portfolio/02-cases/","title":"Case Study","text":""},{"location":"courses/portfolio/02-cases/#index","title":"Index","text":"<ul> <li>Activity 1</li> <li>Activity 2</li> <li>Considerations</li> <li>Evaluated Portfolios</li> </ul> <p>This class will be focused in planning, portfolio evaluation, github processes, ci/cd and in-class activities.</p>"},{"location":"courses/portfolio/02-cases/#activity-1","title":"Activity 1","text":"<p>Start setting up your Github pages. We are going to use github pages mostly for two intentions: Webpage hosting for your portfolio and Demo project hosting.</p>"},{"location":"courses/portfolio/02-cases/#webpage","title":"Webpage","text":"<p>For your webpage, you can develop something from ground up using your preferred web framework and we are going to show you how to do it, but the fastest way is to just follow any template. Here goes a bunch of open sourced developer portfolios you can fork and modify for your intent. https://github.com/topics/developer-portfolio?l=html . Try to take a look on them and check if you want to fork any of them. So in this activity you will have to fork and try to run a clone of a portfolio you like just to got into some action and discover how things work.</p> <ol> <li>Find a developer portfolio on github</li> <li>Fork it</li> <li>Clone in your machine</li> <li>Make some changes</li> <li>Build it</li> <li>Deploy it to gh-pages either via automated ci/cd or via publishing a build from a empty branch or the main one</li> </ol>"},{"location":"courses/portfolio/02-cases/#demo-reels","title":"Demo reels","text":"<p>For project demo, game, or whatever interaction you want to allow the user to do, I built some boilerplates for you. Later on, you will be able to embed those webgl/html5 builds into your portfolio, so it is a good moment for you to start doing it now. As extras, optionally you can add badges for your repo from here: https://shields.io/</p>"},{"location":"courses/portfolio/02-cases/#sdl2","title":"SDL2","text":"<p>In order to showcase your ability to build something from ground up, this repo holds a boilerplate with C++, SDL2, IMGUI, SDL2IMAGE, SDL2TTF, SDL2MIXER, CI/CD automation for automatic deployment: https://github.com/InfiniBrains/SDL2-CPM-CMake-Example</p> <ol> <li>fork it</li> <li>go to the repo settings, actions, general, in the bottom, enable workflow permission, read and write, save</li> <li>run github action at least once</li> <li>enable actions and automatic page deployment from a branch gh-pages</li> </ol>"},{"location":"courses/portfolio/02-cases/#ai-sdl2","title":"AI + SDL2","text":"<p>If you enjoy AI programming and want to test yourself, you can try forking this repo and implement what is inside the examples folder https://github.com/InfiniBrains/mobagen </p> <ol> <li>fork it</li> <li>run github action at least once</li> <li>enable actions and automatic page deployment from a branch gh-pages</li> </ol>"},{"location":"courses/portfolio/02-cases/#unity","title":"Unity","text":"<p>If you want to showcase your ability with Untiy, you can follow this boilerplate to have an automatic build set up. https://github.com/InfiniBrains/UnityBoilerplate</p> <ol> <li>Fork it </li> <li>run github action for getting an unit licence at least once</li> <li>grab the generated file, and upload it to https://license.unity3d.com/manual</li> <li>get the signed licence and copy the text content to your clipboard </li> <li>go to your repo settings, security, secrets and variables, actions and setup a new repository secret with the name 'UNITY_LICENSE' and the content from your clipboard</li> <li>go to the repo settings, actions, general, in the bottom, enable workflow permission, read and write, save</li> <li>run the main action</li> <li>enable actions and automatic page deployment from a branch gh-pages</li> <li>edit webgl template with your logo or image</li> </ol>"},{"location":"courses/portfolio/02-cases/#activity-2","title":"Activity 2","text":"<p>This class is totally up to you. Here goes what you should do in class and finish at home. The idea is for you to feel a whole process on how to create merge and pull requests to a public repo.</p> <ol> <li>Search a good portfolio published online</li> <li>use Twitter, LinkedIn, Google to search for good game developer portfolios;</li> <li>another good query on google would be \"awesome developer portfolio\", or \"curated list of developer portfolios\" try it!. Example: https://github.com/emmabostian/developer-portfolios </li> <li>You can use this time to search a good and open sourced portfolio to fork and start your own based on other. https://github.com/topics/developer-portfolio</li> <li>Fork this repo</li> <li>Create a markdown file in this folder with a meaningful name about the benchmarked repository.</li> <li>Follow this example</li> <li>The file name should be the website domain name followed by .md</li> <li>If another student is aiming to evaluate the same portfolio, just edit the file adding your evaluation to the text.</li> <li>Your file should contain:</li> <li>A summary</li> <li>The portfolio evaluated</li> <li>The date the evaluation happened</li> <li>Print-screens uploaded to image hosting services such as imgur or others</li> <li>What things you judge as good and you are aiming to follow and target</li> <li>What things you judge that needs attention and should be improved</li> <li>Why you would hire the owner of the portfolio</li> <li>General considerations</li> <li>Edit this file on github to link your work here if you want to showcase it here.</li> <li>Be Kind and constructive</li> <li>Send a push request</li> </ol>"},{"location":"courses/portfolio/02-cases/#considerations","title":"Considerations","text":"<ul> <li>The portfolios evaluated here are just opinions</li> </ul>"},{"location":"courses/portfolio/02-cases/#evaluated-portfolios","title":"Evaluated Portfolios","text":"<ul> <li>Example</li> </ul>"},{"location":"courses/portfolio/02-cases/example.com/","title":"Index","text":"<ul> <li>Assessment 1</li> <li>Assessment 2</li> </ul>"},{"location":"courses/portfolio/02-cases/example.com/#assessment-1","title":"Assessment 1","text":""},{"location":"courses/portfolio/02-cases/example.com/#summary","title":"Summary","text":"<ul> <li>The date the evaluation happened</li> <li>The portfolio evaluated</li> <li>Briefing</li> </ul>"},{"location":"courses/portfolio/02-cases/example.com/#strength","title":"Strength","text":"<p>What things you judge as good and you are aiming to follow and target. Add images as reference using print-screens uploaded to image hosting services such as imgur or others;</p>"},{"location":"courses/portfolio/02-cases/example.com/#improvements","title":"Improvements","text":"<ul> <li>What things you judge that needs attention or should be improved?</li> <li>What questions you would ask this person?</li> </ul>"},{"location":"courses/portfolio/02-cases/example.com/#best-fit","title":"Best fit","text":"<ul> <li>Why you would hire the owner of the portfolio? </li> <li>For what kind of task?</li> <li>What position?</li> <li>How do you see this person interacting with others?</li> </ul>"},{"location":"courses/portfolio/02-cases/example.com/#general-considerations","title":"General considerations","text":"<ul> <li>Just add some final consideration for the portfolio owner;</li> <li>If possible, send a message to one of its communication channels informing your assessment;</li> </ul>"},{"location":"courses/portfolio/02-cases/example.com/#assessment-2","title":"Assessment 2","text":"<p>The other student willing to do multiple assessment for the same portfolio, just create an entry in the index following the same structure and same the assessment differently in this case, we put number 2. And use the same structure on the 1.</p>"},{"location":"courses/portfolio/03-structure/","title":"Game Developer Portfolio Structure","text":"<p>Create a single page app containing most of these features listed here.</p>"},{"location":"courses/portfolio/03-structure/#head","title":"Head","text":"<p>Chose carefully what to you use as a head of your page. It is the first thing a person reads. It can be an impactful message, a headline, personal statement, background video or very limited interactive section.</p> <p>Note</p> <p>Avoid bravado. You can be bold without being naive. Let the bravado statements for when you become a senior. If you write bravados right in the begining of your portifolio and you are still a junior, you are just communicating that you will be hard to work with.  A senior developer reading your portfolio is more interested in developers eager to learn, humble, and looking for guidance so they will have a easier life hiring you.  </p>"},{"location":"courses/portfolio/03-structure/#about","title":"About","text":"<p>This is a summary obout yourself, be brief and achievement oriented. What and who you are. Contact info via social  medias. State your working status and target. If you are a narrative centred person, you can create something fancy  here, but dont over-do, less is more!</p>"},{"location":"courses/portfolio/03-structure/#showcase","title":"Showcase","text":"<ul> <li>Projects</li> <li>Ability and versatility</li> <li>Community Contributions</li> </ul> <p>You can showcase your personal work, a job you make for a client(if authorized).</p> <p>Projects</p> <p>It is a good practice to showcase only the best works you made. You might find interesting to add more than 5, but there are chances of your reader clicking exactly on the worst one and have a bad first impression of you. In your showcase section, avoid showcasing bad work. Invite some of your friends to help you select the best ones to showcase.</p> <p>Ability</p> <p>Avoid using percentage graphs to showcase your proficiency on specific tech stack or tool. The main reason is: how do you grade of your ability as 80%, 100% or 30%? Worse than that, how can the reader be sure of that? If you want to do that, it is better to apply for certificates, there are plenty on linkedin or specialized sites.</p>"},{"location":"courses/portfolio/03-structure/#achievements","title":"Achievements","text":"<ul> <li>List key achievements and skills. Dont use any kind of grading</li> <li>Education</li> <li>Testimonials or anything to prove your skills and capacity</li> </ul>"},{"location":"courses/portfolio/03-structure/#project-details","title":"Project Details","text":"<ul> <li>You should create a way to explain more about what is showcased. Ex.: redirect the user to the project description page, or open a modal</li> </ul>"},{"location":"courses/portfolio/03-structure/#blog","title":"Blog","text":"<ul> <li>Featured posts/content and call to action to read your ongoing content production</li> <li>Explain your process in designing a game or piece of software</li> <li>Explain some interesting details you learn or describe your knowledge explorations.</li> </ul>"},{"location":"courses/portfolio/03-structure/#contact","title":"Contact","text":"<p>Explicitly state what people should expect if they contact you and what they can expect from your return. Ex.: If  you aim to be a freelance, state your offer and ask for them to briefly state the job activity, time frame and the rate  they are willing to pay. If you are looking for a full-time position, the most common way is to just share your email, so they can contact you.</p> <p>Another option is to list all of your social medias, but dont overuse this. Nowadays we have a bunch of them, so if  you list all of them, there is chances, you are not active there and the link will guide the reader to a empty and  haunted house and they will not engage.</p>"},{"location":"courses/portfolio/03-structure/#homework","title":"Homework","text":"<ol> <li>[Optional]Create a wireframe draft of what you are going to do on figma, miro or any other tool you find relevant. If you already have a Portfolio page already set, try to think on how do you make it be responsive on mobile devices.</li> <li>Scaffold your project in github. Describe in the README.md what you are going to do in your demo. You might try to convince a colleague to work with you. You can do more than one demo if you want. Some examples:</li> <li>Follow some of mobagen AI examples from here https://github.com/InfiniBrains/mobagen check some of them running here https://infinibrains.github.io/mobagen/ </li> <li>Raytrace demo for cloud and Human body. ref https://www.youtube.com/watch?v=Qj_tK_mdRcA</li> <li>Networking game using the phone as a controller and your portfolio demo as the viewer. https://blockrage.pgs-soft.com/</li> <li>Catch the cat demo for AI. https://llerrah.com/cattrap.htm</li> <li>Create unity editor plugin to dynamically generate meshes via splines based on sample locations. https://www.youtube.com/watch?v=f5Q7Z2KxILE is a game with 50million downloads that used this technique to generate scenarios. Here you can watch a better explanation. https://www.youtube.com/watch?v=saAQNRSYU9k</li> <li>Embed a shader toy behind your portfolio page. https://shadertoyunofficial.wordpress.com/2018/02/17/embedding-shadertoys-in-website/</li> <li>A nice collection of fun ideas to code for your portfolio https://mrdoob.com/</li> <li>Board game simulation. Ex: chess https://www.chessprogramming.org/ or https://github.com/JuUnland/Chess/ or this https://www.youtube.com/watch?v=WKs685H6uOQ</li> <li>[Optional] Simulate a real test by creating a console based space invader in 48h. <ul> <li>Efficiently draw (print on console)</li> <li>Efficient collision check</li> </ul> </li> </ol>"},{"location":"courses/portfolio/03-structure/#most-requested-topics-to-be-covered-in-this-class","title":"Most requested topics to be covered in this class","text":"<ul> <li>13 #AI #flocking #BoardGames #MinMax #chess #procedural</li> <li>5 #gameplay</li> <li>4 #Rendering #vfx #grass #leaf #water #graphics #shader</li> <li>4 #UI #UX</li> <li>4 #networking</li> <li>4 #interview #questions</li> <li>3 #XR #VR</li> <li>3 #tools #unityeditor</li> <li>3 #backend #devops</li> <li>2 #physics</li> <li>2 #PortifolioPage #website #responsive</li> <li>2 #CV</li> <li>2 #github #githubpages</li> <li>2 #writing #narrative</li> <li>2 #itch</li> <li>1 #soundtrack #audio</li> <li>1 #LinkedIn</li> <li>1 #security</li> </ul>"},{"location":"courses/portfolio/04-communication/","title":"Communication","text":"<p>Having a well-written and organized portfolio is important for any game developer, as it can help them stand out from the competition and demonstrate their skills and experience to potential employers. A good portfolio should clearly communicate the developer's strengths and accomplishments, and should be tailored to the specific needs and expectations of the audience.</p> <p>Effective communication is crucial in building a strong game developer portfolio, as it allows the developer to clearly convey their skills and experiences to potential employers. A portfolio that is well-written and easy to understand will be more effective at convincing an employer to hire the developer, while a poorly written or poorly organized portfolio may have the opposite effect.</p>"},{"location":"courses/portfolio/04-communication/#audience","title":"Audience","text":"<p>In general your portfolio will be read by:</p> <ul> <li>Human Resources</li> <li>Software Developers</li> </ul>"},{"location":"courses/portfolio/04-communication/#human-resources","title":"Human Resources","text":"<p>If you are applying for a big tech company, chances are your submission won't be read by a tech person the first human triage. So in order to pass this first filter, you have to be generic and precise. They are often very busy evaluating multiple applications, and probably they will spend 30-60 seconds before making the decision about moving forward in the process or not. Your portfolio will need to catch their attention and communicate clearly your fit, passion and ability in a short time frame.</p>"},{"location":"courses/portfolio/04-communication/#software-developer-managers","title":"Software Developer Managers","text":"<p>In contrast with HR, developer managers probably will not be shocked with any fancy stuff(such as full page pre-loaders) you add to your portfolio, so be concise and straight to the point, because most of them already know all the contents. From all of your portfolio readers, they are one of the most critique of your job.</p> <p>In another hand, usually developers do not look for programming language fit, frameworks or tools you use. They are more interested if you will be able to learn and execute the job in a meaningful time. So try to express yourself in a way that showcase your ability to solve problems, no matter what problem is, they are mostly curious on how to solve complex problem by framing the problem in another way or how to be innovative. </p>"},{"location":"courses/portfolio/04-communication/#what-they-look-for","title":"What they look for","text":"<p>The following metrics can be evaluated by reading your portfolio, interviews or tests. The most common evaluation metrics they made are: - Position Fit     - They are going to search if your portfolio showcase experience in the same area of what they are looking for the specific position they received. Usually they will look for specific keywords for the requirements list; - Company fit     - They take count on your expressed ideas, stated goals, tone, alignment and supporting projects to evaluate your future evolution inside the company; ex. https://wa.aws.amazon.com/wat.pillars.wa-pillars.en.html  - Passion     - Passionate developers tend to express projects they are proud of. The description of the projects are mostly achievement-based. Ex.: more than X million downloads. This example showcases that you were part of something huge, and it is easily understandable.     - There is a high correlation on high performant people that they usually shine in side-projects or even hobbies. So they look for it. Ex.: Google encourages employees to devote 20% of their time to hobbies or skill-building. - Competence     - They need to evaluate if you are really able to solve the problem properly, in a meaningful time, and in a team. You have to describe which tools, tech stack and how you glue everything in order to solve the problem. Be assured you are correctly expressing yourself here, because it is one of the central part that is not taken superficially. - Innovation and Curiosity     - Innovative developers solve problems out of the box. It doesn't matter how complex the problem is, but if you solve in a innovative way, reframe it or do any magic to solve it, chances are to have good points here;     - Good companies incentives research and test new stuff. So they usually like to see your deliverables with new bleeding-edge technology tools. - Proactiveness     - Usually the more proactive developers tend to have more leadership positions. So if you want to give the readers a glimpse of your ability in this area, a good place to showcase that is in project description section. Express problems that arise and how do you manage that before it become a real problem.  - Learner     - It is good to be always tuned with the current evolution of the technology, so try to keep the education section always updated with some courses or publish blog posts about some new tech.  - Thoughtfulness - Risk management  - Thinking big</p>"},{"location":"courses/portfolio/04-communication/#homework","title":"Homework","text":"<ul> <li>Write the content for each one of your projects and all other sections of your portfolio.</li> <li>1<sup>st</sup> round of Portfolio Feedbacks. </li> <li>Research in a game company you like the resources on their hiring process. Take notes on how they hire and which positions you want to apply. Here goes some examples on how to get ready for interviews:<ul> <li>Epic: https://www.epicgames.com/site/en-US/earlycareers/career-paths</li> <li>AWS: https://aws.amazon.com/careers/how-we-hire/</li> <li>General interview questions https://www.mockquestions.com/</li> </ul> </li> <li>Top interview questions https://leetcode.com/problem-list/top-interview-questions/. Some examples: <ul> <li>https://leetcode.com/problems/two-sum/ - the most asked question</li> <li>https://leetcode.com/problems/kth-largest-element-in-an-array/ - heap</li> <li>https://leetcode.com/problems/median-of-two-sorted-arrays/</li> <li>https://leetcode.com/problems/minimum-space-wasted-from-packaging/ - bin packing, try to solve for 2d image pack for textures</li> </ul> </li> <li>Watch this video https://www.youtube.com/watch?v=Kte-t1pQQ3I and start contributing into an open source project or community</li> </ul>"},{"location":"courses/portfolio/05-strategy/","title":"Strategies to get hired","text":"<ul> <li>Portfolio</li> <li>Interviews</li> <li>Social Network</li> </ul>"},{"location":"courses/portfolio/05-strategy/#strategies-for-your-portfolio","title":"Strategies for your portfolio","text":"<p>Ask some questions for ChatGPT. Here goes a sample extracted from this prompt:</p> <p><pre><code>Create a strategy to get hired on a AAA game studio as a game programmer\n</code></pre> 1. Develop the right skills: The first step to getting hired in a AAA game studio is to develop the right skills for the job. Start by researching the job positions in the studio and look for the required skills, experience, and qualifications. Then, focus on building those skills through relevant education, training, and projects. You can also take courses, attend workshops or conferences, and create a portfolio of your work to showcase your abilities. 2. Network with industry professionals: Networking with industry professionals can help you gain exposure and insights into the game development industry. Attend industry events, join online forums, participate in game development communities, and reach out to professionals in the field to build relationships. You can also consider working on collaborative projects with other game developers to expand your network. 3. Stay up-to-date with industry trends: Keeping up with the latest trends and news in the gaming industry can help you stay ahead of the game and impress your potential employers. Read industry blogs, participate in online discussions, follow industry influencers on social media, and stay up-to-date with the latest game releases to show that you are knowledgeable and passionate about the industry. 4. Research the game studio: Before applying for a job, research the game studio to learn about their culture, values, and work environment. Look for information about their current projects, the team structure, and the company's mission statement. This will help you tailor your resume and cover letter to match the company's requirements and demonstrate that you are a good fit for the team. 5. Apply for internships: Consider applying for internships in a AAA game studio. This is an excellent opportunity to gain industry experience and build your skills. Even if the internship is unpaid, the experience and contacts you gain could be invaluable for your future career. 6. Prepare for the interview: Once you get an interview, make sure to prepare thoroughly. Research common interview questions and practice your responses. Be ready to talk about your experience, skills, and passion for game development. Also, prepare questions to ask the interviewer about the company and the job position to show your interest and enthusiasm.</p> <p><pre><code>Write a strategy to get hired as a Game Programmer in a Indie Game Studio\n</code></pre> 1. Develop a strong portfolio: Your portfolio is your calling card, so it needs to showcase your programming skills, creativity, and technical abilities. Create a portfolio that showcases your best work, including your personal game development projects, demos, and samples of your code. Highlight your experience with programming languages, software, tools, and engines that are commonly used in the indie game development industry. 2. Research indie game studios: Do your research on the indie game studios that interest you. Find out what kind of games they make, the size of the studio, the company culture, and their current job openings. Look for studios that align with your interests, values, and career goals. 3. Build a network: Building a network of like-minded professionals in the game development industry can be invaluable. Attend industry events, join online forums and communities, and engage with indie game developers on social media. This will help you stay up-to-date on the latest trends, technologies, and job openings. 4. Gain experience: Gain experience by creating your own games, participating in game jams, contributing to open-source projects, or volunteering for a non-profit game development organization. This will help you gain valuable experience and demonstrate your passion and commitment to game development. 5. Apply for internships: Many indie game studios offer internships or junior positions for game programmers. This is an excellent opportunity to gain hands-on experience, build your skills, and make contacts in the industry. Even if the internship is unpaid, the experience and contacts you gain could be invaluable for your future career. 6. Tailor your resume and cover letter: Tailor your resume and cover letter to showcase your programming skills, experience, and passion for game development. Highlight your technical skills, programming languages, software, and engines that you are proficient in. Be sure to mention any experience you have working in a team and collaborating with other game developers. 7. Prepare for the interview: Once you get an interview, make sure to prepare thoroughly. Research the indie game studio, their current projects, and their company culture. Be ready to talk about your experience, skills, and passion for game development. Also, prepare questions to ask the interviewer about the company and the job position to show your interest and enthusiasm.</p>"},{"location":"courses/portfolio/05-strategy/#analytics","title":"Analytics","text":"<ul> <li>Analytics. Recommendation: Google Analytics or Firebase Analytics;</li> <li>Heatmaps. Recommendation: smartlook;</li> </ul>"},{"location":"courses/portfolio/05-strategy/#generate-traffic","title":"Generate traffic","text":"<p>For more details see promoting section;</p>"},{"location":"courses/portfolio/05-strategy/#strategies-for-interviews","title":"Strategies for interviews","text":"<p>Train yourself in coding interviews with some materials: - Crack the Coding Interview - Interviews on AWS - Interview on Google - Course on get ready for an AWS interview</p>"},{"location":"courses/portfolio/05-strategy/#coding-resources","title":"Coding resources","text":"<ul> <li>Leetcode </li> <li>Hackerrank</li> <li>Geeksforgeeks</li> <li>Interview Questions</li> <li>Review on algorithms</li> <li>Practice code interviews</li> </ul>"},{"location":"courses/portfolio/05-strategy/#curated-videos-on-most-common-programming-interview-questions","title":"Curated videos on most common programming interview questions","text":"<ul> <li>AlgoExpert</li> </ul>"},{"location":"courses/portfolio/05-strategy/#strategies-for-social-networks","title":"Strategies for Social Networks","text":"<p>All social networks uses some type of relevance algorithm to promote your content or profile. So you have to find means to increase your relevance. Most of the algorithms measure your relevance by number of reactions(likes, follows, comments, replies...), so every time you post something, you should try to incentive the content consumers to do that.</p>"},{"location":"courses/portfolio/05-strategy/#google","title":"Google","text":"<p>If your aim is to be relevant on Google, try to check the trending words people are searching now via Google trends. </p> <p>If you follow this path, the main strategy is the common SEO optimization techniques. Here goes some guides to help you nail that.</p> <ul> <li>https://searchengineland.com/guide/what-is-seo</li> <li>https://www.wordstream.com/seo</li> <li>https://searchengineland.com/yandex-leak-learnings-392393</li> </ul> <p>If you are a prolific writer and really into it. You can try to make wikipedia refer you and raise your rate on google algorithm. You can query google <code>site:wikipedia.org [your niche keyword] + \"dead link\"</code> and check the pages that are missing references to your content, then edit the wikipedia page to refer your website or blog post to give sources for something missing. </p>"},{"location":"courses/portfolio/05-strategy/#linkedin","title":"Linkedin","text":"<ul> <li>Consistency is the key. You have to post frequently. Period. </li> <li>Follow other professionals in your field and check what they are posting to try replicate their behavior.</li> <li>Follow companies you want to work</li> <li>Connect with the hiring personal from the companies you want to work for, so when they search for people, you will be on the top suggestions.</li> </ul>"},{"location":"courses/portfolio/05-strategy/#activity","title":"Activity","text":"<p>Submit your portfolio on class and Review 2 portfolios.</p> <ol> <li>What game do you liked the most? Watch its credits on youtube. Pay attention to the job position names. Find the one you find it most suitable for you. Optionally, connect with some names on linkedin that you find on credits section. If the game dont have a credits section on youtube, just search for its name on linkedin and search for the peoples names that are working on it and the company job openings.</li> <li>Log in anonymously to the link shared in class if you want to not expose yourself(I think it is the best way to be honest and not expose yourself).</li> <li>On the second page, write your portfolio URL (or WiP repository for your demos) and the job position you want to apply so others can evaluate your work. If you dont have one yet, just evaluate the others.</li> <li>Chose 2 portfolios and prefer to evaluate portfolios with less evaluations. For each evaluation, create a new Page and add a page break using Control Enter or via interface insert pagebreak.</li> <li>In this page write as H1 text format the portfolio URL, so it can be indexed</li> <li>Evaluate at least 2 portfolios, following this Example. Be kind and constructive.</li> <li>You as the owner of the portfolio evaluated, you are allowed to delete offenses or bad words from the evaluation. If you want to interact with the content generated anonymously about your portfolio, use comments logged with your account.</li> </ol>"},{"location":"courses/portfolio/06-reels/","title":"Portfolio Reels","text":"<p>Sample Portfolio Reels</p>"},{"location":"courses/portfolio/06-reels/#demo-reels-structure","title":"Demo Reels Structure","text":"<p>Game demo reels should showcase the best features and gameplay of a game to potential players and investors. Here are some important elements that a game demo reel should include:</p> <ul> <li>Captivating Intro: The game demo reel should start with a captivating intro that hooks the audience and captures their attention.</li> <li>Gameplay Footage: The demo reel should showcase the actual gameplay footage of the game. This should include a variety of gameplay scenarios, showcasing the game mechanics and the different features of the game.</li> <li>Visuals: The game demo reel should showcase the visual quality of the game. This should include graphics, animations, lighting, and special effects.</li> <li>Audio: The game demo reel should include the game's audio elements, such as sound effects, music, and voice acting. </li> <li>User Interface: The demo reel should showcase the user interface of the game, including the menus, HUD, and other interactive elements.</li> <li>Story and Characters: If the game has a story or characters, the demo reel should include footage that showcases these elements.</li> <li>Game Modes: If the game has different game modes, the demo reel should showcase the different modes and gameplay styles.</li> <li>Multiplayer: If the game has a multiplayer mode, the demo reel should showcase the multiplayer gameplay and the features that make it unique.</li> <li>Call-to-Action: The demo reel should end with a clear call-to-action, such as a link to the game's website or social media page, or instructions on how to download the demo.</li> </ul> <p>Overall, the game demo reel should be well-paced, engaging, and give a good sense of what the game is all about.</p>"},{"location":"courses/portfolio/06-reels/#captivating-intro","title":"Captivating Intro","text":"<p>A captivating intro is an essential part of a game demo reel, as it sets the tone and captures the viewer's attention from the start. There are several ways to create a captivating intro, depending on the type of game and the intended audience. Here are a few ideas:</p> <ul> <li>Show a brief teaser: Start the demo reel with a brief teaser that highlights the game's most exciting features, such as a stunning visual effect or a heart-pumping action sequence.</li> <li>Use a dramatic voiceover: Use a dramatic voiceover to introduce the game and create a sense of anticipation. The voiceover can provide a brief overview of the game's story or setting, or simply hype up the viewer with promises of intense gameplay and unforgettable experiences.</li> <li>Introduce the developer: If the game is developed by a well-known studio or an indie developer with a strong following, introduce them in the intro. Share their mission and goals for creating the game and convey their passion and expertise in the field.</li> <li>Set the mood with music: Use music to set the mood for the demo reel. Choose a track that complements the game's theme or genre and builds up the excitement for the upcoming gameplay footage.</li> <li>Use a creative animation: Use a creative animation that visually represents the game's core concept or theme. This can help to grab the viewer's attention and give them a taste of what the game is all about.</li> </ul> <p>Whatever approach is taken, the intro should be brief and impactful, providing a sense of the game's style and tone while leaving the viewer eager to see more.</p>"},{"location":"courses/portfolio/06-reels/#gameplay-footage","title":"Gameplay Footage","text":"<p>Gameplay footage is the heart of any game demo reel, as it showcases the actual gameplay experience that the game offers. This section of the demo reel should be carefully crafted to highlight the most exciting and impressive features of the game. Here are some tips for creating engaging gameplay footage:</p> <ul> <li>Variety of gameplay scenarios: The gameplay footage should showcase a variety of gameplay scenarios to give viewers a well-rounded idea of what the game is all about. This can include different levels or environments, various weapons or abilities, and different characters or modes.</li> <li>Highlight unique features: Highlight the game's unique features and mechanics, such as special abilities, game modes, or multiplayer options. This can help to differentiate the game from other titles in the same genre.</li> <li>Showcase player choices: If the game allows players to make choices that affect the story or gameplay, showcase these choices in the demo reel. This can help to create a sense of player agency and show how the game responds to different playstyles.</li> <li>Show off impressive visuals: The gameplay footage should also showcase the game's impressive visuals, such as high-quality textures, realistic lighting and shadow effects, or dynamic particle effects. These elements can help to create a more immersive and engaging gameplay experience.</li> <li>Keep it concise: The gameplay footage should be concise and to the point, showcasing the most exciting and impressive elements of the game without becoming overly long or repetitive.</li> <li>Use high-quality footage: The footage should be high-quality and well-shot, with clear visuals and smooth frame rates. This can help to create a professional and polished demo reel that shows off the game in the best possible light.</li> </ul> <p>Overall, the gameplay footage should provide a clear and exciting look at what the game has to offer, highlighting its unique features and impressive visuals while keeping the viewer engaged and interested.</p>"},{"location":"courses/portfolio/06-reels/#visuals","title":"Visuals","text":"<p>Visuals are a critical component of any game demo reel, as they are often the first thing that potential players and investors will notice. The visuals of a game should be showcased prominently in the demo reel, demonstrating the game's graphical capabilities and the level of detail and polish that has gone into its development. Here are some key elements of visuals to consider when creating a game demo reel:</p> <ul> <li>Graphics quality: The graphics quality of the game should be highlighted in the demo reel. This can include high-quality textures, realistic lighting and shadows, dynamic particle effects, and other visual elements that make the game stand out.</li> <li>Art style: The art style of the game is also an important visual element to showcase. Whether the game has a realistic or stylized art style, it should be highlighted in the demo reel to give viewers a sense of the game's aesthetic.</li> <li>Animations: The animations of the game are an important part of the overall visual experience. The demo reel should showcase the game's character animations, object interactions, and any other animations that add to the game's visual appeal.</li> <li>Camera work: The camera work used in the demo reel can also be used to highlight the game's visual elements. Different camera angles, zooms, and cuts can be used to showcase the game's graphics and make them stand out.</li> <li>User interface: The user interface (UI) of the game is also an important visual element that should be showcased in the demo reel. The demo reel should highlight the UI design and any interactive elements, such as buttons or menus.</li> <li>Environment design: The game's environment design is another important visual element to showcase in the demo reel. Whether the game takes place in a realistic or fantastical setting, the environment design should be highlighted to give viewers a sense of the game's atmosphere.</li> </ul> <p>Overall, visuals play a crucial role in creating an immersive and engaging gameplay experience, and they should be showcased prominently in a game demo reel. By highlighting the game's graphics quality, art style, animations, camera work, user interface, and environment design, the demo reel can give viewers a clear and exciting look at what the game has to offer.</p>"},{"location":"courses/portfolio/06-reels/#audio","title":"Audio","text":"<p>Audio is an often overlooked but crucial component of any game demo reel. It can enhance the overall gameplay experience, create an immersive atmosphere, and contribute to the game's overall appeal. Here are some key elements of audio to consider when creating a game demo reel:</p> <ul> <li>Sound effects: Sound effects are an important component of any game's audio design. The demo reel should showcase the game's sound effects, such as weapon sounds, environmental effects, and character vocalizations.</li> <li>Music: The music used in the game can also be an important part of the overall audio experience. The demo reel should highlight the game's soundtrack, showcasing any memorable themes or musical cues that contribute to the game's atmosphere.</li> <li>Voice acting: If the game features voice acting, it should be highlighted in the demo reel. The demo reel should showcase any memorable voice performances and give viewers a sense of the quality of the voice acting.</li> <li>Sound design: The overall sound design of the game is another important element of the game's audio. The demo reel should showcase how the game's audio elements work together to create an immersive atmosphere, such as the use of ambient sounds or dynamic music that changes based on the player's actions.</li> <li>Audio quality: The quality of the game's audio should also be highlighted in the demo reel. The sound effects, music, and voice acting should be clear and well-produced, with high-quality mixing and mastering that enhances the overall experience.</li> </ul> <p>Overall, audio is a critical component of any game demo reel. By showcasing the game's sound effects, music, voice acting, sound design, and audio quality, the demo reel can give viewers a clear and engaging look at the game's overall audio experience.</p>"},{"location":"courses/portfolio/06-reels/#user-interface","title":"User Interface","text":"<p>The user interface (UI) is a critical component of any game, and it should be showcased prominently in a game demo reel. The UI is the primary way that players interact with the game, and it can greatly impact the overall gameplay experience. Here are some key elements of UI to consider when creating a game demo reel:</p> <ul> <li>Design: The design of the UI is an important aspect to showcase in the demo reel. The UI design should be visually appealing, easy to navigate, and intuitive for players to use. The demo reel should showcase any unique design elements, such as custom icons or animations, that contribute to the overall look and feel of the game.</li> <li>Functionality: The functionality of the UI is also an important element to showcase in the demo reel. The UI should be designed to help players easily access important information, such as health, inventory, or map data. The demo reel should showcase how the UI functions during gameplay and how it supports the overall game mechanics.</li> <li>Customizability: Some games offer customizable UI options, such as changing the size or placement of UI elements. If the game has this feature, it should be highlighted in the demo reel to showcase the flexibility of the UI design.</li> <li>Responsiveness: The responsiveness of the UI is another important aspect to showcase in the demo reel. The UI should respond quickly and smoothly to player input, and any interactive elements should have clear feedback to help players understand their actions.</li> <li>Accessibility: Finally, the accessibility of the UI is an important consideration. The demo reel should showcase how the UI supports players with different needs, such as colorblind options or font size adjustments.</li> </ul> <p>Overall, the UI is a critical component of any game, and it should be showcased prominently in a demo reel. By highlighting the design, functionality, customizability, responsiveness, and accessibility of the UI, the demo reel can give viewers a clear and engaging look at how players interact with the game and how the UI supports the overall gameplay experience.</p>"},{"location":"courses/portfolio/06-reels/#story-and-characters","title":"Story and Characters","text":"<p>The story and characters are important elements of many games, and they can greatly impact the overall experience. When creating a game demo reel, it is important to showcase the game's story and characters in a way that is engaging and gives viewers a clear sense of what to expect from the game. Here are some key elements of story and characters to consider when creating a game demo reel:</p> <ul> <li>Story: The demo reel should give viewers a sense of the game's story, including the setting, premise, and major plot points. The story should be presented in a way that is engaging and makes viewers want to learn more about the game's world and characters.</li> <li>Characters: The demo reel should also showcase the game's characters, including their personalities, motivations, and relationships with each other. Characters should be presented in a way that is relatable and makes viewers care about their journeys throughout the game.</li> <li>Dialogue: If the game features dialogue, it should be highlighted in the demo reel. The dialogue should showcase the quality of the writing and voice acting, and give viewers a sense of the characters' personalities and relationships.</li> <li>Cutscenes: Cutscenes are a great way to showcase the game's story and characters in a visually compelling way. The demo reel should include any memorable or important cutscenes that help to advance the story or develop the characters.</li> <li>Worldbuilding: Finally, the demo reel should showcase the game's worldbuilding, including any lore or backstory that helps to flesh out the game's world and characters. This can include things like environmental storytelling, item descriptions, or other worldbuilding details.</li> </ul> <p>Overall, the story and characters are important elements of many games, and they should be showcased prominently in a game demo reel. By highlighting the story, characters, dialogue, cutscenes, and worldbuilding, the demo reel can give viewers a clear and engaging look at what to expect from the game's narrative and characters.</p>"},{"location":"courses/portfolio/06-reels/#game-modes","title":"Game Modes","text":"<p>Game modes are an important aspect of many games, particularly in multiplayer titles, and they can greatly impact the overall experience. When creating a game demo reel, it is important to showcase the different game modes in a way that is engaging and gives viewers a clear sense of what to expect from each mode. Here are some key elements of game modes to consider when creating a game demo reel:</p> <ul> <li>Variety: The demo reel should showcase a variety of different game modes, particularly if the game has several unique modes to choose from. This will give viewers a sense of the game's overall variety and replayability, and help them understand how each mode contributes to the overall experience.</li> <li>Objectives: Each game mode should have clear objectives that are highlighted in the demo reel. This can include things like capturing objectives, defeating enemies, or completing tasks within a certain timeframe. The objectives should be presented in a way that is clear and easy to understand for viewers.</li> <li>Mechanics: The demo reel should showcase the different mechanics and gameplay elements that are unique to each game mode. This can include things like different weapons or abilities, unique maps or terrain, or different objectives and win conditions. By highlighting these unique mechanics, viewers can get a sense of how each mode feels and plays.</li> <li>Multiplayer: If the game has multiplayer modes, it is important to showcase how players can interact with each other within each mode. This can include things like team play, player versus player combat, or cooperative objectives.</li> <li>Replayability: Finally, the demo reel should showcase how each game mode contributes to the game's overall replayability. This can include things like unlockable rewards, leaderboards, or other features that encourage players to come back and play the game multiple times.</li> </ul> <p>Overall, game modes are an important aspect of many games, particularly in multiplayer titles, and they should be showcased prominently in a game demo reel. By highlighting the variety, objectives, mechanics, multiplayer elements, and replayability of each mode, the demo reel can give viewers a clear and engaging look at what to expect from each game mode and how it contributes to the overall experience.</p>"},{"location":"courses/portfolio/06-reels/#multiplayer","title":"Multiplayer","text":"<p>Multiplayer is an important aspect of many games, particularly in online multiplayer games, and it can greatly impact the overall experience. When creating a game demo reel, it is important to showcase the multiplayer aspects in a way that is engaging and gives viewers a clear sense of what to expect from the multiplayer modes. Here are some key elements of multiplayer to consider when creating a game demo reel:</p> <ul> <li>Modes: The demo reel should showcase the different multiplayer modes that are available in the game. This can include things like team-based modes, objective-based modes, and free-for-all modes. The demo reel should highlight how each mode plays and what the objectives are.</li> <li>Player Count: The demo reel should also showcase the player count for each mode. This can include things like 1v1, 2v2, 4v4, or larger player counts for massive multiplayer games. The player count is an important factor in determining the pacing and flow of the game, and should be highlighted in the demo reel.</li> <li>Matchmaking: If the game features matchmaking, it is important to showcase how the matchmaking system works and how players are paired with opponents of similar skill levels. This can include things like player ranking systems or other matchmaking algorithms that help to ensure fair matches.</li> <li>Progression: The demo reel should also highlight any progression systems that are available in the multiplayer modes. This can include things like unlocking new weapons or abilities as players progress through the game, or other rewards for completing objectives or winning matches.</li> <li>Social Features: Finally, the demo reel should showcase any social features that are available in the multiplayer modes. This can include things like chat systems, friend lists, or the ability to form clans or teams with other players.</li> </ul> <p>Overall, multiplayer is an important aspect of many games, particularly in online multiplayer games, and it should be showcased prominently in a game demo reel. By highlighting the different modes, player count, matchmaking, progression, and social features of the game's multiplayer modes, the demo reel can give viewers a clear and engaging look at what to expect from the multiplayer experience.</p>"},{"location":"courses/portfolio/06-reels/#call-to-action","title":"Call to Action","text":"<p>The Call-to-Action (CTA) is an important element of any game demo reel because it prompts viewers to take action after watching the video. The CTA can be in the form of a request or suggestion that encourages viewers to do something related to the game, such as signing up for a mailing list, pre-ordering the game, or visiting the game's website. Here are some key elements to consider when including a Call-to-Action in a game demo reel:</p> <ul> <li>Clarity: The CTA should be clear and specific, so that viewers know exactly what action they are being asked to take. This can include things like \"pre-order now\" or \"sign up for updates\", and should be prominently displayed at the end of the video.</li> <li>Relevance: The CTA should be relevant to the content of the video, and should relate directly to the game being showcased. For example, if the demo reel is showcasing a new game trailer, the CTA could be to pre-order the game.</li> <li>Timing: The CTA should be timed appropriately within the video, so that it appears at the end and is not too distracting during the main content of the video.</li> <li>Design: The design of the CTA should be visually appealing and eye-catching, using bold fonts and contrasting colors to draw attention to it.</li> <li>Placement: The CTA should be placed in a prominent location within the video, such as at the end or in a lower third graphic.</li> </ul> <p>Overall, the Call-to-Action is an important element of any game demo reel because it prompts viewers to take action after watching the video. By including a clear, relevant, and well-designed CTA at the end of the video, game developers can encourage viewers to take action and engage with the game in meaningful ways.</p>"},{"location":"courses/portfolio/06-reels/#specifications","title":"Specifications","text":"<p>Specifications for the Demo Reels: </p> <p>Video Specifications:</p> <ul> <li>Size: 1920x1080 (16:9)</li> <li>Format: saved as <code>.mp4</code></li> <li>Length: </li> <li>Game Art = 90 seconds.</li> <li>Game Design, Game Production Management, Game Programming, Game Sound Design = 60 seconds.</li> <li>No audio with lyrics</li> <li>No X-rated content</li> <li>Use audio that won't get removed from Vimeo (where we store the files) because of copyright infringement. </li> </ul>"},{"location":"courses/portfolio/06-reels/#homework","title":"Homework","text":"<p>Watch some videos from Sample Portfolio Reels and create a script detailing what you are going to present yourself. Start creating the timeline of feelings and you are going to present at each time.</p>"},{"location":"courses/portfolio/07-hosting/","title":"Hosting","text":"<p>There are many hosting options and solutions to match each need. Lets cover some options here.</p>"},{"location":"courses/portfolio/07-hosting/#options-low-code","title":"Options low code","text":"<ul> <li>Google sites - My preference</li> </ul> <p>Other notable options: - Godaddy - Wordpress - Wix - Squarespace</p> <p>The problem with those are they require payments to be fully functional, so if you want to go deep and have mor freedom, we are going to cover other options.</p>"},{"location":"courses/portfolio/07-hosting/#static-html-with-static-data","title":"Static HTML with Static Data","text":"<p>If what you want to serve is static hosting, your content is only frontend and do not require backend, you can use  github pages, google firebase, S3 bucket hosting or many others. This is the easiest approach.  - In this scenario you will be able to store only pre-generated html and static files; - This is useful even if you use blogs that changes rarely, you would have to redeploy your page for every change.</p>"},{"location":"courses/portfolio/07-hosting/#static-html-with-dynamic-data","title":"Static HTML with Dynamic Data","text":"<p>If your html is static and need backend services that are rarely called, you can go with cloud functions, my  suggestions here are google cloud run and aws amplify or even firebase functions. If you use nextjs website, check  vercel or netlify hosting services.  - The deploys are easy; - It can be very expensive if you hit high traffic, but it will remain free if you dont hit the free tiers; - You will have to pay attention to your database management;</p>"},{"location":"courses/portfolio/07-hosting/#dynamic-html-with-dynamic-data","title":"Dynamic HTML with Dynamic Data","text":"<p>If your website generate content dynamically such as Wordpress blogs or any custom made combination with next or  anything. - There is many \"cheap hosting\" solutions that are mostly bad performant(it can reach more than 10s to answer a    request). You have to avoid them to make your user enjoy the visit; - Management can go as hard as possible, but the results can be awesome; - It can be really expensive;</p>"},{"location":"courses/portfolio/07-hosting/#cdn-and-dns-management","title":"CDN and DNS Management","text":"<p>I highly recommend you to use Cloudflare as you DNS nameserver, so you can cache your website results for faster loading. But you can use your own nameserver provider by your domain name registrar.</p> <p>DNS stands for Domain Name System, which is a system that translates domain names into IP addresses. When you type a domain name into your web browser, such as \"www.example.com,\" your computer sends a request to a DNS server to resolve the domain name into an IP address, such as \"192.0.2.1.\" The IP address is then used to establish a connection with the web server that hosts the website you are trying to access.</p> <p>DNS plays a crucial role in hosting because it enables users to access websites using domain names instead of IP addresses. This makes it easier for users to remember and find websites. DNS also allows websites to change servers or IP addresses without affecting the user experience, as long as the DNS records are updated properly.</p> <p>In hosting, DNS is important because it determines which server is responsible for hosting a particular website. DNS records can be configured to point to different servers depending on factors such as geographic location, server load, and failover. Hosting providers typically offer DNS management tools to help users configure and manage their DNS records.</p>"},{"location":"courses/portfolio/07-hosting/#homework","title":"Homework","text":"<p>The goal is to have as website up and running for your portfolio.</p> <p>Here goes my preferable way for hosting anything. With that you can host microservices, game services, serve API, static and dynamic websites and much more. It can be tricky but lets setup it now.</p> <ul> <li>Oracle cloud - Free forever - Virtual Machine with 4vCPU, 24GB ram, 200GB storage. https://www.youtube.com/watch?v=NKc3k7xceT8 watch up to 5:38 time</li> <li>Coolify - Your private Software as a Service (SAAS) manager - https://youtu.be/Jg6SWqyvYys?t=125 starts from minute 2:00</li> <li>CI/CD - to your remote machine https://www.youtube.com/watch?v=Uj7F3hdgmEo</li> <li>Cloudflare DNS - set your domain to point to your DNS - https://www.youtube.com/watch?v=XQKkb84EjNQ </li> <li>Install Wordpress via coolify interface(new resource, new service) and use your own DNS. Or host your page statically https://www.youtube.com/watch?v=CfdPyASUSkI&amp;</li> </ul> <p>Talk with me if you dont have a domain and want to use my infrastructure temporarily.</p> <p>I am assuming you wont have a huge traffic, but you have a complex combination of services. In the complex cases and if you want to make your life easier and cheaper,my suggestion for hosting would be oracle cloud with arm cpu.  They offer for free a virtual machine with 200gb storage, 4vcpus, 24gb ram for free at this date of 2022/12  tutorial. In this scenario, I recommend using https://coolify.io/ as  your deployment management system, just pay attention that this machine is running in an arm cpu. With this  combination, you can manage everything easily in one place for free. This is not ideal, because you wont have  backups, but it is good enough for most scenarios.</p> <p>If you have plenty of money or your website have high traffic, I recommend you to use Kubernetes to orchestrate  every microservice.</p>"},{"location":"courses/portfolio/08-cms/","title":"Content Management System","text":""},{"location":"courses/portfolio/08-cms/#play-with-chatgpt","title":"Play with chatgpt","text":"<p>In order to train yourself for a game position try some prompts similar to this one. <pre><code>Act as technical recruiter for a AAA game studio. You are going to interview me by asking me questions relevant for an entry level position as \"unreal gameplay developer\". Skills required are: Unreal Egine, Data structures, Algorithms, VR and Rendering pipelines. \nYou are going to ask me a question when I prompt \"ask\".\nMy answer to your question will start with \"response\".\nOn each response I give to your question, you will provide me 5 bullets: SCORE: from 0 to 100 points to evaluate if I answered it well or not; EXPLANATION: why you gave me that score; RATIONALE: explain what a typical recruiter is measuring with the question previously asked; ADVISE: to improve for answer to score 100 answer; NEXT: question. \nDo you understand? Dont ask anything now.\n</code></pre></p>"},{"location":"courses/portfolio/09-get-ready/","title":"Final project","text":"<p>Your portfolio should be a hosted webpage and a open repository on github.</p> <p>You should follow a portfolio structure, to build a website and host it publicly. It should have a nice style, a good communication is the key to execute and analyse your strategy in order to capture insights. You can optionally increment your portfolio via dynamic content such as blogs or whatever you find relevant. Another extra step would be to create a generic cover letter to express your intentions and goals more personally. Note that some game companies still require CVs To boost your visualization, you can promote.</p> <p>Minimum steps: 1. Have a domain or at least a meaningful github username/organization;  2. Create a github repository;  3. Push your frontend to the repo; 4. Enable github pages;  5. Create a CI/CD to build and deploy to gh pages;  6. Point your domain to gh-pages if you have one;</p> <p>It is expected to have something to showcase, so it is expected to have at least 3 projects to showcase. It is preferable to showcase something that could be testable(webgl builds) or watchable in a lightweight manner.</p> <p>If you are willing to showcase your ability in Unity, I recommend you to try GameCI and github pages. If you want to showcase your game engine abilities with C++, I recommend you using CMake, SDL2 and emscripten to build and deploy  for github pages.</p> <p>If you want to start something from scratch you can use this repo to start have a SDL2 project with all libraries already set. It builds and publish a Github page via Github actions automatically,  you can check it running here. It features CMake tooling, IMGUI for debug interfaces, SDL2, SDL2_ttf, SDL_image, SDL_mixer, </p>"},{"location":"courses/portfolio/09-get-ready/#2023","title":"2023","text":"<p>Here goes a list of portfolios</p>"},{"location":"courses/portfolio/09-get-ready/common-intenterview-questions/","title":"Common interview questions","text":"<p>Resources: - https://debbie.codes/blog/interviewing-with-the-big-tech-companies/</p>"},{"location":"courses/portfolio/10-frontend/","title":"Frontend for your portfolio","text":"<p>Here goes a curated templates for a quick start: - https://github.com/techfolios/template - the easiest one - https://github.com/rammcodes/Dopefolio - straight to the point developer portfolio - https://github.com/ashutosh1919/masterPortfolio - animated with a strong opening - https://smaranjitghose.github.io/awesome-portfolio-websites a good compilation on how to build and deploy your portfolio with a good pre-made template</p> <p>But for this class, we are going to follow this template, sofork this boilerplate if you want a more robust webapp experience.</p>"},{"location":"courses/portfolio/10-frontend/#frontend-frameworks","title":"Frontend frameworks","text":"<p>There are many frontend frameworks floating around, but in order to speed up your learning curve on how to deploy a fully customized webpage, I am going to use this combination of technologies:</p> <ul> <li>React for building website;</li> <li>Vite for tooling;</li> <li>Tailwindcss for styling;</li> </ul> <p>Some examples with this stack:</p> <ul> <li>https://reactjsexample.com/a-portfolio-page-using-react-js-and-tailwind-css/</li> <li>https://github.com/InfiniBrains/reactjs-vite-tailwindcss-boilerplate</li> </ul> <p>Watch this video to get a fast entry to this stack Here goes an introductory video about this combination.</p>"},{"location":"courses/portfolio/12-promoting/","title":"How to promote yourself and your work","text":"<p>For most of us, game developers, the most important thing is to make games. But, in order to make games, we need to promote ourselves and our work. In this section, we will learn how to do that.</p>"},{"location":"courses/portfolio/12-promoting/#defining-the-target-to-be-promoted","title":"Defining the target to be promoted","text":"<p>Before we start promoting, we need to define what we want to promote. The main difference between promoting ourselves or our work is the tone, the message and the medium being promoted. So we can build a successful strategy.</p> <p>In ether path you chose, consider the following questions:</p> <ul> <li>What is the target audience?</li> <li>What is the target platform?</li> <li>What is the target medium?</li> <li>What is the target message and content?</li> <li>What is the target call to action?</li> <li>What is the target result?</li> <li>How to measure the success?</li> <li>How to improve the promotion?</li> </ul>"},{"location":"courses/portfolio/12-promoting/#defining-the-audience","title":"Defining the Audience","text":"<p>Before creating and running a promotion campaigns, we need to define the audience. The audience is the group of people we want to reach with our promotion and it can defined by the following:</p> <ul> <li>Recruiters, HR, and hiring managers;</li> <li>Other game developers, especially those who are in the same field as you;</li> <li>Game players;</li> <li>Journalists, writers and critics;</li> <li>Investors;</li> <li>Communities;</li> </ul>"},{"location":"courses/portfolio/12-promoting/#about-platforms","title":"About Platforms","text":"<p>To reach specific audiences, we need to be in the same platform they are. For example: - Game players: Steam, Twitch, YouTube, itchio, GameJolt, Discord; - Journalists: Twitter, LinkedIn; - Investors: AngelList, Ycombinator, LinkedIn, Crunchbase; - Communities: Reddit, Discord, Facebook, Twitter; - Recruiters: mostly Linkedin.</p> <p>Social media is a great way to promote yourself as a game developer. You can use it to share your work, your thoughts, your ideas, and your opinions. You can also use it to connect with other developers and learn from them.</p> <p>Here goes my opinion about the most important platforms:</p> <ul> <li>Twitter: it is the best and easy way to communicate with anyone in the world. The distance between to reach anyone is zero. And it has an awesome tagging structure. It is a great way to share your thoughts and ideas and ask for feedbacks. It is a great way to connect with other developers and learn from them. You can also use it to share your work and promote your games.</li> <li>LinkedIn: It is a great way to connect with recruiters and hiring managers. Usually you will see other developers publishing their thoughts and ideas, so try to post relevant comments on their publications to get noticed and improve your visibility.</li> <li>Facebook: It is mostly a general purpose social media. You can use it to connect with your friends and family, and collect feedbacks for your content. It is a great way to promote your finished games.</li> <li>Instagram and Tiktok: Are more focused in fast, small and visual content. You can use it to promote your games and your work, but it is not the best way to share your thoughts and ideas.</li> <li>Reddit: This one is the best for collecting feedbacks from other developers about your content, but the reach is limited.</li> <li>Discord: The best tool be in touch with communities, you can build your own community for your game and be in direct contact with yours consumers. Another good use is to be in direct contact with other developers and learn from them.</li> <li>YouTube and Twitch: The best way to share your work and promote your games.</li> <li>Medium and Blogs in general: The best way to share your thoughts and ideas and ask for feedbacks. You can use it in conjunction with other platforms to catch the general attention and bring them to your content. </li> </ul>"},{"location":"courses/portfolio/12-promoting/#mediums","title":"Mediums","text":"<p>The mediums are: Social media posts, Blog posts, Email, Podcasts, Videos, Events, Conferences, Meetups, Workshops, Webinars, Webcasts, and more.</p> <p>For each type of medium, we need to plan the content, the frequency, and the duration. We have very nice tools to help us with that, like Buffer, Hootsuite and many others.</p>"},{"location":"courses/portfolio/12-promoting/#message-and-tone","title":"Message and tone","text":"<p>The message is the main idea we want to communicate. The tone is the way we want to communicate it. You have to match the tone with the message in the given platform to reach the right audience. So plan ahead how you want to communicate your message and what tone you want to use. </p> <p>When planning the message, it is good to plan the emotions we want to trigger in the audience. For example, if we want to promote our game, we can use the following emotions: Excitement, Joy, Curiosity, and Fun. If we want to promote yourself by doing something interesting, you can use the following emotions: Curiosity, Fun, Surprise and Pride.</p>"},{"location":"courses/portfolio/12-promoting/#call-to-action","title":"Call to action","text":"<p>The call to action is the action we want your audience to take. It can be: Download the game, Read my Resume, be part of by community, Take a look on my Repository, Buy the game, Play the game, Follow me, Subscribe, Share, Like, Comment, and more.</p>"},{"location":"courses/portfolio/12-promoting/#results","title":"Results","text":"<p>Whatever is your goal, you need to define the results you want to achieve so you should track and measure your progress. You can use tools like Google Analytics mostly for web content, Google Firebase for apps and games and many other. </p> <p>Here some ideas of results you can track: Number of downloads, page views, number of people reaching you, number of followers, number of subscribers, number of likes, number of comments, number of shares, number of retweets, number of reposts and more.</p>"},{"location":"courses/portfolio/12-promoting/#improving-the-promotion","title":"Improving the promotion","text":"<p>If you really want to go deep in this rabbit hole, I highly recommend you to create performance measurements such as KPI dashboard to track your progress and improve your promotion. You can use tools like Google Data Studio or Tableau. With the KPI dashboard, you can track your progress and improve your promotion. You can also use it to track your competitors and learn from them.</p> <p>Another good strategy is to A/B test your promotion. You can use tools like Google Optimize to create different versions of your promotion and test which one is the best. You can also use it to test different messages, tones, and call to actions. I cannot stress enough how important it is to test your promotion, the most successful companies in the world do it. Zynga even quoted once \"We are not in the business of making games, we are in the business of testing games\" and \"We are a data warehouse maskerated as a game company\". So being data-driven and customer-centric is the key to success.</p>"},{"location":"courses/portfolio/12-promoting/#homework","title":"Homework","text":"<ul> <li>Create a promotion strategy for yourself and your work.</li> <li>What would be your first content and medium to promote?</li> <li>What is the message and the tone?</li> <li>Define your call to action.</li> <li>How do you measure your results?</li> <li>How would you plan to improve your promotion?</li> </ul>"},{"location":"courses/portfolio/12-promoting/#conclusion","title":"Conclusion","text":"<p>I hope you enjoyed this content. If you have any questions, please create an issue in this repository. If you want to contribute, please create a pull request. If you want to support me, please share this content with your friends and colleagues. If you want to support me financially, please consider buying me a coffee or a very fancy wine.</p>"},{"location":"courses/portfolio/13-cover-letter/","title":"How to write an Awesome Cover Letter","text":""},{"location":"courses/portfolio/13-cover-letter/#what-is-a-cover-letter","title":"What is a cover letter?","text":"<p>A cover letter is a document that is sent together with your resume. It is a way to introduce yourself to the company, explain why you're applying for the job, and why you're a good fit for the position. You should also explain why you're interested in the company, and why you want to work for them.</p> <p>Nowadays writing a Cover Letter seems to be a lost art. Most of the time, people just send their resume and that's it. But, if you want to stand out from the crowd, you should write a cover letter. </p> <p>In a cover letter you can be more personal to sell yourself more effectively. The core of it is to link your skills and history to what they do and need. Now lets see how to write a cover letter.</p>"},{"location":"courses/portfolio/13-cover-letter/#strategies-to-write-a-cover-letter","title":"Strategies to write a cover letter","text":"<p>There are many strategies to write a cover letter. But the main idea is to be personal and try to sell yourself more effectively. Here are some strategies to write a cover letter:</p> <ul> <li>Be clear, concise and specific. You should try to be clear and try to sell yourself more effectively. Don't waste their time with long and boring paragraphs. You can do that by linking your skills and history to what they do and need. You can also try to show your personality and your passion for the job;</li> <li>Be personal, enthusiastic and professional: You should try to be personal setting the best tone that matches your style and the company, just don't exaggerate. You can also try to show your personality and your passion for the job. But, you should also be professional and try to be polite and respectful. If you're unsure about the company culture, you can do that by using a formal language and a professional tone;</li> </ul>"},{"location":"courses/portfolio/13-cover-letter/#knowing-your-audience","title":"Knowing your audience","text":"<p>Usually, game companies are interested in people who are passionate about games. But there are some core differences between what profiles AAA game studios and Indie Studios seek for. AAA usually follow the path of the specialist, while Indie Studios usually, the generalist. So try to match this style of writing in your cover letter.</p> <p>Another relevant aspect is the company culture. You should try to match the tone of your cover letter to the company culture. If you're unsure about the company culture, you can do that by using a formal language and a professional tone. Or try to connect with some employees of the company and ask them about the company culture.</p> <p>Research about the company. Try to find out what they do, what they are looking for, and what they are interested in. You can do that by reading their website, their blog, and their social media. They tend to prefer people that have culture, passion and goals aligned with theirs. So try to show that you are passionate about their products and their goals.</p> <p>Play their games, and use their products. An awesome icebreaker can be yourself telling about some funny bug or how you enjoyed the game connecting it to your life. It would be awesome if you can show that you are a fan of their products to the point to even create mods or fan art.</p>"},{"location":"courses/portfolio/13-cover-letter/#write-interesting-content","title":"Write interesting content","text":"<p>You should try to write memorable sentences to maintain your reader engaged. One strategy is to start the paragraphs with a short and powerful sentence that summarizes the the topic you are about to write. Arguably, you can also try to use a powerful quote to start your cover letter.</p> <p>Your first sentence plays a huge role in your cover letter, it should be meaningful to you and to the reader. Chances are, they wont be reading the whole cover letter, so you should try to make the first sentence as interesting as possible. Try to be catchy and try to make them want to read more, but take care not to exaggerate.</p> <p>Sometimes your content is really relevant to you but it might not be that relevant to the company or the job. Sometimes we get too excited and we want to tell everything about ourselves and how passionate we are, by try telling all the things you ever did. But you should try to be clear and concise. Just add some breadcrumbs for the reader ask you in the interview about the things you didn't mention in the cover letter.</p>"},{"location":"courses/portfolio/13-cover-letter/#strengths","title":"Strengths","text":"<p>You should try to highlight your strengths. You can do that by using a list of your skills and achievements. They will try to extrapolate the value you brought to the previous companies you worked for to themselves. So try show that you are a good fit for the job by giving success stories about your acchievents. Some examples:</p> <ul> <li>AAA centred: I published a game on Steam with 100k downloads while a student. I acted as the main developer and tech lead, responsible for creating tools for level designers and AI system for the game. Besides that, I played a fundamental role to cut the scope of the game to make it possible to be released on time and consequently the sanity of the team;</li> <li>Indie: I am fearless. I am not afraid to fail or take risks. This behavior pressures me to have a good plan and to be prepared for the worst. Once we tried a very ambitious feature that we thought would be awesome, we tracked the adoption of it, just to discover that nobody used it. We learned from it and we tried again with a smaller scope and it worked. We released the game on time and we were happy with the result;</li> </ul> <p>Pay attention that some companies might not like to see that you are a risk taker. So try to be careful with that, and ask some employees of the company and ask them about the company culture.</p>"},{"location":"courses/portfolio/13-cover-letter/#closure","title":"Closure","text":"<p>You should try to close your cover letter with summary, thank them for their consideration and time, and add a call to action. You can also try to add a call to action to connect with you on social media or to visit your website, or just say that you are in hopes to talk with them in person soon.</p>"},{"location":"courses/portfolio/13-cover-letter/#create-a-template","title":"Create a Template","text":"<p>You should try to create a template for your cover letter. A way of doing it is to add replaceable tags for the company name, the job title, and the date. Try to mark those tags in some colorful way, so you can easily find them and replace them. You can also try to add some comments to help you remember what to write in each tag.</p> <p>Another strategy to templating your cover letter is to create one template for every type of company. For example, you can create a template for AAA game studios, another for Indie game studios, and another for game companies. You can also create a template for each type of job. For example, you can create a template for a game designer, another for a gameplay developer, and another for a UI/frontend developer.</p> <p>But if you pursue this path, you have to pay attention to the examples and products/games that you use in your cover letter. You will have to change them to match the company you are applying for.</p>"},{"location":"courses/portfolio/13-cover-letter/#homework","title":"Homework","text":"<p>Write a Cover Letter for a game company. </p>"},{"location":"courses/tools/git/","title":"Try Git","text":"<p>This document started as a copy from  this Source</p> <p>Here is a helpful three-part tutorial:</p> <ol> <li>Read About Version Control &amp; the excellent Intro to Git</li> <li>Install Git for the command line. See the information below.</li> <li>Do the Try Git interactive tutorial. It basically runs you through using Git on the command line and with Github.</li> </ol> <p>This information below contains recommended resources for learning Git and Github, which we will use this semester to store, manage and share our projects. </p> <p></p> <p>GitHub is a web-based hosting service for software development projects that use the Git revision control system. GitHub offers free accounts for open source projects. As of May 2011, GitHub was the most popular open source code repository site. The site provides social networking functionality such as feeds, followers and the network graph to display how developers work on their versions of a repository. [Wikipedia] </p> Installing Git <p>Mac OSX</p> <ul> <li>Git can be installed in Xcode via installing the Command Line Tools at Preferences-&gt;Downloads-&gt;Components</li> <li>You can also install Git via the download from the git website or through package management tools such as Homebrew and Macports</li> </ul> <p>Windows</p> <ul> <li>Install Git for Windows which includes a Unix-like Bash terminal environment that matches the commands in the Try Git tutorial.</li> <li>If you're familiar with the Win/DOS Command shell but are new to Bash, check out this DOS - Bash command comparison</li> </ul> <p>Linux</p> <ul> <li>Install git through your distro's package management system</li> </ul> <p>Configure Git</p> <ul> <li>Set you username and email address (only need to do this once).</li> <li> <pre><code>$ git config --global user.name \"YOUR_FULL_NAME\"\n$ git config --global user.email \"YOUR_EMAIL_ADDRESS\"</code></pre> </li> <li>Turn on git colors with makes reading status and diffs much easier (only need to do this once). You shouldn't need to do this if you're using the Git Bash installed by Git for Windows.</li> <li> <pre><code>$ git config --global color.ui true</code></pre> </li> </ul> Useful Command Line Commands <p>The following are pulled form the excellent Introduction to Git. Bash/Shell A small list of the bread and butter Bash/Shell/Terminal commands. Some of these commands  respond to the\"-h\" or  \"--help\" options which print out a small usage reference. Many of the simple commands (ls, cp, mv) don't respond to \"--help\" but will simply print out a usage line when they don't understand the given arguments.</p> <pre><code>$ ls --help</code></pre> <p>Also, most have manual pages which can be reached by using the \"man\" command and then the program name. Here's how to open the manual page for ls:</p> <pre><code>$ man ls</code></pre> <p>Use the UP &amp; DOWN arrow keys to scroll and 'q' to quit.</p> <ul> <li>ls - list contents of the current dir</li> <li>cd - change directory; ~/ refers to your home dir, . refers to the current dir, ../ refers to one directory up, ../../ refers to 2 dirs up, etc</li> <li>pwd - prints full path to the current dir (where we are)</li> <li>mkdir - make a new dir</li> <li>touch - create an empty file or update the timestamp on an existing file</li> <li>mv - move a file or dir</li> <li>cp - copy a file or folder; the -R option copies files &amp; folders recursively (need to copy the entire contents of a given folder if it als contains folders)</li> </ul> <p>Git This is just a small list of git commands. See the references below for more detailed info. All of the git commands respond to \"--help\".</p> <ul> <li>git init - initialize a dir for git source control management</li> <li>git clone - clone a git repository from another location (another git controlled folder, somewhere online, GIthub, etc)</li> <li>git checkout - switch to a branch, commit, or tag; the base location is the master branch</li> <li>git status - print status of the staging area (modified files, current branch, etc)</li> <li>git add - add a file or folder to the staging area, responds to wildcards like *.txt and . which refers to all modified files (careful with this one!)</li> <li>git rm - remove a file or folder form the staging area, removing a modfied file may require the -f argument to force it, -r adds files recursively (useful within folders). </li> <li>git mv - move or rename files or folders, only works for files currently managed by git (aka added previously)</li> <li>git commit -m \"some message\" - commit the current staging area (adds, modifications, removals); the -m option specifies the log message</li> <li>git branch some_branch - creates a branch called \"some_branch\"; don;t forget to switch to it using git checkout!</li> <li>git merge some_branch - merge a branch into the current branch, in this case merge \"some_branch\" with \"master\"</li> </ul> References <p>Books &amp; Tutorials</p> <ul> <li>Try Git online course by Code School + Github. (thx @codeSchool)</li> <li>Pro Git book by Scott Chacon (free PDF). (thx @hilarymason)</li> <li>Interactive Tutorial by Code School. (thx @maxhawkins, @raunaqgupta)</li> </ul> <p>Client Apps: </p> <ul> <li>SourceTree (thx @smallfly) </li> <li>Tower app for Mac OSX ($30 for students). (thx @pitaru)</li> <li>Github for Mac </li> <li>Git-Friendly shell scripts by Jamie Wilkinson. (thx @jamiew)</li> </ul> <p> Videos:</p> <ul> <li>Github Learning Series Video Tutorials. (thx @julianoliver)</li> <li>Github's official YouTube channel. (thx @matthewmccull)</li> <li>Getting Git video by Scott Chacon. (thx @richbate)</li> <li>Mastering Git Basics by Tom Preston-Werner. (thx @maxhawkins)</li> <li>Code Journal Part 1 by James Paterson. (thx @joshuadavis)</li> <li>GitCasts. (thx @bgstaal)</li> </ul> <p>Web Sites/Pages:</p> <ul> <li>Official Git Reference.</li> <li>Github Official Teaching Materials. (thx @matthewmccull)</li> <li>Github Setup Bootcamp.</li> <li>Getting Started with Git by Git-SCM. (thx @julianoliver)</li> <li>Introduction to Git &amp; Git Workflow for Beginners by Steve Klise. (thx @atduskgreg)</li> <li>A Visual Git Reference by Mark Lodato. (thx @moskovich)</li> <li>The openFrameworks Git Workflow by the OF community. (thx @zachlieberman)</li> <li>Git - The Simple Guide by Roger Dudler. (thx @lennyjpg)</li> <li>How to Learn Git (Link Roundup) by Kevin Suttle. (thx @kevinSuttle)</li> <li>A Successful Git Branching Model by @nvie. (thx @smallfly) </li> </ul> <p>Cheat Sheets:</p> <ul> <li>Zach Lieberman's Cheatsheet. (thx @zachlieberman)</li> <li>Git Cheatsheet by Andrew Peterson/NDP Software. (thx @julienbayle)</li> <li>Git Developer Cheatsheet (PDF) by Salesforce.com. (thx @julienbayle)</li> </ul>"},{"location":"dojo/","title":"Coding Dojo Definition","text":"<p>A coding dojo is a programming practice that involves a group of developers coming together to collaborate on solving coding challenges. It is a learning and collaborative environment where developers can improve their coding skills and work on real-world coding problems.</p> <p>The term \"dojo\" comes from the Japanese term for <code>place of the way</code>, which is a traditional place of training for martial arts. In a coding dojo, participants practice the skills they have learned, exchange knowledge and experience, and work together to solve programming challenges.</p> <p>During a coding dojo session, participants work in pairs or small groups to solve programming challenges, using techniques such as pair programming and test-driven development. They work through the problem step by step, discussing and sharing their ideas and approaches along the way. The goal of a coding dojo is to improve individual and team coding skills, and to learn from each other's experiences.</p>"},{"location":"dojo/#timeline-structure","title":"Timeline Structure","text":"<ul> <li>Introduction (5 minutes): The facilitator introduces the coding dojo and the coding challenge for the session.</li> <li>Warm-up exercise (10 minutes): A brief exercise is conducted to get participants warmed up and ready for the coding challenge.</li> <li>Coding challenge (60 minutes): Participants work in pairs or small groups to solve the coding challenge using techniques such as pair programming and test-driven development.</li> <li>Review and discussion (15 minutes): Participants share their solutions and discuss the various approaches taken to solve the challenge.</li> <li>Retrospective (10 minutes): Participants reflect on the session and provide feedback on what went well and what could be improved for future sessions.</li> <li>Closing (5 minutes): The facilitator concludes the session and thanks the participants for their contributions.</li> </ul>"},{"location":"dojo/Full-Cycle-SDL-Development/","title":"Full Cycle Cross-platform Game Development with SDL, CMAKE and GitHub","text":"<p>This Dojo is focused in training professionals on setting up a full cycle project using SDL, CMAKE and GitHub actions.</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#agenda","title":"Agenda:","text":"<ul> <li>Introduction (5 minutes): The facilitator introduces the coding dojo and the goal of the session, which is to create a CMake build system for an SDL project using GitHub Actions.</li> <li>Warm-up exercise (10 minutes): A brief exercise is conducted to get participants warmed up and familiar with SDL and CMake.</li> <li>Setting up the project (30 minutes): Participants work in pairs or small groups to clone the SDL project from GitHub and create a CMake build system for it.</li> <li>Adding GitHub Actions (30 minutes): Participants continue to work on their CMake build systems and add GitHub Actions to automate the build and test process.</li> <li>Review and discussion (10 minutes): Participants share their solutions and discuss the various approaches taken to create the CMake build system and implement GitHub Actions.</li> <li>Retrospective (5 minutes): Participants reflect on the session and provide feedback on what went well and what could be improved for future sessions.</li> <li>Closing (5 minutes): The facilitator concludes the session and thanks the participants for their contributions.</li> </ul>"},{"location":"dojo/Full-Cycle-SDL-Development/#introduction","title":"Introduction","text":""},{"location":"dojo/Full-Cycle-SDL-Development/#warm-up","title":"Warm-up","text":"<ul> <li>Write down what do you expect from this Dojo here;</li> </ul>"},{"location":"dojo/Full-Cycle-SDL-Development/#setup","title":"Setup","text":"<p>You can either fork Modern CPP Starter Repo (and star it) or create your own from scratch.</p> <p>Ensure that you have the following software installed in your machine:</p> <ul> <li>C++ Compiler. Ex.: GCC(build-essential, and cmake) on Linux, MS Visual Studio on Windows(select C++ and in additional tools, select cmake), Command Line Tools for OSX.</li> <li>Git. Ex.: Gitkraken(free for students);</li> <li>IDE. Ex.: Clion(free for students);</li> <li>CMake. Ex.: cmake-gui, but clion already bundle it for you.</li> </ul>"},{"location":"dojo/Full-Cycle-SDL-Development/#action","title":"Action","text":""},{"location":"dojo/Full-Cycle-SDL-Development/#1-clone","title":"1. Clone.","text":"<p>Clone your repository you created or forked in the last step (Modern CPP Starter Repo);</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#2-cmake-glob","title":"2. CMake Glob","text":"<p>Edit your CMakeLists.txt to glob your files (naive and powerful approach). Example:</p> <p>Minimum CMake: <pre><code>cmake_minimum_required(VERSION 3.25)\nproject(MY_PROJECT)\nset(CMAKE_CXX_STANDARD 17)\nadd_executable(mygamename main.cpp)\n</code></pre> Add a GLOB to search for four files.  <pre><code>file(GLOB MY_INCLUDES # Rename this variable\nCONFIGURE_DEPENDS\n${CMAKE_CURRENT_SOURCE_DIR}/*.h\n${CMAKE_CURRENT_SOURCE_DIR}/*.hpp\n)\nfile(GLOB MY_SOURCE # Rename this variable\nCONFIGURE_DEPENDS\n${CMAKE_CURRENT_SOURCE_DIR}/*.cpp\n${CMAKE_CURRENT_SOURCE_DIR}/*.c\n)\n</code></pre> Then edit your last line to use the result of it as the sources for your executable. <pre><code>add_executable(mygamename ${MY_SOURCE} ${MY_INCLUDE})\n</code></pre></p>"},{"location":"dojo/Full-Cycle-SDL-Development/#3-cpm","title":"3. CPM","text":"<p>Add code for the package manager CPM. </p> <p>Read their example and how do you download it. Optionally, you can download it dynamically, this is the way I prefer.;</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#4-sdl-dependency","title":"4. SDL dependency","text":"<p>Use CPM to download your dependencies. Please refer to this issue comment for an example. If you want to see something already done, check this one;</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#5-linking","title":"5. Linking","text":"<p>Link your executable to SDL; <pre><code>target_link_libraries(mygamename PUBLIC SDL2)\n</code></pre> You can see it in action here. In this example, we include the external cmake file manage that. It is a good practice to do that. </p>"},{"location":"dojo/Full-Cycle-SDL-Development/#6-optional-imgui","title":"6. Optional: ImGUI","text":"<p>ImGui for debugging interface purposes;</p> <p>Use CPM to download ImGUI and link it to your library. Example - You can optionally remove the static link if you want.   https://github.com/InfiniBrains/SDL2-CPM-CMake-Example/blob/main/main.cpp</p> <p>Link your executable to IMGUI <pre><code>target_link_libraries(mygamename PUBLIC SDL2 IMGUI)\n</code></pre></p>"},{"location":"dojo/Full-Cycle-SDL-Development/#7-it-is-game-time","title":"7. It is GAME time!","text":"<p>Copy this example here to your <code>main.cpp</code> if you are going do use ImGUI or just use something like this:</p> <pre><code>#include &lt;stdio.h&gt;\n#include \"SDL.h\"\nint main()\n{\nif(SDL_Init(SDL_INIT_VIDEO) != 0) {\nfprintf(stderr, \"Could not init SDL: %s\\n\", SDL_GetError());\nreturn 1;\n}\nSDL_Window *screen = SDL_CreateWindow(\"My application\",\nSDL_WINDOWPOS_UNDEFINED,\nSDL_WINDOWPOS_UNDEFINED,\n640, 480,\n0);\nif(!screen) {\nfprintf(stderr, \"Could not create window\\n\");\nreturn 1;\n}\nSDL_Renderer *renderer = SDL_CreateRenderer(screen, -1, SDL_RENDERER_SOFTWARE);\nif(!renderer) {\nfprintf(stderr, \"Could not create renderer\\n\");\nreturn 1;\n}\nSDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);\nSDL_RenderClear(renderer);\nSDL_RenderPresent(renderer);\nSDL_Delay(3000);\nSDL_DestroyWindow(screen);\nSDL_Quit();\nreturn 0;\n}\n</code></pre>"},{"location":"dojo/Full-Cycle-SDL-Development/#8-github-actions","title":"8. Github Actions.","text":"<p>Create folder <code>.github</code> and inside it another one <code>workflows</code>. Inside it create a <code>.yml</code> file.</p> <p>Here you will code declaratively how your build should proceed. The basic steps are usually: Clone, Cache, Install dependencies, Configure, Build, Test and Release conditionally to branch.</p> <p>Check and try to reproduce the same thing you see here. </p> <p>If you are following the Modern CPP Starter Repo, you can explore automated tests. Be my guest and try it.</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#review","title":"Review","text":"<p>How far you went? Share your repos here.</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#retrospective","title":"Retrospective","text":"<p>Please give me feedbacks in what we did today. If you like or have something to improve, say something in here. Ah! you can always fork this repo, improve it and send a pull request back to this repo.</p>"},{"location":"dojo/Full-Cycle-SDL-Development/#closing","title":"Closing","text":"<p>Give stars to all repos you saw here as a way to contribute to the continuity of the project. </p> <p>Propose a new Dojo and be in touch. </p>"},{"location":"dojo/The-most-asked-interview-question/","title":"The most asked interview question","text":"<p>Arguably, the most asked question in coding interviews is the Two Number Sum. It is used by many Bigtechs and AAA Game Studios. You can see this question in many youtube videos, coding websites such as hackerank, leetcode, algoexpert ...</p>"},{"location":"dojo/The-most-asked-interview-question/#agenda-two-number-sum-coding-dojo","title":"Agenda: Two Number Sum Coding Dojo","text":""},{"location":"dojo/The-most-asked-interview-question/#introduction-5-minutes","title":"Introduction (5 minutes)","text":"<ol> <li>Welcome participants to the dojo</li> <li>Introduce the Two Number Sum question as a common coding interview question</li> <li>Discuss the importance of problem-solving skills in coding interviews</li> <li>Briefly explain the rules and structure of the dojo</li> <li>Problem Explanation (10 minutes)</li> </ol>"},{"location":"dojo/The-most-asked-interview-question/#provide-a-brief-overview-of-the-two-number-sum-question","title":"Provide a brief overview of the Two Number Sum question","text":"<ol> <li>Define the problem and its requirements</li> <li>Discuss potential edge cases and constraints</li> <li>Review sample inputs and expected outputs</li> <li>Coding Session (50 minutes)</li> </ol>"},{"location":"dojo/The-most-asked-interview-question/#problem-restrictions-and-characterization","title":"Problem restrictions and characterization","text":"<p>Write a function that will receive an array/vector/list of integers and a target number. Find two numbers inside the array that summed will match the target. You have to return both in a array/vector/list ordered.</p> <p>Implement the solution in 3 different ways. Open the details only after you try. First approach:</p>  1. Naive solution. O(N^2) time and O(1) space; - required to know this;  <p>Can you make it faster?</p>  2. Fastest solution. O(N) time and O(N) space; - this will make you  <p>Can you make it not use much memory, but still be fast?</p>  3. Fastest without mem allocation. O(N*log(N)) time and O(1) space;"},{"location":"dojo/The-most-asked-interview-question/#participants-work-on-solving-the-two-number-sum-problem-in-pairs-or-small-groups","title":"Participants work on solving the Two Number Sum problem in pairs or small groups","text":"<ol> <li>Emphasize the importance of communication and collaboration during the coding session</li> <li>Encourage participants to use a whiteboard or paper to sketch out their solutions</li> <li>Provide guidance and support as needed</li> <li>Code Review (20 minutes)</li> </ol>"},{"location":"dojo/The-most-asked-interview-question/#participants-share-their-solutions-with-the-group","title":"Participants share their solutions with the group","text":"<ol> <li>Facilitate a discussion about each solution, highlighting strengths and areas for improvement</li> <li>Encourage participants to ask questions and provide feedback to their peers</li> <li>Discuss potential optimizations and alternative approaches to the problem</li> <li>Wrap-Up (5 minutes)</li> </ol>"},{"location":"dojo/The-most-asked-interview-question/#recap-the-main-takeaways-from-the-dojo","title":"Recap the main takeaways from the dojo","text":"<ol> <li>Encourage participants to continue practicing problem-solving skills on their own</li> <li>Thank participants for attending the dojo and provide any additional resources or support as needed.</li> <li>Note: The time allocation can be adjusted based on the group's needs and pace.</li> </ol>"},{"location":"overrides/reveal.js/css/theme/","title":"Index","text":""},{"location":"overrides/reveal.js/css/theme/#dependencies","title":"Dependencies","text":"<p>Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment installed before proceeding: https://revealjs.com/installation/#full-setup</p>"},{"location":"overrides/reveal.js/css/theme/#creating-a-theme","title":"Creating a Theme","text":"<p>To create your own theme, start by duplicating a <code>.scss</code> file in /css/theme/source. It will be automatically compiled from Sass to CSS (see the gulpfile) when you run <code>npm run build -- css-themes</code>.</p> <p>Each theme file does four things in the following order:</p> <ol> <li> <p>Include /css/theme/template/mixins.scss Shared utility functions.</p> </li> <li> <p>Include /css/theme/template/settings.scss Declares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3.</p> </li> <li> <p>Override This is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please.</p> </li> <li> <p>Include /css/theme/template/theme.scss The template theme file which will generate final CSS output based on the currently defined variables.</p> </li> </ol>"},{"location":"overrides/reveal.js/examples/markdown/","title":"Markdown Demo","text":""},{"location":"overrides/reveal.js/examples/markdown/#external-11","title":"External 1.1","text":"<p>Content 1.1</p> <p>Note: This will only appear in the speaker notes window.</p>"},{"location":"overrides/reveal.js/examples/markdown/#external-12","title":"External 1.2","text":"<p>Content 1.2</p>"},{"location":"overrides/reveal.js/examples/markdown/#external-2","title":"External 2","text":"<p>Content 2.1</p>"},{"location":"overrides/reveal.js/examples/markdown/#external-31","title":"External 3.1","text":"<p>Content 3.1</p>"},{"location":"overrides/reveal.js/examples/markdown/#external-32","title":"External 3.2","text":"<p>Content 3.2</p>"},{"location":"overrides/reveal.js/examples/markdown/#external-33-image","title":"External 3.3 (Image)","text":""},{"location":"overrides/reveal.js/examples/markdown/#external-34-math","title":"External 3.4 (Math)","text":"<p><code>\\[ J(\\theta_0,\\theta_1) = \\sum_{i=0} \\]</code></p>"},{"location":"overrides/reveal.js/test/simple/","title":"Simple","text":""},{"location":"overrides/reveal.js/test/simple/#slide-11","title":"Slide 1.1","text":"<pre><code>var a = 1;\n</code></pre>"},{"location":"overrides/reveal.js/test/simple/#slide-12","title":"Slide 1.2","text":""},{"location":"overrides/reveal.js/test/simple/#slide-2","title":"Slide 2","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/ferpa/","title":"FERPA","text":""},{"location":"blog/category/privacy/","title":"Privacy","text":""},{"location":"blog/category/teaching/","title":"Teaching","text":""},{"location":"blog/category/academic-honesty/","title":"Academic Honesty","text":""},{"location":"blog/category/plagiarism/","title":"Plagiarism","text":""},{"location":"blog/category/ai/","title":"AI","text":""},{"location":"blog/category/chatgpt/","title":"ChatGPT","text":""},{"location":"blog/category/canvas/","title":"Canvas","text":""},{"location":"blog/category/turnitin/","title":"Turnitin","text":""},{"location":"blog/category/moss/","title":"Moss","text":""},{"location":"blog/category/github-copilot/","title":"Github Copilot","text":""},{"location":"blog/category/mixed-reality/","title":"Mixed Reality","text":""},{"location":"blog/category/virtual-reality/","title":"Virtual Reality","text":""},{"location":"blog/category/augmented-reality/","title":"Augmented Reality","text":""},{"location":"blog/category/augmented-virtuality/","title":"Augmented Virtuality","text":""},{"location":"blog/category/philosophy/","title":"Philosophy","text":""}]}